/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 47tFXWjN2C4NyHFGGpaYQ3
// Component: TQcvW_pSKi3

import * as React from "react";

import { useRouter, Link } from "@tanstack/react-router";
import type { LinkProps } from "@tanstack/react-router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";

import globalcss from "@plasmicapp/react-web/lib/plasmic.css?url";
import defaultcss from "../plasmic__default_style.css?url"; // plasmic-import: global/defaultcss

import projectcss from "./plasmic.css?url"; // plasmic-import: 47tFXWjN2C4NyHFGGpaYQ3/projectcss
import sty from "./PlasmicButton.css?url"; // plasmic-import: TQcvW_pSKi3/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: gj-_D7n31Ho/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 6PNxx3YMyDQ/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  isDisabled: "isDisabled";
  shape: "rounded" | "round" | "sharp";
  size: "compact" | "minimal";
  color:
    | "blue"
    | "green"
    | "yellow"
    | "red"
    | "sand"
    | "white"
    | "softBlue"
    | "softGreen"
    | "softYellow"
    | "softRed"
    | "softSand"
    | "clear"
    | "link";
};
export type PlasmicButton__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size?: SingleChoiceArg<"compact" | "minimal">;
  color?: SingleChoiceArg<
    | "blue"
    | "green"
    | "yellow"
    | "red"
    | "sand"
    | "white"
    | "softBlue"
    | "softGreen"
    | "softYellow"
    | "softRed"
    | "softSand"
    | "clear"
    | "link"
  >;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "showEndIcon",
  "isDisabled",
  "shape",
  "size",
  "color"
);

export type PlasmicButton__ArgsType = {
  link?: string;
  submitsForm?: boolean;
  target?: boolean;
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  endIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "link",
  "submitsForm",
  "target",
  "startIcon",
  "children",
  "endIcon"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<"button">;
  startIconContainer?: Flex__<"div">;
  contentContainer?: Flex__<"div">;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultButtonProps extends pp.BaseButtonProps {
  submitsForm?: boolean;
  target?: boolean;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size?: SingleChoiceArg<"compact" | "minimal">;
  color?: SingleChoiceArg<
    | "blue"
    | "green"
    | "yellow"
    | "red"
    | "sand"
    | "white"
    | "softBlue"
    | "softGreen"
    | "softYellow"
    | "softRed"
    | "softSand"
    | "clear"
    | "link"
  >;
}

const $$ = {};

function useTanStackRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __tanstackRouter = useTanStackRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "showEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__button",
        "root_reset_47tFXWjN2C4NyHFGGpaYQ3",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "Button__root__gpc3K",
        {
          Button__root___focusVisibleWithin__gpc3KcjR25:
            triggers.focusVisibleWithin_root,
          Button__rootcolor_blue__gpc3K7OS1A: hasVariant(
            $state,
            "color",
            "blue"
          ),
          Button__rootcolor_clear__gpc3KpPAgM: hasVariant(
            $state,
            "color",
            "clear"
          ),
          Button__rootcolor_green__gpc3Kwu3Pw: hasVariant(
            $state,
            "color",
            "green"
          ),
          Button__rootcolor_link__gpc3Kf1H09: hasVariant(
            $state,
            "color",
            "link"
          ),
          Button__rootcolor_link_size_minimal__gpc3Kf1H09KlAxP:
            hasVariant($state, "color", "link") &&
            hasVariant($state, "size", "minimal"),
          Button__rootcolor_red__gpc3KlyFe7: hasVariant($state, "color", "red"),
          Button__rootcolor_sand__gpc3K2T7KH: hasVariant(
            $state,
            "color",
            "sand"
          ),
          Button__rootcolor_softBlue__gpc3KnZeg: hasVariant(
            $state,
            "color",
            "softBlue"
          ),
          Button__rootcolor_softGreen__gpc3KqOip: hasVariant(
            $state,
            "color",
            "softGreen"
          ),
          Button__rootcolor_softRed__gpc3KEt128: hasVariant(
            $state,
            "color",
            "softRed"
          ),
          Button__rootcolor_softSand__gpc3K8XvkE: hasVariant(
            $state,
            "color",
            "softSand"
          ),
          Button__rootcolor_softYellow__gpc3K95U0X: hasVariant(
            $state,
            "color",
            "softYellow"
          ),
          Button__rootcolor_white__gpc3K5R3VM: hasVariant(
            $state,
            "color",
            "white"
          ),
          Button__rootcolor_yellow__gpc3KoEjPn: hasVariant(
            $state,
            "color",
            "yellow"
          ),
          Button__rootisDisabled__gpc3Kwr3Ff: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          Button__rootshape_round__gpc3Kq33Mv: hasVariant(
            $state,
            "shape",
            "round"
          ),
          Button__rootshape_round_size_compact__gpc3Kq33MvN6Abw:
            hasVariant($state, "shape", "round") &&
            hasVariant($state, "size", "compact"),
          Button__rootshape_rounded__gpc3KYlIzA: hasVariant(
            $state,
            "shape",
            "rounded"
          ),
          Button__rootshape_rounded_showStartIcon__gpc3KYlIzAZX0Z8:
            hasVariant($state, "shape", "rounded") &&
            hasVariant($state, "showStartIcon", "showStartIcon"),
          Button__rootshape_rounded_size_compact__gpc3KYlIzAN6Abw:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "shape", "rounded"),
          Button__rootshape_sharp__gpc3K0LUp: hasVariant(
            $state,
            "shape",
            "sharp"
          ),
          Button__rootshowEndIcon__gpc3Kyu4Va: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          ),
          Button__rootshowEndIcon_shape_rounded__gpc3Kyu4VaYlIzA:
            hasVariant($state, "showEndIcon", "showEndIcon") &&
            hasVariant($state, "shape", "rounded"),
          Button__rootshowEndIcon_size_compact__gpc3Kyu4VaN6Abw:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showEndIcon", "showEndIcon"),
          Button__rootshowEndIcon_size_compact_showStartIcon__gpc3Kyu4VaN6AbwZX0Z8:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showStartIcon", "showStartIcon") &&
            hasVariant($state, "showEndIcon", "showEndIcon"),
          Button__rootshowStartIcon__gpc3KzX0Z8: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          Button__rootsize_compact__gpc3Kn6Abw: hasVariant(
            $state,
            "size",
            "compact"
          ),
          Button__rootsize_compact_showStartIcon__gpc3Kn6AbwZX0Z8:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showStartIcon", "showStartIcon"),
          Button__rootsize_minimal__gpc3KklAxP: hasVariant(
            $state,
            "size",
            "minimal"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      {(hasVariant($state, "showStartIcon", "showStartIcon") ? true : false) ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Button__startIconContainer__men7Z",
            {
              Button__startIconContainercolor_blue__men7Z7OS1A: hasVariant(
                $state,
                "color",
                "blue"
              ),
              Button__startIconContainershape_rounded_showStartIcon__men7ZYlIzAZX0Z8:
                hasVariant($state, "shape", "rounded") &&
                hasVariant($state, "showStartIcon", "showStartIcon"),
              Button__startIconContainershowStartIcon__men7ZzX0Z8: hasVariant(
                $state,
                "showStartIcon",
                "showStartIcon"
              )
            }
          )}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CheckSvgIcon
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__svg",
                  "Button__svg__s6Xxe"
                )}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames("Button__slotTargetStartIcon__tvHa9", {
              Button__slotTargetStartIconcolor_blue__tvHa97OS1A: hasVariant(
                $state,
                "color",
                "blue"
              ),
              Button__slotTargetStartIconcolor_clear__tvHa9PPAgM: hasVariant(
                $state,
                "color",
                "clear"
              ),
              Button__slotTargetStartIconcolor_link__tvHa9F1H09: hasVariant(
                $state,
                "color",
                "link"
              ),
              Button__slotTargetStartIconcolor_softBlue__tvHa9NZeg: hasVariant(
                $state,
                "color",
                "softBlue"
              ),
              Button__slotTargetStartIconcolor_softGreen__tvHa9QOip: hasVariant(
                $state,
                "color",
                "softGreen"
              ),
              Button__slotTargetStartIconcolor_softRed__tvHa9Et128: hasVariant(
                $state,
                "color",
                "softRed"
              ),
              Button__slotTargetStartIconcolor_softSand__tvHa98XvkE: hasVariant(
                $state,
                "color",
                "softSand"
              ),
              Button__slotTargetStartIconcolor_softYellow__tvHa995U0X:
                hasVariant($state, "color", "softYellow"),
              Button__slotTargetStartIconcolor_white__tvHa95R3VM: hasVariant(
                $state,
                "color",
                "white"
              ),
              Button__slotTargetStartIconcolor_yellow__tvHa9OEjPn: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              Button__slotTargetStartIconshowStartIcon__tvHa9ZX0Z8: hasVariant(
                $state,
                "showStartIcon",
                "showStartIcon"
              )
            })
          })}
        </div>
      ) : null}
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Button__contentContainer__sXXwU",
          {
            Button__contentContainer___focusVisibleWithin__sXXwUcjR25:
              triggers.focusVisibleWithin_root,
            Button__contentContainerisDisabled__sXXwUwr3Ff: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            Button__contentContainershape_rounded__sXXwUYlIzA: hasVariant(
              $state,
              "shape",
              "rounded"
            ),
            Button__contentContainershowEndIcon__sXXwUyu4Va: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            )
          }
        )}
      >
        {renderPlasmicSlot({
          defaultContents: "Button",
          value: args.children,
          className: classNames("Button__slotTargetChildren__yzBwr", {
            Button__slotTargetChildren___focusVisibleWithin__yzBwRcjR25:
              triggers.focusVisibleWithin_root,
            Button__slotTargetChildrencolor_blue__yzBwr7OS1A: hasVariant(
              $state,
              "color",
              "blue"
            ),
            Button__slotTargetChildrencolor_clear__yzBwRpPAgM: hasVariant(
              $state,
              "color",
              "clear"
            ),
            Button__slotTargetChildrencolor_green__yzBwRwu3Pw: hasVariant(
              $state,
              "color",
              "green"
            ),
            Button__slotTargetChildrencolor_link__yzBwRf1H09: hasVariant(
              $state,
              "color",
              "link"
            ),
            Button__slotTargetChildrencolor_link_size_minimal__yzBwRf1H09KlAxP:
              hasVariant($state, "color", "link") &&
              hasVariant($state, "size", "minimal"),
            Button__slotTargetChildrencolor_red__yzBwrlyFe7: hasVariant(
              $state,
              "color",
              "red"
            ),
            Button__slotTargetChildrencolor_sand__yzBwr2T7KH: hasVariant(
              $state,
              "color",
              "sand"
            ),
            Button__slotTargetChildrencolor_softBlue__yzBwRnZeg: hasVariant(
              $state,
              "color",
              "softBlue"
            ),
            Button__slotTargetChildrencolor_softGreen__yzBwrqOip: hasVariant(
              $state,
              "color",
              "softGreen"
            ),
            Button__slotTargetChildrencolor_softRed__yzBwrEt128: hasVariant(
              $state,
              "color",
              "softRed"
            ),
            Button__slotTargetChildrencolor_softSand__yzBwr8XvkE: hasVariant(
              $state,
              "color",
              "softSand"
            ),
            Button__slotTargetChildrencolor_softYellow__yzBwr95U0X: hasVariant(
              $state,
              "color",
              "softYellow"
            ),
            Button__slotTargetChildrencolor_white__yzBwr5R3VM: hasVariant(
              $state,
              "color",
              "white"
            ),
            Button__slotTargetChildrencolor_yellow__yzBwRoEjPn: hasVariant(
              $state,
              "color",
              "yellow"
            ),
            Button__slotTargetChildrenisDisabled__yzBwrwr3Ff: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            Button__slotTargetChildrenshape_rounded__yzBwrYlIzA: hasVariant(
              $state,
              "shape",
              "rounded"
            ),
            Button__slotTargetChildrenshowEndIcon__yzBwryu4Va: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            ),
            Button__slotTargetChildrenshowStartIcon__yzBwRzX0Z8: hasVariant(
              $state,
              "showStartIcon",
              "showStartIcon"
            ),
            Button__slotTargetChildrensize_minimal__yzBwRklAxP: hasVariant(
              $state,
              "size",
              "minimal"
            )
          })
        })}
      </div>
      {(hasVariant($state, "showEndIcon", "showEndIcon") ? true : false) ? (
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Button__endIconContainer___3CzAx",
            {
              Button__endIconContainercolor_white___3CzAx5R3VM: hasVariant(
                $state,
                "color",
                "white"
              ),
              Button__endIconContainercolor_yellow___3CzAxoEjPn: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              Button__endIconContainershowEndIcon___3CzAxYu4Va: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            }
          )}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <IconIcon
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__svg",
                  "Button__svg__liJa"
                )}
                role={"img"}
              />
            ),

            value: args.endIcon,
            className: classNames("Button__slotTargetEndIcon__eGy7P", {
              Button__slotTargetEndIconcolor_clear__eGy7PpPAgM: hasVariant(
                $state,
                "color",
                "clear"
              ),
              Button__slotTargetEndIconcolor_link__eGy7Pf1H09: hasVariant(
                $state,
                "color",
                "link"
              ),
              Button__slotTargetEndIconcolor_softBlue__eGy7PnZeg: hasVariant(
                $state,
                "color",
                "softBlue"
              ),
              Button__slotTargetEndIconcolor_softGreen__eGy7PqOip: hasVariant(
                $state,
                "color",
                "softGreen"
              ),
              Button__slotTargetEndIconcolor_softRed__eGy7PEt128: hasVariant(
                $state,
                "color",
                "softRed"
              ),
              Button__slotTargetEndIconcolor_softSand__eGy7P8XvkE: hasVariant(
                $state,
                "color",
                "softSand"
              ),
              Button__slotTargetEndIconcolor_softYellow__eGy7P95U0X: hasVariant(
                $state,
                "color",
                "softYellow"
              ),
              Button__slotTargetEndIconcolor_white__eGy7P5R3VM: hasVariant(
                $state,
                "color",
                "white"
              ),
              Button__slotTargetEndIconcolor_yellow__eGy7PoEjPn: hasVariant(
                $state,
                "color",
                "yellow"
              ),
              Button__slotTargetEndIconshowEndIcon__eGy7Pyu4Va: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            })
          })}
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.PlumeButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicButton>(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = PlasmicLink__;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "tanstack";
  }
  return b;
}

const PlasmicDescendants = {
  root: ["root", "startIconContainer", "contentContainer", "endIconContainer"],
  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  startIconContainer: "div";
  contentContainer: "div";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,

    useBehavior
  }
);

export const PlasmicButton__HeadOptions = {
  meta: [{ name: "twitter:card", content: "summary" }],

  links: [
    { rel: "stylesheet", href: globalcss },
    { rel: "stylesheet", href: defaultcss },
    { rel: "stylesheet", href: projectcss },
    { rel: "stylesheet", href: sty }
  ]
} as Record<"meta" | "links", Array<Record<string, string>>>;

export default PlasmicButton;
/* prettier-ignore-end */
