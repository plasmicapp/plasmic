{"version":3,"file":"plasmic-rive.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import registerComponent, {\n  CodeComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport React from \"react\";\nimport {\n  RiveProps,\n  StateMachineInputType,\n  useRive,\n  Layout,\n} from \"@rive-app/react-canvas\";\nimport { usePlasmicCanvasContext } from \"@plasmicapp/host\";\n\ntype RiveComponentProps = RiveProps & {\n  className: string;\n  autoplay: boolean;\n  studioAutoplay: boolean;\n  onStateChange?: (event: any) => void;\n};\n\ninterface RiveInputs {\n  setBoolean(name: string, value: boolean): void;\n  setNumber(name: string, value: number): void;\n  fire(name: string): void;\n}\n\nconst RivePlayer = React.forwardRef<RiveInputs, RiveComponentProps>(\n  ({ layout, className, onStateChange, stateMachines, ...props }, ref) => {\n    const inEditor = usePlasmicCanvasContext();\n    const riveLayout = layout\n      ? new Layout({\n          fit: layout.fit,\n          alignment: layout.alignment,\n          minX: layout.minX,\n          minY: layout.minY,\n          maxX: layout.maxX,\n          maxY: layout.maxY,\n        })\n      : undefined;\n\n    // Always create a new riveParams/options object when any relevant prop changes\n    const riveParams = React.useMemo(\n      () => ({\n        src: props.src,\n        artboard: props.artboard,\n        animations: props.animations,\n        stateMachines,\n        layout: riveLayout,\n        autoplay: inEditor ? props.studioAutoplay : props.autoplay,\n        onStateChange: (event: any) => {\n          if (onStateChange) {\n            onStateChange(event);\n          }\n        },\n      }),\n      [\n        props.src,\n        props.artboard,\n        props.animations,\n        props.autoplay,\n        props.studioAutoplay,\n        riveLayout,\n        stateMachines,\n        inEditor,\n        onStateChange,\n      ]\n    );\n\n    const { rive, RiveComponent } = useRive(riveParams);\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        setBoolean(name: string, value: boolean, stateMachine?: string) {\n          setInput(StateMachineInputType.Boolean, name, value, stateMachine);\n        },\n        setNumber(name: string, value: number, stateMachine?: string) {\n          setInput(StateMachineInputType.Number, name, value, stateMachine);\n        },\n        fire(name: string, stateMachine?: string) {\n          setInput(StateMachineInputType.Trigger, name, null, stateMachine);\n        },\n        play(animationName: string) {\n          rive?.play(animationName);\n        },\n        pause(animationName: string) {\n          rive?.pause(animationName);\n        },\n      }),\n      [rive]\n    );\n\n    function setInput(\n      inputType: StateMachineInputType,\n      inputName: string,\n      value: any = null,\n      stateMachine: string | null = null\n    ) {\n      const inputs = rive?.stateMachineInputs(\n        stateMachine || (stateMachines as string)\n      );\n      (inputs || []).forEach((i: any) => {\n        if (i.type !== inputType) {\n          console.warn(\n            `PlasmicRive: Input type mismatch: expected ${inputType}, got ${i.type}`\n          );\n        }\n        if (i.name === inputName) {\n          switch (inputType) {\n            case StateMachineInputType.Trigger:\n              i.fire();\n              break;\n            case StateMachineInputType.Number:\n            case StateMachineInputType.Boolean:\n              i.value = value;\n              break;\n          }\n        }\n      });\n    }\n\n    // In Plasmic Studio, force a remount by changing the key when any relevant prop changes\n    const studioKey = React.useMemo(\n      () =>\n        inEditor\n          ? [\n              props.src,\n              props.artboard,\n              props.animations,\n              props.autoplay,\n              props.studioAutoplay,\n              JSON.stringify(layout),\n              stateMachines,\n              Date.now(), // ensures a new key on every render in studio\n            ].join(\"|\")\n          : undefined,\n      [\n        inEditor,\n        props.src,\n        props.artboard,\n        props.animations,\n        props.autoplay,\n        props.studioAutoplay,\n        layout,\n        stateMachines,\n      ]\n    );\n\n    return <RiveComponent className={className} key={studioKey} />;\n  }\n);\n\nexport const riveMetaDescriptor: CodeComponentMeta<RiveComponentProps> = {\n  name: \"rive\",\n  displayName: \"Rive\",\n  importName: \"Rive\",\n  importPath: \"@plasmicpkgs/plasmic-rive\",\n  description: \"Rive animation component\",\n\n  props: {\n    src: {\n      type: \"string\",\n      defaultValue: \"https://cdn.rive.app/animations/vehicles.riv\",\n      displayName: \"Source URL\",\n      description: \"URL to the .riv file (exported from Rive)\",\n    },\n    stateMachines: {\n      type: \"string\",\n      displayName: \"State Machines\",\n      description: \"(optional) Name of state machine to load.\",\n      advanced: true,\n    },\n    autoplay: {\n      type: \"boolean\",\n      displayName: \"Autoplay\",\n      description: \"Should animation play automatically.\",\n      defaultValue: true,\n      advanced: true,\n    },\n    studioAutoplay: {\n      type: \"boolean\",\n      displayName: \"Studio Autoplay\",\n      description: \"Should animation play automatically in Plasmic Studio.\",\n      defaultValue: false,\n      advanced: true,\n    },\n    artboard: {\n      type: \"string\",\n      displayName: \"Artboard\",\n      description: \"(optional) Name of the artboard to use.\",\n      advanced: true,\n    },\n    layout: {\n      type: \"object\",\n      displayName: \"Layout\",\n      description:\n        \"(optional) Layout object to define how animations are displayed on the canvas.\",\n      advanced: true,\n      fields: {\n        fit: {\n          type: \"choice\",\n          displayName: \"Fit\",\n          options: [\n            \"cover\",\n            \"contain\",\n            \"fill\",\n            \"fitWidth\",\n            \"fitHeight\",\n            \"none\",\n            \"scaleDown\",\n          ],\n          description: \"How the animation should fit in the canvas.\",\n        },\n        alignment: {\n          type: \"choice\",\n          displayName: \"Alignment\",\n          options: [\n            \"center\",\n            \"topLeft\",\n            \"topCenter\",\n            \"topRight\",\n            \"centerLeft\",\n            \"centerRight\",\n            \"bottomLeft\",\n            \"bottomCenter\",\n            \"bottomRight\",\n          ],\n          description: \"How the animation should be aligned in the canvas.\",\n        },\n        minX: { type: \"number\", displayName: \"Min X\", advanced: true },\n        minY: { type: \"number\", displayName: \"Min Y\", advanced: true },\n        maxX: { type: \"number\", displayName: \"Max X\", advanced: true },\n        maxY: { type: \"number\", displayName: \"Max Y\", advanced: true },\n      },\n    },\n    animations: {\n      type: \"string\",\n      displayName: \"Animations\",\n      description: \"(optional) Name or list of names of animations to play.\",\n      advanced: true,\n    },\n    onStateChange: {\n      type: \"eventHandler\",\n      displayName: \"On State Change\",\n      description: \"(optional) Callback when the state changes.\",\n      advanced: true,\n      argTypes: [\n        {\n          name: \"event\",\n          type: \"object\",\n        },\n      ],\n    },\n  },\n  refActions: {\n    setBoolean: {\n      description: \"Set the Rive Input\",\n      argTypes: [\n        {\n          name: \"name\",\n          type: \"string\",\n          displayName: \"Input Name\",\n        },\n        {\n          name: \"value\",\n          type: \"boolean\",\n          displayName: \"Input Value\",\n        },\n        {\n          name: \"stateMachine\",\n          type: \"string\",\n          displayName: \"State Machine Name\",\n        },\n      ],\n    },\n    setNumber: {\n      description: \"Set the Rive Input\",\n      argTypes: [\n        {\n          name: \"name\",\n          type: \"string\",\n          displayName: \"Input Name\",\n        },\n        {\n          name: \"value\",\n          type: \"number\",\n          displayName: \"Input Value\",\n        },\n        {\n          name: \"stateMachine\",\n          type: \"string\",\n          displayName: \"State Machine Name\",\n        },\n      ],\n    },\n    fire: {\n      description: \"Fire the Rive Input\",\n      argTypes: [\n        {\n          name: \"name\",\n          type: \"string\",\n          displayName: \"Input Name\",\n        },\n        {\n          name: \"stateMachine\",\n          type: \"string\",\n          displayName: \"State Machine Name\",\n        },\n      ],\n    },\n    play: {\n      description: \"Play the animation\",\n      argTypes: [\n        {\n          name: \"animationName\",\n          type: \"string\",\n          displayName: \"Animation Name\",\n        },\n      ],\n    },\n    pause: {\n      description: \"Pause the animation\",\n      argTypes: [\n        {\n          name: \"animationName\",\n          type: \"string\",\n          displayName: \"Animation Name\",\n        },\n      ],\n    },\n  },\n};\n\nexport function registerPlasmicRive(loader?: {\n  registerComponent: typeof registerComponent;\n}) {\n  if (loader) {\n    loader.registerComponent(RivePlayer, riveMetaDescriptor);\n  } else {\n    registerComponent(RivePlayer, riveMetaDescriptor);\n  }\n}\n\nexport default RivePlayer;\n"],"names":["RivePlayer","React","forwardRef","_ref","ref","layout","className","onStateChange","stateMachines","props","_objectWithoutPropertiesLoose","_excluded","inEditor","usePlasmicCanvasContext","riveLayout","Layout","fit","alignment","minX","minY","maxX","maxY","undefined","riveParams","useMemo","src","artboard","animations","autoplay","studioAutoplay","event","_useRive","useRive","rive","RiveComponent","useImperativeHandle","setBoolean","name","value","stateMachine","setInput","StateMachineInputType","Boolean","setNumber","Number","fire","Trigger","play","animationName","pause","inputType","inputName","inputs","stateMachineInputs","forEach","i","type","console","warn","studioKey","JSON","stringify","Date","now","join","key","riveMetaDescriptor","displayName","importName","importPath","description","defaultValue","advanced","fields","options","argTypes","refActions","registerPlasmicRive","loader","registerComponent"],"mappings":"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"}