{"version":3,"file":"plasmic-rive.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import registerComponent, {\n  CodeComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport React from \"react\";\nimport {\n  RiveProps,\n  StateMachineInputType,\n  useRive,\n  Layout,\n} from \"@rive-app/react-canvas\";\nimport { usePlasmicCanvasContext } from \"@plasmicapp/host\";\n\ntype RiveComponentProps = RiveProps & {\n  className: string;\n  autoplay: boolean;\n  studioAutoplay: boolean;\n  onStateChange?: (event: any) => void;\n};\n\ninterface RiveInputs {\n  setBoolean(name: string, value: boolean): void;\n  setNumber(name: string, value: number): void;\n  fire(name: string): void;\n}\n\nconst RivePlayer = React.forwardRef<RiveInputs, RiveComponentProps>(\n  ({ layout, className, onStateChange, stateMachines, ...props }, ref) => {\n    const inEditor = usePlasmicCanvasContext();\n    const riveLayout = layout\n      ? new Layout({\n          fit: layout.fit,\n          alignment: layout.alignment,\n          minX: layout.minX,\n          minY: layout.minY,\n          maxX: layout.maxX,\n          maxY: layout.maxY,\n        })\n      : undefined;\n\n    // Always create a new riveParams/options object when any relevant prop changes\n    const riveParams = React.useMemo(\n      () => ({\n        src: props.src,\n        artboard: props.artboard,\n        animations: props.animations,\n        stateMachines,\n        layout: riveLayout,\n        autoplay: inEditor ? props.studioAutoplay : props.autoplay,\n        onStateChange: (event: any) => {\n          if (onStateChange) {\n            onStateChange(event);\n          }\n        },\n      }),\n      [\n        props.src,\n        props.artboard,\n        props.animations,\n        props.autoplay,\n        props.studioAutoplay,\n        riveLayout,\n        stateMachines,\n        inEditor,\n        onStateChange,\n      ]\n    );\n\n    const { rive, RiveComponent } = useRive(riveParams);\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        setBoolean(name: string, value: boolean, stateMachine?: string) {\n          setInput(StateMachineInputType.Boolean, name, value, stateMachine);\n        },\n        setNumber(name: string, value: number, stateMachine?: string) {\n          setInput(StateMachineInputType.Number, name, value, stateMachine);\n        },\n        fire(name: string, stateMachine?: string) {\n          setInput(StateMachineInputType.Trigger, name, null, stateMachine);\n        },\n        play(animationName: string) {\n          rive?.play(animationName);\n        },\n        pause(animationName: string) {\n          rive?.pause(animationName);\n        },\n      }),\n      [rive]\n    );\n\n    function setInput(\n      inputType: StateMachineInputType,\n      inputName: string,\n      value: any = null,\n      stateMachine: string | null = null\n    ) {\n      const inputs = rive?.stateMachineInputs(\n        stateMachine || (stateMachines as string)\n      );\n      (inputs || []).forEach((i: any) => {\n        if (i.type !== inputType) {\n          console.warn(\n            `PlasmicRive: Input type mismatch: expected ${inputType}, got ${i.type}`\n          );\n        }\n        if (i.name === inputName) {\n          switch (inputType) {\n            case StateMachineInputType.Trigger:\n              i.fire();\n              break;\n            case StateMachineInputType.Number:\n            case StateMachineInputType.Boolean:\n              i.value = value;\n              break;\n          }\n        }\n      });\n    }\n\n    // In Plasmic Studio, force a remount by changing the key when any relevant prop changes\n    const studioKey = React.useMemo(\n      () =>\n        inEditor\n          ? [\n              props.src,\n              props.artboard,\n              props.animations,\n              props.autoplay,\n              props.studioAutoplay,\n              JSON.stringify(layout),\n              stateMachines,\n              Date.now(), // ensures a new key on every render in studio\n            ].join(\"|\")\n          : undefined,\n      [\n        inEditor,\n        props.src,\n        props.artboard,\n        props.animations,\n        props.autoplay,\n        props.studioAutoplay,\n        layout,\n        stateMachines,\n      ]\n    );\n\n    return <RiveComponent className={className} key={studioKey} />;\n  }\n);\n\nexport const riveMetaDescriptor: CodeComponentMeta<RiveComponentProps> = {\n  name: \"rive\",\n  displayName: \"Rive\",\n  importName: \"Rive\",\n  importPath: \"@plasmicpkgs/plasmic-rive\",\n  description: \"Rive animation component\",\n\n  props: {\n    src: {\n      type: \"string\",\n      defaultValue: \"https://cdn.rive.app/animations/vehicles.riv\",\n      displayName: \"Source URL\",\n      description: \"URL to the .riv file (exported from Rive)\",\n    },\n    stateMachines: {\n      type: \"string\",\n      displayName: \"State Machines\",\n      description: \"(optional) Name of state machine to load.\",\n      advanced: true,\n    },\n    autoplay: {\n      type: \"boolean\",\n      displayName: \"Autoplay\",\n      description: \"Should animation play automatically.\",\n      defaultValue: true,\n      advanced: true,\n    },\n    studioAutoplay: {\n      type: \"boolean\",\n      displayName: \"Studio Autoplay\",\n      description: \"Should animation play automatically in Plasmic Studio.\",\n      defaultValue: false,\n      advanced: true,\n    },\n    artboard: {\n      type: \"string\",\n      displayName: \"Artboard\",\n      description: \"(optional) Name of the artboard to use.\",\n      advanced: true,\n    },\n    layout: {\n      type: \"object\",\n      displayName: \"Layout\",\n      description:\n        \"(optional) Layout object to define how animations are displayed on the canvas.\",\n      advanced: true,\n      fields: {\n        fit: {\n          type: \"choice\",\n          displayName: \"Fit\",\n          options: [\n            \"cover\",\n            \"contain\",\n            \"fill\",\n            \"fitWidth\",\n            \"fitHeight\",\n            \"none\",\n            \"scaleDown\",\n          ],\n          description: \"How the animation should fit in the canvas.\",\n        },\n        alignment: {\n          type: \"choice\",\n          displayName: \"Alignment\",\n          options: [\n            \"center\",\n            \"topLeft\",\n            \"topCenter\",\n            \"topRight\",\n            \"centerLeft\",\n            \"centerRight\",\n            \"bottomLeft\",\n            \"bottomCenter\",\n            \"bottomRight\",\n          ],\n          description: \"How the animation should be aligned in the canvas.\",\n        },\n        minX: { type: \"number\", displayName: \"Min X\", advanced: true },\n        minY: { type: \"number\", displayName: \"Min Y\", advanced: true },\n        maxX: { type: \"number\", displayName: \"Max X\", advanced: true },\n        maxY: { type: \"number\", displayName: \"Max Y\", advanced: true },\n      },\n    },\n    animations: {\n      type: \"string\",\n      displayName: \"Animations\",\n      description: \"(optional) Name or list of names of animations to play.\",\n      advanced: true,\n    },\n    onStateChange: {\n      type: \"eventHandler\",\n      displayName: \"On State Change\",\n      description: \"(optional) Callback when the state changes.\",\n      advanced: true,\n      argTypes: [\n        {\n          name: \"event\",\n          type: \"object\",\n        },\n      ],\n    },\n  },\n  refActions: {\n    setBoolean: {\n      description: \"Set the Rive Input\",\n      argTypes: [\n        {\n          name: \"name\",\n          type: \"string\",\n          displayName: \"Input Name\",\n        },\n        {\n          name: \"value\",\n          type: \"boolean\",\n          displayName: \"Input Value\",\n        },\n        {\n          name: \"stateMachine\",\n          type: \"string\",\n          displayName: \"State Machine Name\",\n        },\n      ],\n    },\n    setNumber: {\n      description: \"Set the Rive Input\",\n      argTypes: [\n        {\n          name: \"name\",\n          type: \"string\",\n          displayName: \"Input Name\",\n        },\n        {\n          name: \"value\",\n          type: \"number\",\n          displayName: \"Input Value\",\n        },\n        {\n          name: \"stateMachine\",\n          type: \"string\",\n          displayName: \"State Machine Name\",\n        },\n      ],\n    },\n    fire: {\n      description: \"Fire the Rive Input\",\n      argTypes: [\n        {\n          name: \"name\",\n          type: \"string\",\n          displayName: \"Input Name\",\n        },\n        {\n          name: \"stateMachine\",\n          type: \"string\",\n          displayName: \"State Machine Name\",\n        },\n      ],\n    },\n    play: {\n      description: \"Play the animation\",\n      argTypes: [\n        {\n          name: \"animationName\",\n          type: \"string\",\n          displayName: \"Animation Name\",\n        },\n      ],\n    },\n    pause: {\n      description: \"Pause the animation\",\n      argTypes: [\n        {\n          name: \"animationName\",\n          type: \"string\",\n          displayName: \"Animation Name\",\n        },\n      ],\n    },\n  },\n};\n\nexport function registerPlasmicRive(loader?: {\n  registerComponent: typeof registerComponent;\n}) {\n  if (loader) {\n    loader.registerComponent(RivePlayer, riveMetaDescriptor);\n  } else {\n    registerComponent(RivePlayer, riveMetaDescriptor);\n  }\n}\n\nexport default RivePlayer;\n"],"names":["RivePlayer","React","forwardRef","_ref","ref","layout","className","onStateChange","stateMachines","props","_objectWithoutPropertiesLoose","_excluded","inEditor","usePlasmicCanvasContext","riveLayout","Layout","fit","alignment","minX","minY","maxX","maxY","undefined","riveParams","useMemo","src","artboard","animations","autoplay","studioAutoplay","event","_useRive","useRive","rive","RiveComponent","setInput","inputType","inputName","value","stateMachine","stateMachineInputs","forEach","i","type","console","warn","name","StateMachineInputType","Trigger","fire","Number","Boolean","useImperativeHandle","setBoolean","setNumber","play","animationName","pause","studioKey","JSON","stringify","Date","now","join","key","riveMetaDescriptor","displayName","importName","importPath","description","defaultValue","advanced","fields","options","argTypes","refActions","loader","registerComponent"],"mappings":"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"}