// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kTSMroKPFv65RRTb44SCtk
// Component: Gc2UoCN4xKJL

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import UserList from "../../components/user-mentions/UserList"; // plasmic-import: l-sEnd6egOHM/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kTSMroKPFv65RRTb44SCtk/projectcss
import sty from "./PlasmicUserMentionsPopoverContent.module.css"; // plasmic-import: Gc2UoCN4xKJL/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 9tHnrDLYFnPe/icon

createPlasmicElementProxy;

export type PlasmicUserMentionsPopoverContent__VariantMembers = {};
export type PlasmicUserMentionsPopoverContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserMentionsPopoverContent__VariantsArgs;
export const PlasmicUserMentionsPopoverContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUserMentionsPopoverContent__ArgsType = {};
type ArgPropType = keyof PlasmicUserMentionsPopoverContent__ArgsType;
export const PlasmicUserMentionsPopoverContent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicUserMentionsPopoverContent__OverridesType = {
  root?: Flex__<"div">;
  userList?: Flex__<typeof UserList>;
  freeBox?: Flex__<"div">;
  separator?: Flex__<"div">;
  shareProject?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
};

export interface DefaultUserMentionsPopoverContentProps {
  className?: string;
}

const $$ = {};

function PlasmicUserMentionsPopoverContent__RenderFunc(props: {
  variants: PlasmicUserMentionsPopoverContent__VariantsArgs;
  args: PlasmicUserMentionsPopoverContent__ArgsType;
  overrides: PlasmicUserMentionsPopoverContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <UserList
        data-plasmic-name={"userList"}
        data-plasmic-override={overrides.userList}
        className={classNames("__wab_instance", sty.userList)}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"separator"}
          data-plasmic-override={overrides.separator}
          className={classNames(projectcss.all, sty.separator)}
        />
      </div>
      <Button
        data-plasmic-name={"shareProject"}
        data-plasmic-override={overrides.shareProject}
        className={classNames("__wab_instance", sty.shareProject)}
        size={"stretch"}
        startIcon={
          <IconIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        type={["clear"]}
        withIcons={["startIcon"]}
      >
        {"Share proejct"}
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "userList", "freeBox", "separator", "shareProject", "svg"],
  userList: ["userList"],
  freeBox: ["freeBox", "separator"],
  separator: ["separator"],
  shareProject: ["shareProject", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  userList: typeof UserList;
  freeBox: "div";
  separator: "div";
  shareProject: typeof Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserMentionsPopoverContent__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserMentionsPopoverContent__VariantsArgs;
    args?: PlasmicUserMentionsPopoverContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserMentionsPopoverContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserMentionsPopoverContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserMentionsPopoverContent__ArgProps,
          internalVariantPropNames:
            PlasmicUserMentionsPopoverContent__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicUserMentionsPopoverContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserMentionsPopoverContent";
  } else {
    func.displayName = `PlasmicUserMentionsPopoverContent.${nodeName}`;
  }
  return func;
}

export const PlasmicUserMentionsPopoverContent = Object.assign(
  // Top-level PlasmicUserMentionsPopoverContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    userList: makeNodeComponent("userList"),
    freeBox: makeNodeComponent("freeBox"),
    separator: makeNodeComponent("separator"),
    shareProject: makeNodeComponent("shareProject"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicUserMentionsPopoverContent
    internalVariantProps: PlasmicUserMentionsPopoverContent__VariantProps,
    internalArgProps: PlasmicUserMentionsPopoverContent__ArgProps,
  }
);

export default PlasmicUserMentionsPopoverContent;
/* prettier-ignore-end */
