// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kTSMroKPFv65RRTb44SCtk
// Component: w9CXWQAYB8kA

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: kTSMroKPFv65RRTb44SCtk/projectcss
import sty from "./PlasmicUserListItem.module.css"; // plasmic-import: w9CXWQAYB8kA/css

createPlasmicElementProxy;

export type PlasmicUserListItem__VariantMembers = {
  isHighlighted: "isHighlighted";
};
export type PlasmicUserListItem__VariantsArgs = {
  isHighlighted?: SingleBooleanChoiceArg<"isHighlighted">;
};
type VariantPropType = keyof PlasmicUserListItem__VariantsArgs;
export const PlasmicUserListItem__VariantProps = new Array<VariantPropType>(
  "isHighlighted"
);

export type PlasmicUserListItem__ArgsType = {
  username?: string;
  userEmail?: string;
  value?: string;
  label?: string;
  avatar?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUserListItem__ArgsType;
export const PlasmicUserListItem__ArgProps = new Array<ArgPropType>(
  "username",
  "userEmail",
  "value",
  "label",
  "avatar"
);

export type PlasmicUserListItem__OverridesType = {
  root?: Flex__<"div">;
  avatarContainer?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultUserListItemProps {
  username?: string;
  userEmail?: string;
  value?: string;
  label?: string;
  avatar?: React.ReactNode;
  isHighlighted?: SingleBooleanChoiceArg<"isHighlighted">;
  className?: string;
}

const $$ = {};

function PlasmicUserListItem__RenderFunc(props: {
  variants: PlasmicUserListItem__VariantsArgs;
  args: PlasmicUserListItem__ArgsType;
  overrides: PlasmicUserListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          username: "John Doe",
          userEmail: "johndoe@example.com",
          value: ``,
          label: ``,
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isHighlighted",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isHighlighted,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisHighlighted]: hasVariant(
            $state,
            "isHighlighted",
            "isHighlighted"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"avatarContainer"}
        data-plasmic-override={overrides.avatarContainer}
        className={classNames(projectcss.all, sty.avatarContainer)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__xJtQv)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"24px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
            />
          ),

          value: args.avatar,
        })}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vDhnr,
            {
              [sty.textisHighlighted__vDhnrO1Qk]: hasVariant(
                $state,
                "isHighlighted",
                "isHighlighted"
              ),
            }
          )}
        >
          <React.Fragment>{$props.username}</React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tSek2,
            {
              [sty.textisHighlighted__tSek2O1Qk]: hasVariant(
                $state,
                "isHighlighted",
                "isHighlighted"
              ),
            }
          )}
        >
          <React.Fragment>{$props.userEmail}</React.Fragment>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatarContainer", "freeBox"],
  avatarContainer: ["avatarContainer"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatarContainer: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserListItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserListItem__VariantsArgs;
    args?: PlasmicUserListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserListItem__ArgProps,
          internalVariantPropNames: PlasmicUserListItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicUserListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserListItem";
  } else {
    func.displayName = `PlasmicUserListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicUserListItem = Object.assign(
  // Top-level PlasmicUserListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatarContainer: makeNodeComponent("avatarContainer"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicUserListItem
    internalVariantProps: PlasmicUserListItem__VariantProps,
    internalArgProps: PlasmicUserListItem__ArgProps,
  }
);

export default PlasmicUserListItem;
/* prettier-ignore-end */
