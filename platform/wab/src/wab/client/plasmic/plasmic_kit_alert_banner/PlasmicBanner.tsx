/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 29njzcsBEPR4koRddw4knF
// Component: LlDTs6h34ISG

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_alert_banner.module.css"; // plasmic-import: 29njzcsBEPR4koRddw4knF/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicBanner.module.css"; // plasmic-import: LlDTs6h34ISG/css

import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import EyeExclamationSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EyeExclamationSvg"; // plasmic-import: 0dLCQ-imlG_u/icon
import WarningTriangleSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__WarningTriangleSvg"; // plasmic-import: S0L-xosWD/icon

createPlasmicElementProxy;

export type PlasmicBanner__VariantMembers = {
  type: "_default" | "error" | "info";
  size: "_default" | "small";
  block: "block";
  iconType: "defaultWarning" | "autoOpen";
};
export type PlasmicBanner__VariantsArgs = {
  type?: SingleChoiceArg<"_default" | "error" | "info">;
  size?: SingleChoiceArg<"_default" | "small">;
  block?: SingleBooleanChoiceArg<"block">;
  iconType?: SingleChoiceArg<"defaultWarning" | "autoOpen">;
};
type VariantPropType = keyof PlasmicBanner__VariantsArgs;
export const PlasmicBanner__VariantProps = new Array<VariantPropType>(
  "type",
  "size",
  "block",
  "iconType"
);

export type PlasmicBanner__ArgsType = {
  title?: string;
  message?: string;
  actionLabel1?: string;
  actionLabel2?: string;
  dismissible?: boolean;
  onClickAction1?: (event: any) => void;
  onClickAction2?: (event: any) => void;
};
type ArgPropType = keyof PlasmicBanner__ArgsType;
export const PlasmicBanner__ArgProps = new Array<ArgPropType>(
  "title",
  "message",
  "actionLabel1",
  "actionLabel2",
  "dismissible",
  "onClickAction1",
  "onClickAction2"
);

export type PlasmicBanner__OverridesType = {
  root?: Flex__<"div">;
  icon?: Flex__<"svg">;
  action1Btn?: Flex__<typeof Button>;
  visit2?: Flex__<"div">;
  action2Btn?: Flex__<typeof Button>;
  visit?: Flex__<"div">;
  dismissBtn?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultBannerProps {
  title?: string;
  message?: string;
  actionLabel1?: string;
  actionLabel2?: string;
  dismissible?: boolean;
  onClickAction1?: (event: any) => void;
  onClickAction2?: (event: any) => void;
  type?: SingleChoiceArg<"_default" | "error" | "info">;
  size?: SingleChoiceArg<"_default" | "small">;
  block?: SingleBooleanChoiceArg<"block">;
  iconType?: SingleChoiceArg<"defaultWarning" | "autoOpen">;
  className?: string;
}

const $$ = {};

function PlasmicBanner__RenderFunc(props: {
  variants: PlasmicBanner__VariantsArgs;
  args: PlasmicBanner__ArgsType;
  overrides: PlasmicBanner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          message: "This is normal text",
          dismissible: false,
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size,
      },
      {
        path: "block",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.block,
      },
      {
        path: "iconType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconType,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootblock]: hasVariant($state, "block", "block"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.roottype__default]: hasVariant($state, "type", "_default"),
          [sty.roottype_error]: hasVariant($state, "type", "error"),
          [sty.roottype_info]: hasVariant($state, "type", "info"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xDsa)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__qiaUx)}>
          <PlasmicIcon__
            data-plasmic-name={"icon"}
            data-plasmic-override={overrides.icon}
            PlasmicIconType={
              hasVariant($state, "iconType", "autoOpen")
                ? EyeExclamationSvgIcon
                : WarningTriangleSvgIcon
            }
            className={classNames(projectcss.all, sty.icon, {
              [sty.iconiconType_autoOpen]: hasVariant(
                $state,
                "iconType",
                "autoOpen"
              ),
              [sty.iconsize_small]: hasVariant($state, "size", "small"),
              [sty.icontype_error]: hasVariant($state, "type", "error"),
              [sty.icontype_info]: hasVariant($state, "type", "info"),
            })}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gl9VT, {
            [sty.freeBoxtype_error__gl9VTAyvH7]: hasVariant(
              $state,
              "type",
              "error"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wYq26,
              {
                [sty.texttype_error__wYq26AyvH7]: hasVariant(
                  $state,
                  "type",
                  "error"
                ),
                [sty.texttype_info__wYq26Cq87W]: hasVariant(
                  $state,
                  "type",
                  "info"
                ),
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "This is bold text.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0Krq3,
              {
                [sty.texttype_error___0Krq3AyvH7]: hasVariant(
                  $state,
                  "type",
                  "error"
                ),
                [sty.texttype_info___0Krq3Cq87W]: hasVariant(
                  $state,
                  "type",
                  "info"
                ),
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.message;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "This is normal text";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fMtNr, {
          [sty.freeBoxtype__default__fMtNrMyqB3]: hasVariant(
            $state,
            "type",
            "_default"
          ),
        })}
      >
        {(() => {
          try {
            return $props.actionLabel1;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Button
            data-plasmic-name={"action1Btn"}
            data-plasmic-override={overrides.action1Btn}
            className={classNames("__wab_instance", sty.action1Btn, {
              [sty.action1Btntype__default]: hasVariant(
                $state,
                "type",
                "_default"
              ),
              [sty.action1Btntype_error]: hasVariant($state, "type", "error"),
              [sty.action1Btntype_info]: hasVariant($state, "type", "info"),
            })}
            onClick={args.onClickAction1}
            type={
              hasVariant($state, "type", "info")
                ? ["backlitInfo"]
                : hasVariant($state, "type", "error")
                ? ["backlitError"]
                : ["link"]
            }
          >
            <div
              data-plasmic-name={"visit2"}
              data-plasmic-override={overrides.visit2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.visit2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.actionLabel1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Button";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Button>
        ) : null}
        {(() => {
          try {
            return $props.actionLabel2;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Button
            data-plasmic-name={"action2Btn"}
            data-plasmic-override={overrides.action2Btn}
            className={classNames("__wab_instance", sty.action2Btn, {
              [sty.action2Btntype_error]: hasVariant($state, "type", "error"),
              [sty.action2Btntype_info]: hasVariant($state, "type", "info"),
            })}
            onClick={args.onClickAction2}
            type={
              hasVariant($state, "type", "info")
                ? ["backlitInfo"]
                : hasVariant($state, "type", "error")
                ? ["backlitError"]
                : ["link"]
            }
          >
            <div
              data-plasmic-name={"visit"}
              data-plasmic-override={overrides.visit}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.visit
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.actionLabel2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Button";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Button>
        ) : null}
        {(() => {
          try {
            return $props.dismissible;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"dismissBtn"}
            data-plasmic-override={overrides.dismissBtn}
            className={classNames(projectcss.all, sty.dismissBtn)}
          >
            <CloseIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgsize_small]: hasVariant($state, "size", "small"),
                [sty.svgtype_error]: hasVariant($state, "type", "error"),
                [sty.svgtype_info]: hasVariant($state, "type", "info"),
              })}
              role={"img"}
            />
          </div>
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "icon",
    "action1Btn",
    "visit2",
    "action2Btn",
    "visit",
    "dismissBtn",
    "svg",
  ],
  icon: ["icon"],
  action1Btn: ["action1Btn", "visit2"],
  visit2: ["visit2"],
  action2Btn: ["action2Btn", "visit"],
  visit: ["visit"],
  dismissBtn: ["dismissBtn", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  icon: "svg";
  action1Btn: typeof Button;
  visit2: "div";
  action2Btn: typeof Button;
  visit: "div";
  dismissBtn: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBanner__VariantsArgs;
    args?: PlasmicBanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBanner__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBanner__ArgProps,
          internalVariantPropNames: PlasmicBanner__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicBanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBanner";
  } else {
    func.displayName = `PlasmicBanner.${nodeName}`;
  }
  return func;
}

export const PlasmicBanner = Object.assign(
  // Top-level PlasmicBanner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icon: makeNodeComponent("icon"),
    action1Btn: makeNodeComponent("action1Btn"),
    visit2: makeNodeComponent("visit2"),
    action2Btn: makeNodeComponent("action2Btn"),
    visit: makeNodeComponent("visit"),
    dismissBtn: makeNodeComponent("dismissBtn"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicBanner
    internalVariantProps: PlasmicBanner__VariantProps,
    internalArgProps: PlasmicBanner__ArgProps,
  }
);

export default PlasmicBanner;
/* prettier-ignore-end */
