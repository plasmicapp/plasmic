// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ieacQ3Z46z4gwo1FnaB5vY
// Component: a5viGetjMi

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCmsSettingsPage.module.css"; // plasmic-import: a5viGetjMi/css
import projectcss from "./plasmic_plasmic_kit_cms.module.css"; // plasmic-import: ieacQ3Z46z4gwo1FnaB5vY/projectcss

createPlasmicElementProxy;

export type PlasmicCmsSettingsPage__VariantMembers = {
  noModels: "noModels";
};
export type PlasmicCmsSettingsPage__VariantsArgs = {
  noModels?: SingleBooleanChoiceArg<"noModels">;
};
type VariantPropType = keyof PlasmicCmsSettingsPage__VariantsArgs;
export const PlasmicCmsSettingsPage__VariantProps = new Array<VariantPropType>(
  "noModels"
);

export type PlasmicCmsSettingsPage__ArgsType = {};
type ArgPropType = keyof PlasmicCmsSettingsPage__ArgsType;
export const PlasmicCmsSettingsPage__ArgProps = new Array<ArgPropType>();

export type PlasmicCmsSettingsPage__OverridesType = {
  root?: Flex__<"div">;
  left?: Flex__<"div">;
  details?: Flex__<"div">;
  right?: Flex__<"div">;
  duplicateButton?: Flex__<typeof Button>;
  saveButton?: Flex__<typeof Button>;
  content?: Flex__<"div">;
};

export interface DefaultCmsSettingsPageProps {
  noModels?: SingleBooleanChoiceArg<"noModels">;
  className?: string;
}

const $$ = {};

function PlasmicCmsSettingsPage__RenderFunc(props: {
  variants: PlasmicCmsSettingsPage__VariantsArgs;
  args: PlasmicCmsSettingsPage__ArgsType;
  overrides: PlasmicCmsSettingsPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noModels",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noModels,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__q86AV)}>
        <div className={classNames(projectcss.all, sty.freeBox__iAyOg)}>
          <div
            data-plasmic-name={"left"}
            data-plasmic-override={overrides.left}
            className={classNames(projectcss.all, sty.left)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6B6St
              )}
            >
              {"Settings"}
            </div>
            <div
              data-plasmic-name={"details"}
              data-plasmic-override={overrides.details}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.details
              )}
            >
              {"X models"}
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"right"}
            data-plasmic-override={overrides.right}
            hasGap={true}
            className={classNames(projectcss.all, sty.right)}
          >
            <Button
              data-plasmic-name={"duplicateButton"}
              data-plasmic-override={overrides.duplicateButton}
              className={classNames("__wab_instance", sty.duplicateButton)}
              pointerCursor={true}
              size={"compact"}
              type={["bordered"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__luZtw
                )}
              >
                {"Duplicate CMS Database"}
              </div>
            </Button>
            <Button
              data-plasmic-name={"saveButton"}
              data-plasmic-override={overrides.saveButton}
              className={classNames("__wab_instance", sty.saveButton)}
              size={"wide"}
              type={["primary"]}
            >
              {"Save"}
            </Button>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__zo006)}>
          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "left",
    "details",
    "right",
    "duplicateButton",
    "saveButton",
    "content",
  ],

  left: ["left", "details"],
  details: ["details"],
  right: ["right", "duplicateButton", "saveButton"],
  duplicateButton: ["duplicateButton"],
  saveButton: ["saveButton"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  left: "div";
  details: "div";
  right: "div";
  duplicateButton: typeof Button;
  saveButton: typeof Button;
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCmsSettingsPage__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCmsSettingsPage__VariantsArgs;
    args?: PlasmicCmsSettingsPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCmsSettingsPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCmsSettingsPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCmsSettingsPage__ArgProps,
          internalVariantPropNames: PlasmicCmsSettingsPage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCmsSettingsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCmsSettingsPage";
  } else {
    func.displayName = `PlasmicCmsSettingsPage.${nodeName}`;
  }
  return func;
}

export const PlasmicCmsSettingsPage = Object.assign(
  // Top-level PlasmicCmsSettingsPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    left: makeNodeComponent("left"),
    details: makeNodeComponent("details"),
    right: makeNodeComponent("right"),
    duplicateButton: makeNodeComponent("duplicateButton"),
    saveButton: makeNodeComponent("saveButton"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicCmsSettingsPage
    internalVariantProps: PlasmicCmsSettingsPage__VariantProps,
    internalArgProps: PlasmicCmsSettingsPage__ArgProps,
  }
);

export default PlasmicCmsSettingsPage;
/* prettier-ignore-end */
