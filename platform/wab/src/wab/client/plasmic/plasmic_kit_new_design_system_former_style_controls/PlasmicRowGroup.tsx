/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gYEVvAzCcLMHDVPvuYxkFh
// Component: fgHLE_9XtAei

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../plasmic_kit_style_controls/plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import sty from "./PlasmicRowGroup.module.css"; // plasmic-import: fgHLE_9XtAei/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import ChevronRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronRightSvg"; // plasmic-import: HBGx-zeiX/icon

createPlasmicElementProxy;

export type PlasmicRowGroup__VariantMembers = {
  isOpen: "isOpen";
  hasMenu: "hasMenu";
  showActions: "showActions";
};
export type PlasmicRowGroup__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  hasMenu?: SingleBooleanChoiceArg<"hasMenu">;
  showActions?: SingleBooleanChoiceArg<"showActions">;
};
type VariantPropType = keyof PlasmicRowGroup__VariantsArgs;
export const PlasmicRowGroup__VariantProps = new Array<VariantPropType>(
  "isOpen",
  "hasMenu",
  "showActions"
);

export type PlasmicRowGroup__ArgsType = {
  children?: React.ReactNode;
  groupSize?: React.ReactNode;
  actions?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRowGroup__ArgsType;
export const PlasmicRowGroup__ArgProps = new Array<ArgPropType>(
  "children",
  "groupSize",
  "actions"
);

export type PlasmicRowGroup__OverridesType = {
  root?: Flex__<"div">;
  iconContainer?: Flex__<"div">;
  svg?: Flex__<"svg">;
  labelContainer?: Flex__<"div">;
  sizeContainer?: Flex__<"div">;
  actionsContainer?: Flex__<"div">;
  menuButton?: Flex__<typeof MenuButton>;
};

export interface DefaultRowGroupProps {
  children?: React.ReactNode;
  groupSize?: React.ReactNode;
  actions?: React.ReactNode;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  hasMenu?: SingleBooleanChoiceArg<"hasMenu">;
  showActions?: SingleBooleanChoiceArg<"showActions">;
  className?: string;
}

const $$ = {};

function PlasmicRowGroup__RenderFunc(props: {
  variants: PlasmicRowGroup__VariantsArgs;
  args: PlasmicRowGroup__ArgsType;
  overrides: PlasmicRowGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen,
      },
      {
        path: "hasMenu",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasMenu,
      },
      {
        path: "showActions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showActions,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
          [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen"),
          [sty.rootshowActions]: hasVariant(
            $state,
            "showActions",
            "showActions"
          ),
        }
      )}
      onClick={async (event) => {
        const $steps = {};

        $steps["runCode"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return undefined;
                },
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"iconContainer"}
        data-plasmic-override={overrides.iconContainer}
        className={classNames(projectcss.all, sty.iconContainer)}
      >
        <ChevronRightSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisOpen]: hasVariant($state, "isOpen", "isOpen"),
          })}
          role={"img"}
        />
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"labelContainer"}
        data-plasmic-override={overrides.labelContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.labelContainer, {
          [sty.labelContainerhasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Some very long item label",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenisOpen]: hasVariant(
              $state,
              "isOpen",
              "isOpen"
            ),
          }),
        })}
        <div
          data-plasmic-name={"sizeContainer"}
          data-plasmic-override={overrides.sizeContainer}
          className={classNames(projectcss.all, sty.sizeContainer)}
        >
          {renderPlasmicSlot({
            defaultContents: "0",
            value: args.groupSize,
            className: classNames(sty.slotTargetGroupSize),
          })}
        </div>
      </Stack__>
      {(hasVariant($state, "showActions", "showActions") ? true : false) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"actionsContainer"}
          data-plasmic-override={overrides.actionsContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.actionsContainer, {
            [sty.actionsContainerhasMenu]: hasVariant(
              $state,
              "hasMenu",
              "hasMenu"
            ),
            [sty.actionsContainershowActions]: hasVariant(
              $state,
              "showActions",
              "showActions"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <PlusIcon
                className={classNames(projectcss.all, sty.svg___7Gen4)}
                role={"img"}
              />
            ),

            value: args.actions,
            className: classNames(sty.slotTargetActions),
          })}
        </Stack__>
      ) : null}
      {(
        hasVariant($state, "hasMenu", "hasMenu") && triggers.hover_root
          ? true
          : hasVariant($state, "hasMenu", "hasMenu")
          ? true
          : false
      ) ? (
        <MenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          className={classNames("__wab_instance", sty.menuButton, {
            [sty.menuButtonhasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
          })}
          withBackgroundHover={true}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iconContainer",
    "svg",
    "labelContainer",
    "sizeContainer",
    "actionsContainer",
    "menuButton",
  ],
  iconContainer: ["iconContainer", "svg"],
  svg: ["svg"],
  labelContainer: ["labelContainer", "sizeContainer"],
  sizeContainer: ["sizeContainer"],
  actionsContainer: ["actionsContainer"],
  menuButton: ["menuButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  iconContainer: "div";
  svg: "svg";
  labelContainer: "div";
  sizeContainer: "div";
  actionsContainer: "div";
  menuButton: typeof MenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRowGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRowGroup__VariantsArgs;
    args?: PlasmicRowGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRowGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRowGroup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRowGroup__ArgProps,
          internalVariantPropNames: PlasmicRowGroup__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicRowGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRowGroup";
  } else {
    func.displayName = `PlasmicRowGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicRowGroup = Object.assign(
  // Top-level PlasmicRowGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconContainer: makeNodeComponent("iconContainer"),
    svg: makeNodeComponent("svg"),
    labelContainer: makeNodeComponent("labelContainer"),
    sizeContainer: makeNodeComponent("sizeContainer"),
    actionsContainer: makeNodeComponent("actionsContainer"),
    menuButton: makeNodeComponent("menuButton"),

    // Metadata about props expected for PlasmicRowGroup
    internalVariantProps: PlasmicRowGroup__VariantProps,
    internalArgProps: PlasmicRowGroup__ArgProps,
  }
);

export default PlasmicRowGroup;
/* prettier-ignore-end */
