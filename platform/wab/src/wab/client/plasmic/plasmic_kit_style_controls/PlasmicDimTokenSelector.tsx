/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gYEVvAzCcLMHDVPvuYxkFh
// Component: s1ridHP4Z3T

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Chip from "../../components/widgets/Chip"; // plasmic-import: jW885tExwE/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_styles_pane.module.css"; // plasmic-import: gYEVvAzCcLMHDVPvuYxkFh/projectcss
import sty from "./PlasmicDimTokenSelector.module.css"; // plasmic-import: s1ridHP4Z3T/css

import TriangleBottomIcon from "../plasmic_kit/PlasmicIcon__TriangleBottom"; // plasmic-import: A8NQUZ7Lg1OHO/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicDimTokenSelector__VariantMembers = {
  disabled: "disabled";
  styleType: "white" | "bordered";
  error: "error";
  showDropdownArrow: "showDropdownArrow";
  showCurrentTokens: "showCurrentTokens";
  valueSetState: "isInherited" | "isSet" | "isUnset";
};
export type PlasmicDimTokenSelector__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  styleType?: MultiChoiceArg<"white" | "bordered">;
  error?: SingleBooleanChoiceArg<"error">;
  showDropdownArrow?: SingleBooleanChoiceArg<"showDropdownArrow">;
  showCurrentTokens?: SingleBooleanChoiceArg<"showCurrentTokens">;
  valueSetState?: SingleChoiceArg<"isInherited" | "isSet" | "isUnset">;
};
type VariantPropType = keyof PlasmicDimTokenSelector__VariantsArgs;
export const PlasmicDimTokenSelector__VariantProps = new Array<VariantPropType>(
  "disabled",
  "styleType",
  "error",
  "showDropdownArrow",
  "showCurrentTokens",
  "valueSetState"
);

export type PlasmicDimTokenSelector__ArgsType = {
  existingTokens?: React.ReactNode;
  placeholder?: string;
  value?: any;
};
type ArgPropType = keyof PlasmicDimTokenSelector__ArgsType;
export const PlasmicDimTokenSelector__ArgProps = new Array<ArgPropType>(
  "existingTokens",
  "placeholder",
  "value"
);

export type PlasmicDimTokenSelector__OverridesType = {
  root?: Flex__<"div">;
  existingTokensContainer?: Flex__<"div">;
  textbox?: Flex__<"input">;
  suffixContainer?: Flex__<"div">;
  dropdownToggle?: Flex__<typeof IconButton>;
};

export interface DefaultDimTokenSelectorProps {
  existingTokens?: React.ReactNode;
  placeholder?: string;
  value?: any;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  styleType?: MultiChoiceArg<"white" | "bordered">;
  error?: SingleBooleanChoiceArg<"error">;
  showDropdownArrow?: SingleBooleanChoiceArg<"showDropdownArrow">;
  showCurrentTokens?: SingleBooleanChoiceArg<"showCurrentTokens">;
  valueSetState?: SingleChoiceArg<"isInherited" | "isSet" | "isUnset">;
  className?: string;
}

const $$ = {};

function PlasmicDimTokenSelector__RenderFunc(props: {
  variants: PlasmicDimTokenSelector__VariantsArgs;
  args: PlasmicDimTokenSelector__ArgsType;
  overrides: PlasmicDimTokenSelector__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: "",
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled,
      },
      {
        path: "styleType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.styleType,
      },
      {
        path: "error",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.error,
      },
      {
        path: "showDropdownArrow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showDropdownArrow,
      },
      {
        path: "showCurrentTokens",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showCurrentTokens,
      },
      {
        path: "valueSetState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.valueSetState,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.rooterror]: hasVariant($state, "error", "error"),
          [sty.rootstyleType_bordered]: hasVariant(
            $state,
            "styleType",
            "bordered"
          ),
          [sty.rootstyleType_white]: hasVariant($state, "styleType", "white"),
          [sty.rootvalueSetState_isInherited]: hasVariant(
            $state,
            "valueSetState",
            "isInherited"
          ),
          [sty.rootvalueSetState_isSet]: hasVariant(
            $state,
            "valueSetState",
            "isSet"
          ),
          [sty.rootvalueSetState_isUnset]: hasVariant(
            $state,
            "valueSetState",
            "isUnset"
          ),
        }
      )}
    >
      {(
        hasVariant($state, "showCurrentTokens", "showCurrentTokens")
          ? true
          : false
      ) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"existingTokensContainer"}
          data-plasmic-override={overrides.existingTokensContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.existingTokensContainer, {
            [sty.existingTokensContainershowCurrentTokens]: hasVariant(
              $state,
              "showCurrentTokens",
              "showCurrentTokens"
            ),
            [sty.existingTokensContainerstyleType_bordered]: hasVariant(
              $state,
              "styleType",
              "bordered"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Chip className={classNames("__wab_instance", sty.chip__c3Yjo)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uSn5B
                    )}
                  >
                    {"Token1"}
                  </div>
                </Chip>
                <Chip className={classNames("__wab_instance", sty.chip__rwgrE)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kSfz
                    )}
                  >
                    {"Token2"}
                  </div>
                </Chip>
              </React.Fragment>
            ),
            value: args.existingTokens,
            className: classNames(sty.slotTargetExistingTokens, {
              [sty.slotTargetExistingTokensshowCurrentTokens]: hasVariant(
                $state,
                "showCurrentTokens",
                "showCurrentTokens"
              ),
            }),
          })}
        </Stack__>
      ) : null}
      <input
        data-plasmic-name={"textbox"}
        data-plasmic-override={overrides.textbox}
        className={classNames(projectcss.all, projectcss.input, sty.textbox, {
          [sty.textboxdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.textboxerror]: hasVariant($state, "error", "error"),
          [sty.textboxshowCurrentTokens]: hasVariant(
            $state,
            "showCurrentTokens",
            "showCurrentTokens"
          ),
          [sty.textboxshowDropdownArrow]: hasVariant(
            $state,
            "showDropdownArrow",
            "showDropdownArrow"
          ),
          [sty.textboxstyleType_bordered]: hasVariant(
            $state,
            "styleType",
            "bordered"
          ),
          [sty.textboxstyleType_white]: hasVariant(
            $state,
            "styleType",
            "white"
          ),
          [sty.textboxvalueSetState_isInherited]: hasVariant(
            $state,
            "valueSetState",
            "isInherited"
          ),
          [sty.textboxvalueSetState_isSet]: hasVariant(
            $state,
            "valueSetState",
            "isSet"
          ),
          [sty.textboxvalueSetState_isUnset]: hasVariant(
            $state,
            "valueSetState",
            "isUnset"
          ),
        })}
        placeholder={args.placeholder}
        ref={(ref) => {
          $refs["textbox"] = ref;
        }}
        size={1}
        type={"text"}
        value={args.value}
      />

      {(
        hasVariant($state, "showDropdownArrow", "showDropdownArrow")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"suffixContainer"}
          data-plasmic-override={overrides.suffixContainer}
          className={classNames(projectcss.all, sty.suffixContainer, {
            [sty.suffixContainerdisabled]: hasVariant(
              $state,
              "disabled",
              "disabled"
            ),
            [sty.suffixContainershowCurrentTokens]: hasVariant(
              $state,
              "showCurrentTokens",
              "showCurrentTokens"
            ),
            [sty.suffixContainershowDropdownArrow]: hasVariant(
              $state,
              "showDropdownArrow",
              "showDropdownArrow"
            ),
            [sty.suffixContainerstyleType_bordered]: hasVariant(
              $state,
              "styleType",
              "bordered"
            ),
          })}
        >
          <IconButton
            data-plasmic-name={"dropdownToggle"}
            data-plasmic-override={overrides.dropdownToggle}
            children2={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__womfz)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.dropdownToggle, {
              [sty.dropdownToggleshowCurrentTokens]: hasVariant(
                $state,
                "showCurrentTokens",
                "showCurrentTokens"
              ),
            })}
            type={["seamless"]}
          >
            <TriangleBottomIcon
              className={classNames(projectcss.all, sty.svg__wtzSg, {
                [sty.svgshowDropdownArrow__wtzSgvlUf7]: hasVariant(
                  $state,
                  "showDropdownArrow",
                  "showDropdownArrow"
                ),
              })}
              role={"img"}
            />
          </IconButton>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "existingTokensContainer",
    "textbox",
    "suffixContainer",
    "dropdownToggle",
  ],
  existingTokensContainer: ["existingTokensContainer"],
  textbox: ["textbox"],
  suffixContainer: ["suffixContainer", "dropdownToggle"],
  dropdownToggle: ["dropdownToggle"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  existingTokensContainer: "div";
  textbox: "input";
  suffixContainer: "div";
  dropdownToggle: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDimTokenSelector__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDimTokenSelector__VariantsArgs;
    args?: PlasmicDimTokenSelector__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDimTokenSelector__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDimTokenSelector__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDimTokenSelector__ArgProps,
          internalVariantPropNames: PlasmicDimTokenSelector__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDimTokenSelector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDimTokenSelector";
  } else {
    func.displayName = `PlasmicDimTokenSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicDimTokenSelector = Object.assign(
  // Top-level PlasmicDimTokenSelector renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    existingTokensContainer: makeNodeComponent("existingTokensContainer"),
    textbox: makeNodeComponent("textbox"),
    suffixContainer: makeNodeComponent("suffixContainer"),
    dropdownToggle: makeNodeComponent("dropdownToggle"),

    // Metadata about props expected for PlasmicDimTokenSelector
    internalVariantProps: PlasmicDimTokenSelector__VariantProps,
    internalArgProps: PlasmicDimTokenSelector__ArgProps,
  }
);

export default PlasmicDimTokenSelector;
/* prettier-ignore-end */
