/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6CrqkTcB6gSAHoA8c8zpNz
// Component: cwS3NAy41ya

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_top_bar.module.css"; // plasmic-import: 6CrqkTcB6gSAHoA8c8zpNz/projectcss
import sty from "./PlasmicVariantsMenu.module.css"; // plasmic-import: cwS3NAy41ya/css

import SearchIcon from "../plasmic_kit/PlasmicIcon__Search"; // plasmic-import: sjONHoK61vpSz/icon

createPlasmicElementProxy;

export type PlasmicVariantsMenu__VariantMembers = {};
export type PlasmicVariantsMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicVariantsMenu__VariantsArgs;
export const PlasmicVariantsMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicVariantsMenu__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicVariantsMenu__ArgsType;
export const PlasmicVariantsMenu__ArgProps = new Array<ArgPropType>("children");

export type PlasmicVariantsMenu__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  searchInput?: Flex__<"input">;
  variantsList?: Flex__<"div">;
};

export interface DefaultVariantsMenuProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicVariantsMenu__RenderFunc(props: {
  variants: PlasmicVariantsMenu__VariantsArgs;
  args: PlasmicVariantsMenu__ArgsType;
  overrides: PlasmicVariantsMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <SearchIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <input
          data-plasmic-name={"searchInput"}
          data-plasmic-override={overrides.searchInput}
          className={classNames(
            projectcss.all,
            projectcss.input,
            sty.searchInput
          )}
          placeholder={"Search variantsâ€¦"}
          ref={(ref) => {
            $refs["searchInput"] = ref;
          }}
          size={1}
          type={"text"}
          value={""}
        />
      </div>
      <div
        data-plasmic-name={"variantsList"}
        data-plasmic-override={overrides.variantsList}
        className={classNames(projectcss.all, sty.variantsList)}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg", "searchInput", "variantsList"],
  freeBox: ["freeBox", "svg", "searchInput"],
  svg: ["svg"],
  searchInput: ["searchInput"],
  variantsList: ["variantsList"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  svg: "svg";
  searchInput: "input";
  variantsList: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantsMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVariantsMenu__VariantsArgs;
    args?: PlasmicVariantsMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVariantsMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicVariantsMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVariantsMenu__ArgProps,
          internalVariantPropNames: PlasmicVariantsMenu__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicVariantsMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantsMenu";
  } else {
    func.displayName = `PlasmicVariantsMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantsMenu = Object.assign(
  // Top-level PlasmicVariantsMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    searchInput: makeNodeComponent("searchInput"),
    variantsList: makeNodeComponent("variantsList"),

    // Metadata about props expected for PlasmicVariantsMenu
    internalVariantProps: PlasmicVariantsMenu__VariantProps,
    internalArgProps: PlasmicVariantsMenu__ArgProps,
  }
);

export default PlasmicVariantsMenu;
/* prettier-ignore-end */
