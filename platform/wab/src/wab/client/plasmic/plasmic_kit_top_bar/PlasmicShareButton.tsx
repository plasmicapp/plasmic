/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6CrqkTcB6gSAHoA8c8zpNz
// Component: mnPFthIw2I

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_top_bar.module.css"; // plasmic-import: 6CrqkTcB6gSAHoA8c8zpNz/projectcss
import sty from "./PlasmicShareButton.module.css"; // plasmic-import: mnPFthIw2I/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicShareButton__VariantMembers = {};
export type PlasmicShareButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicShareButton__VariantsArgs;
export const PlasmicShareButton__VariantProps = new Array<VariantPropType>();

export type PlasmicShareButton__ArgsType = {};
type ArgPropType = keyof PlasmicShareButton__ArgsType;
export const PlasmicShareButton__ArgProps = new Array<ArgPropType>();

export type PlasmicShareButton__OverridesType = {
  share?: Flex__<typeof Button>;
};

export interface DefaultShareButtonProps {
  className?: string;
}

const $$ = {};

function PlasmicShareButton__RenderFunc(props: {
  variants: PlasmicShareButton__VariantsArgs;
  args: PlasmicShareButton__ArgsType;
  overrides: PlasmicShareButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Button
      data-plasmic-name={"share"}
      data-plasmic-override={overrides.share}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.share)}
      endIcon={
        <ChevronDownSvgIcon
          className={classNames(projectcss.all, sty.svg__yOKuT)}
          role={"img"}
        />
      }
      size={"small"}
      startIcon={
        <ArrowRightSvgIcon
          className={classNames(projectcss.all, sty.svg__ogjiq)}
          role={"img"}
        />
      }
      type={["secondary"]}
    >
      {"Share"}
    </Button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  share: ["share"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  share: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShareButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShareButton__VariantsArgs;
    args?: PlasmicShareButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShareButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShareButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShareButton__ArgProps,
          internalVariantPropNames: PlasmicShareButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicShareButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "share") {
    func.displayName = "PlasmicShareButton";
  } else {
    func.displayName = `PlasmicShareButton.${nodeName}`;
  }
  return func;
}

export const PlasmicShareButton = Object.assign(
  // Top-level PlasmicShareButton renders the root element
  makeNodeComponent("share"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicShareButton
    internalVariantProps: PlasmicShareButton__VariantProps,
    internalArgProps: PlasmicShareButton__ArgProps,
  }
);

export default PlasmicShareButton;
/* prettier-ignore-end */
