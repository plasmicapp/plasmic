/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6CrqkTcB6gSAHoA8c8zpNz
// Component: FCNHcPh1ZR

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ActionMenuButton from "../../components/widgets/ActionMenuButton"; // plasmic-import: VNi6NC2QOI/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_top_bar.module.css"; // plasmic-import: 6CrqkTcB6gSAHoA8c8zpNz/projectcss
import sty from "./PlasmicCodeButton.module.css"; // plasmic-import: FCNHcPh1ZR/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicCodeButton__VariantMembers = {
  hideMenu: "hideMenu";
};
export type PlasmicCodeButton__VariantsArgs = {
  hideMenu?: SingleBooleanChoiceArg<"hideMenu">;
};
type VariantPropType = keyof PlasmicCodeButton__VariantsArgs;
export const PlasmicCodeButton__VariantProps = new Array<VariantPropType>(
  "hideMenu"
);

export type PlasmicCodeButton__ArgsType = {};
type ArgPropType = keyof PlasmicCodeButton__ArgsType;
export const PlasmicCodeButton__ArgProps = new Array<ArgPropType>();

export type PlasmicCodeButton__OverridesType = {
  root?: Flex__<"div">;
  menuButton?: Flex__<typeof ActionMenuButton>;
  button?: Flex__<typeof Button>;
};

export interface DefaultCodeButtonProps {
  hideMenu?: SingleBooleanChoiceArg<"hideMenu">;
  className?: string;
}

const $$ = {};

function PlasmicCodeButton__RenderFunc(props: {
  variants: PlasmicCodeButton__VariantsArgs;
  args: PlasmicCodeButton__ArgsType;
  overrides: PlasmicCodeButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hideMenu",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideMenu,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.roothideMenu]: hasVariant($state, "hideMenu", "hideMenu") }
      )}
    >
      {(hasVariant($state, "hideMenu", "hideMenu") ? false : true) ? (
        <ActionMenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          icon={
            <PlusSvgIcon
              className={classNames(projectcss.all, sty.svg__h87Hm)}
              role={"img"}
            />
          }
          size={"small"}
          type={["secondary"]}
        >
          {"Code"}
        </ActionMenuButton>
      ) : null}
      {(hasVariant($state, "hideMenu", "hideMenu") ? true : false) ? (
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button, {
            [sty.buttonhideMenu]: hasVariant($state, "hideMenu", "hideMenu"),
          })}
          endIcon={
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg__obRRe)}
              role={"img"}
            />
          }
          startIcon={
            <ArrowRightSvgIcon
              className={classNames(projectcss.all, sty.svg__q2M75)}
              role={"img"}
            />
          }
          type={
            hasVariant($state, "hideMenu", "hideMenu")
              ? ["secondary"]
              : undefined
          }
        >
          {hasVariant($state, "hideMenu", "hideMenu") ? "Code" : "Button"}
        </Button>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "button"],
  menuButton: ["menuButton"],
  button: ["button"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  menuButton: typeof ActionMenuButton;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCodeButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCodeButton__VariantsArgs;
    args?: PlasmicCodeButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCodeButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCodeButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCodeButton__ArgProps,
          internalVariantPropNames: PlasmicCodeButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCodeButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCodeButton";
  } else {
    func.displayName = `PlasmicCodeButton.${nodeName}`;
  }
  return func;
}

export const PlasmicCodeButton = Object.assign(
  // Top-level PlasmicCodeButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicCodeButton
    internalVariantProps: PlasmicCodeButton__VariantProps,
    internalArgProps: PlasmicCodeButton__ArgProps,
  }
);

export default PlasmicCodeButton;
/* prettier-ignore-end */
