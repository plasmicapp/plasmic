/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6CrqkTcB6gSAHoA8c8zpNz
// Component: ND5ZuEZMUe

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_top_bar.module.css"; // plasmic-import: 6CrqkTcB6gSAHoA8c8zpNz/projectcss
import sty from "./PlasmicLivePopOutButton.module.css"; // plasmic-import: ND5ZuEZMUe/css

import OpenIcon from "../plasmic_kit/PlasmicIcon__Open"; // plasmic-import: 7D0GDLdF72udM/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicLivePopOutButton__VariantMembers = {};
export type PlasmicLivePopOutButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicLivePopOutButton__VariantsArgs;
export const PlasmicLivePopOutButton__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLivePopOutButton__ArgsType = {};
type ArgPropType = keyof PlasmicLivePopOutButton__ArgsType;
export const PlasmicLivePopOutButton__ArgProps = new Array<ArgPropType>();

export type PlasmicLivePopOutButton__OverridesType = {
  root?: Flex__<typeof IconButton>;
};

export interface DefaultLivePopOutButtonProps {
  className?: string;
}

const $$ = {};

function PlasmicLivePopOutButton__RenderFunc(props: {
  variants: PlasmicLivePopOutButton__VariantsArgs;
  args: PlasmicLivePopOutButton__ArgsType;
  overrides: PlasmicLivePopOutButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <IconButton
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      children2={
        <ChevronDownSvgIcon
          className={classNames(projectcss.all, sty.svg__mMk8Z)}
          role={"img"}
        />
      }
      className={classNames("__wab_instance", sty.root)}
      withBackgroundHover={true}
    >
      <OpenIcon
        className={classNames(projectcss.all, sty.svg___30FS)}
        role={"img"}
      />
    </IconButton>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLivePopOutButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLivePopOutButton__VariantsArgs;
    args?: PlasmicLivePopOutButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLivePopOutButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLivePopOutButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLivePopOutButton__ArgProps,
          internalVariantPropNames: PlasmicLivePopOutButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLivePopOutButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLivePopOutButton";
  } else {
    func.displayName = `PlasmicLivePopOutButton.${nodeName}`;
  }
  return func;
}

export const PlasmicLivePopOutButton = Object.assign(
  // Top-level PlasmicLivePopOutButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicLivePopOutButton
    internalVariantProps: PlasmicLivePopOutButton__VariantProps,
    internalArgProps: PlasmicLivePopOutButton__ArgProps,
  }
);

export default PlasmicLivePopOutButton;
/* prettier-ignore-end */
