// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wT5BWZPEc2fYxyqbTLXMt2
// Component: iPC_skyaMh

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_variants.module.css"; // plasmic-import: wT5BWZPEc2fYxyqbTLXMt2/projectcss
import sty from "./PlasmicVariantPinButton.module.css"; // plasmic-import: iPC_skyaMh/css

import CheckSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CheckSvg"; // plasmic-import: f0RrtBrXp/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import EyeOffSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EyeOffSvg"; // plasmic-import: 7OEXtT9yd/icon
import EyeSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EyeSvg"; // plasmic-import: oFYcZi8LU/icon

createPlasmicElementProxy;

export type PlasmicVariantPinButton__VariantMembers = {
  pinState: "pinnedTrue" | "pinnedFalse" | "selected" | "evaluatedTrue";
};
export type PlasmicVariantPinButton__VariantsArgs = {
  pinState?: SingleChoiceArg<
    "pinnedTrue" | "pinnedFalse" | "selected" | "evaluatedTrue"
  >;
};
type VariantPropType = keyof PlasmicVariantPinButton__VariantsArgs;
export const PlasmicVariantPinButton__VariantProps = new Array<VariantPropType>(
  "pinState"
);

export type PlasmicVariantPinButton__ArgsType = {};
type ArgPropType = keyof PlasmicVariantPinButton__ArgsType;
export const PlasmicVariantPinButton__ArgProps = new Array<ArgPropType>();

export type PlasmicVariantPinButton__OverridesType = {
  root?: Flex__<typeof IconButton>;
  svg?: Flex__<"svg">;
};

export interface DefaultVariantPinButtonProps {
  pinState?: SingleChoiceArg<
    "pinnedTrue" | "pinnedFalse" | "selected" | "evaluatedTrue"
  >;

  className?: string;
}

const $$ = {};

function PlasmicVariantPinButton__RenderFunc(props: {
  variants: PlasmicVariantPinButton__VariantsArgs;
  args: PlasmicVariantPinButton__ArgsType;
  overrides: PlasmicVariantPinButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pinState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pinState,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <IconButton
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      children2={
        <ChevronDownSvgIcon
          className={classNames(projectcss.all, sty.svg__dl131)}
          role={"img"}
        />
      }
      className={classNames("__wab_instance", sty.root, {
        [sty.rootpinState_pinnedTrue]: hasVariant(
          $state,
          "pinState",
          "pinnedTrue"
        ),
      })}
      type={[]}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "pinState", "evaluatedTrue")
            ? CheckSvgIcon
            : hasVariant($state, "pinState", "selected")
            ? EyeSvgIcon
            : hasVariant($state, "pinState", "pinnedTrue")
            ? EyeSvgIcon
            : EyeOffSvgIcon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgpinState_evaluatedTrue]: hasVariant(
            $state,
            "pinState",
            "evaluatedTrue"
          ),
          [sty.svgpinState_pinnedFalse]: hasVariant(
            $state,
            "pinState",
            "pinnedFalse"
          ),
          [sty.svgpinState_pinnedTrue]: hasVariant(
            $state,
            "pinState",
            "pinnedTrue"
          ),
          [sty.svgpinState_selected]: hasVariant(
            $state,
            "pinState",
            "selected"
          ),
        })}
        role={"img"}
      />
    </IconButton>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof IconButton;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVariantPinButton__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVariantPinButton__VariantsArgs;
    args?: PlasmicVariantPinButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVariantPinButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVariantPinButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVariantPinButton__ArgProps,
          internalVariantPropNames: PlasmicVariantPinButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicVariantPinButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVariantPinButton";
  } else {
    func.displayName = `PlasmicVariantPinButton.${nodeName}`;
  }
  return func;
}

export const PlasmicVariantPinButton = Object.assign(
  // Top-level PlasmicVariantPinButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicVariantPinButton
    internalVariantProps: PlasmicVariantPinButton__VariantProps,
    internalArgProps: PlasmicVariantPinButton__ArgProps,
  }
);

export default PlasmicVariantPinButton;
/* prettier-ignore-end */
