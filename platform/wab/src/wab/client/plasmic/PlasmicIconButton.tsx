/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXkSR39sgCDWSitZxC5xFV
// Component: LPry-TF4j22a

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "./plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicIconButton.module.css"; // plasmic-import: LPry-TF4j22a/css
import projectcss from "./PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss

import DotsHorizontalIcon from "./plasmic_kit_design_system/PlasmicIcon__DotsHorizontal"; // plasmic-import: GkkhQuMH0/icon
import ChevronDownSvgIcon from "./plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlusSvgIcon from "./plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicIconButton__VariantMembers = {
  disabled: "disabled";
  size: "small" | "large" | "vertical" | "medium";
  type:
    | "seamless"
    | "round"
    | "roundClear"
    | "dividedRight"
    | "primary"
    | "clear"
    | "noDivider"
    | "stepUp"
    | "gray"
    | "switchOn"
    | "red"
    | "green"
    | "blue"
    | "purple"
    | "secondary"
    | "black";
  isActive: "isActive";
  showAlert: "showAlert";
  withBackgroundHover: "withBackgroundHover";
  withRedBackgroundHover: "withRedBackgroundHover";
  withGreenBackgroundHover: "withGreenBackgroundHover";
  withDropdown: "withDropdown";
  isLoading: "isLoading";
};
export type PlasmicIconButton__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  size?: SingleChoiceArg<"small" | "large" | "vertical" | "medium">;
  type?: MultiChoiceArg<
    | "seamless"
    | "round"
    | "roundClear"
    | "dividedRight"
    | "primary"
    | "clear"
    | "noDivider"
    | "stepUp"
    | "gray"
    | "switchOn"
    | "red"
    | "green"
    | "blue"
    | "purple"
    | "secondary"
    | "black"
  >;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  showAlert?: SingleBooleanChoiceArg<"showAlert">;
  withBackgroundHover?: SingleBooleanChoiceArg<"withBackgroundHover">;
  withRedBackgroundHover?: SingleBooleanChoiceArg<"withRedBackgroundHover">;
  withGreenBackgroundHover?: SingleBooleanChoiceArg<"withGreenBackgroundHover">;
  withDropdown?: SingleBooleanChoiceArg<"withDropdown">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};
type VariantPropType = keyof PlasmicIconButton__VariantsArgs;
export const PlasmicIconButton__VariantProps = new Array<VariantPropType>(
  "disabled",
  "size",
  "type",
  "isActive",
  "showAlert",
  "withBackgroundHover",
  "withRedBackgroundHover",
  "withGreenBackgroundHover",
  "withDropdown",
  "isLoading"
);

export type PlasmicIconButton__ArgsType = {
  hoverText?: string;
  children?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicIconButton__ArgsType;
export const PlasmicIconButton__ArgProps = new Array<ArgPropType>(
  "hoverText",
  "children",
  "children2"
);

export type PlasmicIconButton__OverridesType = {
  root?: Flex__<"button">;
  svg?: Flex__<"svg">;
};

export interface DefaultIconButtonProps {
  hoverText?: string;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  size?: SingleChoiceArg<"small" | "large" | "vertical" | "medium">;
  type?: MultiChoiceArg<
    | "seamless"
    | "round"
    | "roundClear"
    | "dividedRight"
    | "primary"
    | "clear"
    | "noDivider"
    | "stepUp"
    | "gray"
    | "switchOn"
    | "red"
    | "green"
    | "blue"
    | "purple"
    | "secondary"
    | "black"
  >;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  showAlert?: SingleBooleanChoiceArg<"showAlert">;
  withBackgroundHover?: SingleBooleanChoiceArg<"withBackgroundHover">;
  withRedBackgroundHover?: SingleBooleanChoiceArg<"withRedBackgroundHover">;
  withGreenBackgroundHover?: SingleBooleanChoiceArg<"withGreenBackgroundHover">;
  withDropdown?: SingleBooleanChoiceArg<"withDropdown">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

const $$ = {};

function PlasmicIconButton__RenderFunc(props: {
  variants: PlasmicIconButton__VariantsArgs;
  args: PlasmicIconButton__ArgsType;
  overrides: PlasmicIconButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled,
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size,
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "isActive",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isActive,
      },
      {
        path: "showAlert",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showAlert,
      },
      {
        path: "withBackgroundHover",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withBackgroundHover,
      },
      {
        path: "withRedBackgroundHover",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withRedBackgroundHover,
      },
      {
        path: "withGreenBackgroundHover",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withGreenBackgroundHover,
      },
      {
        path: "withDropdown",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withDropdown,
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLoading,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootFocus, triggerRootFocusProps] = useTrigger("useFocused", {});
  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: false,
    }
  );
  const triggers = {
    focusFocusVisible_root: isRootFocus && isRootFocusVisible,
  };

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.root___focus__focusVisible]: triggers.focusFocusVisible_root,
          [sty.rootdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.rootisActive]: hasVariant($state, "isActive", "isActive"),
          [sty.rootisActive_type_dividedRight]:
            hasVariant($state, "type", "dividedRight") &&
            hasVariant($state, "isActive", "isActive"),
          [sty.rootisActive_type_primary_type_dividedRight]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "dividedRight") &&
            hasVariant($state, "isActive", "isActive"),
          [sty.rootisLoading]: hasVariant($state, "isLoading", "isLoading"),
          [sty.rootshowAlert]: hasVariant($state, "showAlert", "showAlert"),
          [sty.rootsize_large]: hasVariant($state, "size", "large"),
          [sty.rootsize_medium]: hasVariant($state, "size", "medium"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.rootsize_vertical]: hasVariant($state, "size", "vertical"),
          [sty.roottype_black]: hasVariant($state, "type", "black"),
          [sty.roottype_blue]: hasVariant($state, "type", "blue"),
          [sty.roottype_blue_type_purple]:
            hasVariant($state, "type", "purple") &&
            hasVariant($state, "type", "blue"),
          [sty.roottype_clear]: hasVariant($state, "type", "clear"),
          [sty.roottype_clear_type_dividedRight]:
            hasVariant($state, "type", "clear") &&
            hasVariant($state, "type", "dividedRight"),
          [sty.roottype_dividedRight]: hasVariant(
            $state,
            "type",
            "dividedRight"
          ),
          [sty.roottype_gray]: hasVariant($state, "type", "gray"),
          [sty.roottype_green]: hasVariant($state, "type", "green"),
          [sty.roottype_green_type_purple]:
            hasVariant($state, "type", "purple") &&
            hasVariant($state, "type", "green"),
          [sty.roottype_green_type_red]:
            hasVariant($state, "type", "red") &&
            hasVariant($state, "type", "green"),
          [sty.roottype_noDivider]: hasVariant($state, "type", "noDivider"),
          [sty.roottype_noDivider_type_primary]:
            hasVariant($state, "type", "noDivider") &&
            hasVariant($state, "type", "primary"),
          [sty.roottype_primary]: hasVariant($state, "type", "primary"),
          [sty.roottype_primary_type_clear]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "clear"),
          [sty.roottype_primary_type_dividedRight]:
            hasVariant($state, "type", "dividedRight") &&
            hasVariant($state, "type", "primary"),
          [sty.roottype_purple]: hasVariant($state, "type", "purple"),
          [sty.roottype_red]: hasVariant($state, "type", "red"),
          [sty.roottype_roundClear]: hasVariant($state, "type", "roundClear"),
          [sty.roottype_roundClear_isActive]:
            hasVariant($state, "isActive", "isActive") &&
            hasVariant($state, "type", "roundClear"),
          [sty.roottype_roundClear_type_round]:
            hasVariant($state, "type", "round") &&
            hasVariant($state, "type", "roundClear"),
          [sty.roottype_round]: hasVariant($state, "type", "round"),
          [sty.roottype_seamless]: hasVariant($state, "type", "seamless"),
          [sty.roottype_secondary]: hasVariant($state, "type", "secondary"),
          [sty.roottype_stepUp]: hasVariant($state, "type", "stepUp"),
          [sty.roottype_switchOn]: hasVariant($state, "type", "switchOn"),
          [sty.rootwithBackgroundHover]: hasVariant(
            $state,
            "withBackgroundHover",
            "withBackgroundHover"
          ),
          [sty.rootwithBackgroundHover_type_primary]:
            hasVariant($state, "withBackgroundHover", "withBackgroundHover") &&
            hasVariant($state, "type", "primary"),
          [sty.rootwithBackgroundHover_type_secondary]:
            hasVariant($state, "type", "secondary") &&
            hasVariant($state, "withBackgroundHover", "withBackgroundHover"),
          [sty.rootwithDropdown]: hasVariant(
            $state,
            "withDropdown",
            "withDropdown"
          ),
          [sty.rootwithGreenBackgroundHover]: hasVariant(
            $state,
            "withGreenBackgroundHover",
            "withGreenBackgroundHover"
          ),
          [sty.rootwithRedBackgroundHover]: hasVariant(
            $state,
            "withRedBackgroundHover",
            "withRedBackgroundHover"
          ),
        }
      )}
      disabled={hasVariant($state, "disabled", "disabled") ? true : undefined}
      title={args.hoverText}
      data-plasmic-trigger-props={[
        triggerRootFocusProps,
        triggerRootFocusVisibleProps,
      ]}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <PlusSvgIcon
            className={classNames(projectcss.all, sty.svg__vKQk)}
            role={"img"}
          />
        ),

        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildren___focus__focusVisible]:
            triggers.focusFocusVisible_root,
          [sty.slotTargetChildren___focus__focusVisible_type_primary]:
            hasVariant($state, "type", "primary") &&
            triggers.focusFocusVisible_root,
          [sty.slotTargetChildrendisabled]: hasVariant(
            $state,
            "disabled",
            "disabled"
          ),
          [sty.slotTargetChildrenisActive]: hasVariant(
            $state,
            "isActive",
            "isActive"
          ),
          [sty.slotTargetChildrenisActive_type_dividedRight]:
            hasVariant($state, "type", "dividedRight") &&
            hasVariant($state, "isActive", "isActive"),
          [sty.slotTargetChildrenisActive_type_primary_type_dividedRight]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "dividedRight") &&
            hasVariant($state, "isActive", "isActive"),
          [sty.slotTargetChildrenisLoading]: hasVariant(
            $state,
            "isLoading",
            "isLoading"
          ),
          [sty.slotTargetChildrenshowAlert]: hasVariant(
            $state,
            "showAlert",
            "showAlert"
          ),
          [sty.slotTargetChildrensize_large]: hasVariant(
            $state,
            "size",
            "large"
          ),
          [sty.slotTargetChildrensize_medium]: hasVariant(
            $state,
            "size",
            "medium"
          ),
          [sty.slotTargetChildrensize_small]: hasVariant(
            $state,
            "size",
            "small"
          ),
          [sty.slotTargetChildrensize_vertical]: hasVariant(
            $state,
            "size",
            "vertical"
          ),
          [sty.slotTargetChildrentype_black]: hasVariant(
            $state,
            "type",
            "black"
          ),
          [sty.slotTargetChildrentype_blue]: hasVariant($state, "type", "blue"),
          [sty.slotTargetChildrentype_clear]: hasVariant(
            $state,
            "type",
            "clear"
          ),
          [sty.slotTargetChildrentype_dividedRight]: hasVariant(
            $state,
            "type",
            "dividedRight"
          ),
          [sty.slotTargetChildrentype_green]: hasVariant(
            $state,
            "type",
            "green"
          ),
          [sty.slotTargetChildrentype_green_type_purple]:
            hasVariant($state, "type", "purple") &&
            hasVariant($state, "type", "green"),
          [sty.slotTargetChildrentype_green_type_red]:
            hasVariant($state, "type", "red") &&
            hasVariant($state, "type", "green"),
          [sty.slotTargetChildrentype_noDivider]: hasVariant(
            $state,
            "type",
            "noDivider"
          ),
          [sty.slotTargetChildrentype_noDivider_type_primary]:
            hasVariant($state, "type", "noDivider") &&
            hasVariant($state, "type", "primary"),
          [sty.slotTargetChildrentype_primary]: hasVariant(
            $state,
            "type",
            "primary"
          ),
          [sty.slotTargetChildrentype_primary_type_clear]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "clear"),
          [sty.slotTargetChildrentype_primary_type_dividedRight]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "dividedRight"),
          [sty.slotTargetChildrentype_purple]: hasVariant(
            $state,
            "type",
            "purple"
          ),
          [sty.slotTargetChildrentype_red]: hasVariant($state, "type", "red"),
          [sty.slotTargetChildrentype_roundClear]: hasVariant(
            $state,
            "type",
            "roundClear"
          ),
          [sty.slotTargetChildrentype_round]: hasVariant(
            $state,
            "type",
            "round"
          ),
          [sty.slotTargetChildrentype_seamless]: hasVariant(
            $state,
            "type",
            "seamless"
          ),
          [sty.slotTargetChildrentype_switchOn]: hasVariant(
            $state,
            "type",
            "switchOn"
          ),
          [sty.slotTargetChildrenwithBackgroundHover]: hasVariant(
            $state,
            "withBackgroundHover",
            "withBackgroundHover"
          ),
          [sty.slotTargetChildrenwithGreenBackgroundHover]: hasVariant(
            $state,
            "withGreenBackgroundHover",
            "withGreenBackgroundHover"
          ),
          [sty.slotTargetChildrenwithRedBackgroundHover]: hasVariant(
            $state,
            "withRedBackgroundHover",
            "withRedBackgroundHover"
          ),
        }),
      })}
      {(
        hasVariant($state, "withDropdown", "withDropdown")
          ? true
          : hasVariant($state, "type", "purple")
          ? false
          : false
      )
        ? renderPlasmicSlot({
            defaultContents: (
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__vDdFm)}
                role={"img"}
              />
            ),

            value: args.children2,
            className: classNames(sty.slotTargetChildren2, {
              [sty.slotTargetChildren2disabled]: hasVariant(
                $state,
                "disabled",
                "disabled"
              ),
              [sty.slotTargetChildren2isActive]: hasVariant(
                $state,
                "isActive",
                "isActive"
              ),
              [sty.slotTargetChildren2showAlert]: hasVariant(
                $state,
                "showAlert",
                "showAlert"
              ),
              [sty.slotTargetChildren2size_large]: hasVariant(
                $state,
                "size",
                "large"
              ),
              [sty.slotTargetChildren2size_small]: hasVariant(
                $state,
                "size",
                "small"
              ),
              [sty.slotTargetChildren2type_blue]: hasVariant(
                $state,
                "type",
                "blue"
              ),
              [sty.slotTargetChildren2type_green]: hasVariant(
                $state,
                "type",
                "green"
              ),
              [sty.slotTargetChildren2type_purple]: hasVariant(
                $state,
                "type",
                "purple"
              ),
              [sty.slotTargetChildren2type_red]: hasVariant(
                $state,
                "type",
                "red"
              ),
              [sty.slotTargetChildren2type_roundClear]: hasVariant(
                $state,
                "type",
                "roundClear"
              ),
              [sty.slotTargetChildren2type_round]: hasVariant(
                $state,
                "type",
                "round"
              ),
              [sty.slotTargetChildren2type_seamless]: hasVariant(
                $state,
                "type",
                "seamless"
              ),
              [sty.slotTargetChildren2withBackgroundHover]: hasVariant(
                $state,
                "withBackgroundHover",
                "withBackgroundHover"
              ),
              [sty.slotTargetChildren2withDropdown]: hasVariant(
                $state,
                "withDropdown",
                "withDropdown"
              ),
              [sty.slotTargetChildren2withGreenBackgroundHover]: hasVariant(
                $state,
                "withGreenBackgroundHover",
                "withGreenBackgroundHover"
              ),
              [sty.slotTargetChildren2withRedBackgroundHover]: hasVariant(
                $state,
                "withRedBackgroundHover",
                "withRedBackgroundHover"
              ),
            }),
          })
        : null}
      {(
        hasVariant($state, "isLoading", "isLoading")
          ? true
          : hasVariant($state, "showAlert", "showAlert")
          ? true
          : false
      ) ? (
        <DotsHorizontalIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisActive]: hasVariant($state, "isActive", "isActive"),
            [sty.svgisLoading]: hasVariant($state, "isLoading", "isLoading"),
            [sty.svgshowAlert]: hasVariant($state, "showAlert", "showAlert"),
            [sty.svgtype_purple]: hasVariant($state, "type", "purple"),
          })}
          role={"img"}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIconButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIconButton__VariantsArgs;
    args?: PlasmicIconButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIconButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIconButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIconButton__ArgProps,
          internalVariantPropNames: PlasmicIconButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicIconButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIconButton";
  } else {
    func.displayName = `PlasmicIconButton.${nodeName}`;
  }
  return func;
}

export const PlasmicIconButton = Object.assign(
  // Top-level PlasmicIconButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicIconButton
    internalVariantProps: PlasmicIconButton__VariantProps,
    internalArgProps: PlasmicIconButton__ArgProps,
  }
);

export default PlasmicIconButton;
/* prettier-ignore-end */
