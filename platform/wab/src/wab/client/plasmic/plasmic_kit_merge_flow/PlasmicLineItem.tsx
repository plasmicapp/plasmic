// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p8FkKgCnyuat1kHSEYAKfW
// Component: VgvN9iOqwZ

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_merge_flow.module.css"; // plasmic-import: p8FkKgCnyuat1kHSEYAKfW/projectcss
import sty from "./PlasmicLineItem.module.css"; // plasmic-import: VgvN9iOqwZ/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: eV4_yyuiy3/icon
import DiamondsIcon from "./icons/PlasmicIcon__Diamonds"; // plasmic-import: nO4zRkdymv/icon
import treeV2EVpmODo from "./images/tree.svg"; // plasmic-import: v2eVPM-oDO/picture

createPlasmicElementProxy;

export type PlasmicLineItem__VariantMembers = {};
export type PlasmicLineItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicLineItem__VariantsArgs;
export const PlasmicLineItem__VariantProps = new Array<VariantPropType>();

export type PlasmicLineItem__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicLineItem__ArgsType;
export const PlasmicLineItem__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLineItem__OverridesType = {
  root?: Flex__<"div">;
  startIconsContainer14?: Flex__<"div">;
  icon?: Flex__<"svg">;
  labelsContainer14?: Flex__<"div">;
  labelText14?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
  labelIconsContainer14?: Flex__<"div">;
  svg?: Flex__<"svg">;
  endIconsContainer14?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultLineItemProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicLineItem__RenderFunc(props: {
  variants: PlasmicLineItem__VariantsArgs;
  args: PlasmicLineItem__ArgsType;
  overrides: PlasmicLineItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"startIconsContainer14"}
        data-plasmic-override={overrides.startIconsContainer14}
        hasGap={true}
        className={classNames(projectcss.all, sty.startIconsContainer14)}
      >
        <DiamondsIcon
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames(projectcss.all, sty.icon)}
          role={"img"}
        />
      </Stack__>
      <div
        data-plasmic-name={"labelsContainer14"}
        data-plasmic-override={overrides.labelsContainer14}
        className={classNames(projectcss.all, sty.labelsContainer14)}
      >
        <div
          data-plasmic-name={"labelText14"}
          data-plasmic-override={overrides.labelText14}
          className={classNames(projectcss.all, sty.labelText14)}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {renderPlasmicSlot({
              defaultContents:
                "Token \u201cInfo\u201d added in both branches, so we renamed this branch\u2019s to \u201cInfo2\u201d.",
              value: args.children,
              className: classNames(sty.slotTargetChildren),
            })}
          </div>
          {false ? (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Label"}
            </div>
          ) : null}
        </div>
        {false ? (
          <div
            data-plasmic-name={"labelIconsContainer14"}
            data-plasmic-override={overrides.labelIconsContainer14}
            className={classNames(projectcss.all, sty.labelIconsContainer14)}
          >
            <ChevronDownIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
      {false ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"endIconsContainer14"}
          data-plasmic-override={overrides.endIconsContainer14}
          hasGap={true}
          className={classNames(projectcss.all, sty.endIconsContainer14)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"20px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"20px"}
            loading={"lazy"}
            src={{
              src: treeV2EVpmODo,
              fullWidth: 20,
              fullHeight: 20,
              aspectRatio: 1,
            }}
          />
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "startIconsContainer14",
    "icon",
    "labelsContainer14",
    "labelText14",
    "freeBox",
    "text",
    "labelIconsContainer14",
    "svg",
    "endIconsContainer14",
    "img",
  ],
  startIconsContainer14: ["startIconsContainer14", "icon"],
  icon: ["icon"],
  labelsContainer14: [
    "labelsContainer14",
    "labelText14",
    "freeBox",
    "text",
    "labelIconsContainer14",
    "svg",
  ],
  labelText14: ["labelText14", "freeBox", "text"],
  freeBox: ["freeBox"],
  text: ["text"],
  labelIconsContainer14: ["labelIconsContainer14", "svg"],
  svg: ["svg"],
  endIconsContainer14: ["endIconsContainer14", "img"],
  img: ["img"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  startIconsContainer14: "div";
  icon: "svg";
  labelsContainer14: "div";
  labelText14: "div";
  freeBox: "div";
  text: "div";
  labelIconsContainer14: "div";
  svg: "svg";
  endIconsContainer14: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLineItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLineItem__VariantsArgs;
    args?: PlasmicLineItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLineItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLineItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLineItem__ArgProps,
          internalVariantPropNames: PlasmicLineItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicLineItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLineItem";
  } else {
    func.displayName = `PlasmicLineItem.${nodeName}`;
  }
  return func;
}

export const PlasmicLineItem = Object.assign(
  // Top-level PlasmicLineItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconsContainer14: makeNodeComponent("startIconsContainer14"),
    icon: makeNodeComponent("icon"),
    labelsContainer14: makeNodeComponent("labelsContainer14"),
    labelText14: makeNodeComponent("labelText14"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    labelIconsContainer14: makeNodeComponent("labelIconsContainer14"),
    svg: makeNodeComponent("svg"),
    endIconsContainer14: makeNodeComponent("endIconsContainer14"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicLineItem
    internalVariantProps: PlasmicLineItem__VariantProps,
    internalArgProps: PlasmicLineItem__ArgProps,
  }
);

export default PlasmicLineItem;
/* prettier-ignore-end */
