// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p8FkKgCnyuat1kHSEYAKfW
// Component: RM-Ya_c-mv

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ToggleButtonSwitch from "../../components/merge/ToggleButtonSwitch"; // plasmic-import: LCAZOUPfDDB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_merge_flow.module.css"; // plasmic-import: p8FkKgCnyuat1kHSEYAKfW/projectcss
import sty from "./PlasmicConflict.module.css"; // plasmic-import: RM-Ya_c-mv/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: eV4_yyuiy3/icon
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: eHz6SkjEXN/icon
import SquareIcon from "./icons/PlasmicIcon__Square"; // plasmic-import: e1jr2JBmRV/icon
import plusCnRm3QpPqQ from "./images/plus.svg"; // plasmic-import: CnRm3QPPqQ/picture
import treeV2EVpmODo from "./images/tree.svg"; // plasmic-import: v2eVPM-oDO/picture

createPlasmicElementProxy;

export type PlasmicConflict__VariantMembers = {
  hasSubtext: "hasSubtext";
  merged: "merged";
};
export type PlasmicConflict__VariantsArgs = {
  hasSubtext?: SingleBooleanChoiceArg<"hasSubtext">;
  merged?: SingleBooleanChoiceArg<"merged">;
};
type VariantPropType = keyof PlasmicConflict__VariantsArgs;
export const PlasmicConflict__VariantProps = new Array<VariantPropType>(
  "hasSubtext",
  "merged"
);

export type PlasmicConflict__ArgsType = {
  name?: React.ReactNode;
  subtext?: React.ReactNode;
};
type ArgPropType = keyof PlasmicConflict__ArgsType;
export const PlasmicConflict__ArgProps = new Array<ArgPropType>(
  "name",
  "subtext"
);

export type PlasmicConflict__OverridesType = {
  root?: Flex__<"div">;
  button10?: Flex__<"div">;
  startIconsContainer10?: Flex__<"div">;
  icon?: Flex__<"svg">;
  labelsContainer10?: Flex__<"div">;
  labelText10?: Flex__<"div">;
  subtext?: Flex__<"div">;
  labelIconsContainer10?: Flex__<"div">;
  endIconsContainer10?: Flex__<"div">;
  _switch?: Flex__<typeof ToggleButtonSwitch>;
  right?: Flex__<"button">;
  startIconsContainer12?: Flex__<"div">;
  labelsContainer12?: Flex__<"div">;
  labelText12?: Flex__<"div">;
  label14?: Flex__<"div">;
  text?: Flex__<"div">;
  labelIconsContainer12?: Flex__<"div">;
  endIconsContainer12?: Flex__<"div">;
};

export interface DefaultConflictProps {
  name?: React.ReactNode;
  subtext?: React.ReactNode;
  hasSubtext?: SingleBooleanChoiceArg<"hasSubtext">;
  merged?: SingleBooleanChoiceArg<"merged">;
  className?: string;
}

const $$ = {};

function PlasmicConflict__RenderFunc(props: {
  variants: PlasmicConflict__VariantsArgs;
  args: PlasmicConflict__ArgsType;
  overrides: PlasmicConflict__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hasSubtext",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasSubtext,
      },
      {
        path: "merged",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.merged,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasSubtext]: hasVariant($state, "hasSubtext", "hasSubtext"),
          [sty.rootmerged]: hasVariant($state, "merged", "merged"),
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"button10"}
        data-plasmic-override={overrides.button10}
        hasGap={true}
        className={classNames(projectcss.all, sty.button10, {
          [sty.button10hasSubtext]: hasVariant(
            $state,
            "hasSubtext",
            "hasSubtext"
          ),
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"startIconsContainer10"}
          data-plasmic-override={overrides.startIconsContainer10}
          hasGap={true}
          className={classNames(projectcss.all, sty.startIconsContainer10)}
        >
          <HomeIcon
            data-plasmic-name={"icon"}
            data-plasmic-override={overrides.icon}
            className={classNames(projectcss.all, sty.icon)}
            role={"img"}
          />
        </Stack__>
        <div
          data-plasmic-name={"labelsContainer10"}
          data-plasmic-override={overrides.labelsContainer10}
          className={classNames(projectcss.all, sty.labelsContainer10)}
        >
          <div
            data-plasmic-name={"labelText10"}
            data-plasmic-override={overrides.labelText10}
            className={classNames(projectcss.all, sty.labelText10, {
              [sty.labelText10hasSubtext]: hasVariant(
                $state,
                "hasSubtext",
                "hasSubtext"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rp81Z
                  )}
                >
                  {"Homepage"}
                </div>
              ),
              value: args.name,
              className: classNames(sty.slotTargetName, {
                [sty.slotTargetNamehasSubtext]: hasVariant(
                  $state,
                  "hasSubtext",
                  "hasSubtext"
                ),
              }),
            })}
            <div
              data-plasmic-name={"subtext"}
              data-plasmic-override={overrides.subtext}
              className={classNames(projectcss.all, sty.subtext, {
                [sty.subtexthasSubtext]: hasVariant(
                  $state,
                  "hasSubtext",
                  "hasSubtext"
                ),
                [sty.subtextmerged]: hasVariant($state, "merged", "merged"),
              })}
            >
              {(hasVariant($state, "hasSubtext", "hasSubtext") ? true : false)
                ? renderPlasmicSlot({
                    defaultContents: "Some changes were auto merged",
                    value: args.subtext,
                    className: classNames(sty.slotTargetSubtext, {
                      [sty.slotTargetSubtexthasSubtext]: hasVariant(
                        $state,
                        "hasSubtext",
                        "hasSubtext"
                      ),
                    }),
                  })
                : null}
            </div>
          </div>
          {false ? (
            <div
              data-plasmic-name={"labelIconsContainer10"}
              data-plasmic-override={overrides.labelIconsContainer10}
              className={classNames(projectcss.all, sty.labelIconsContainer10)}
            >
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__eSbfn)}
                role={"img"}
              />
            </div>
          ) : null}
        </div>
        {false ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"endIconsContainer10"}
            data-plasmic-override={overrides.endIconsContainer10}
            hasGap={true}
            className={classNames(projectcss.all, sty.endIconsContainer10)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__nwEkP)}
              displayHeight={"20px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"20px"}
              loading={"lazy"}
              src={{
                src: plusCnRm3QpPqQ,
                fullWidth: 20,
                fullHeight: 20,
                aspectRatio: 1,
              }}
            />
          </Stack__>
        ) : null}
      </Stack__>
      <ToggleButtonSwitch
        data-plasmic-name={"_switch"}
        data-plasmic-override={overrides._switch}
        className={classNames("__wab_instance", sty._switch, {
          [sty._switchhasSubtext]: hasVariant(
            $state,
            "hasSubtext",
            "hasSubtext"
          ),
          [sty._switchmerged]: hasVariant($state, "merged", "merged"),
        })}
      />

      {(hasVariant($state, "merged", "merged") ? true : false) ? (
        <Stack__
          as={"button"}
          data-plasmic-name={"right"}
          data-plasmic-override={overrides.right}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.button, sty.right, {
            [sty.rightmerged]: hasVariant($state, "merged", "merged"),
          })}
          ref={(ref) => {
            $refs["right"] = ref;
          }}
        >
          {false ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"startIconsContainer12"}
              data-plasmic-override={overrides.startIconsContainer12}
              hasGap={true}
              className={classNames(projectcss.all, sty.startIconsContainer12)}
            >
              <SquareIcon
                className={classNames(projectcss.all, sty.svg___08H1Q)}
                role={"img"}
              />
            </Stack__>
          ) : null}
          <div
            data-plasmic-name={"labelsContainer12"}
            data-plasmic-override={overrides.labelsContainer12}
            className={classNames(projectcss.all, sty.labelsContainer12)}
          >
            <div
              data-plasmic-name={"labelText12"}
              data-plasmic-override={overrides.labelText12}
              className={classNames(projectcss.all, sty.labelText12)}
            >
              <div
                data-plasmic-name={"label14"}
                data-plasmic-override={overrides.label14}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.label14
                )}
              >
                {"Auto merged"}
              </div>
              {false ? (
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Label"}
                </div>
              ) : null}
            </div>
            {false ? (
              <div
                data-plasmic-name={"labelIconsContainer12"}
                data-plasmic-override={overrides.labelIconsContainer12}
                className={classNames(
                  projectcss.all,
                  sty.labelIconsContainer12
                )}
              >
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__d7Kpt)}
                  role={"img"}
                />
              </div>
            ) : null}
          </div>
          {false ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"endIconsContainer12"}
              data-plasmic-override={overrides.endIconsContainer12}
              hasGap={true}
              className={classNames(projectcss.all, sty.endIconsContainer12)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jFqLq)}
                displayHeight={"20px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20px"}
                loading={"lazy"}
                src={{
                  src: treeV2EVpmODo,
                  fullWidth: 20,
                  fullHeight: 20,
                  aspectRatio: 1,
                }}
              />
            </Stack__>
          ) : null}
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button10",
    "startIconsContainer10",
    "icon",
    "labelsContainer10",
    "labelText10",
    "subtext",
    "labelIconsContainer10",
    "endIconsContainer10",
    "_switch",
    "right",
    "startIconsContainer12",
    "labelsContainer12",
    "labelText12",
    "label14",
    "text",
    "labelIconsContainer12",
    "endIconsContainer12",
  ],
  button10: [
    "button10",
    "startIconsContainer10",
    "icon",
    "labelsContainer10",
    "labelText10",
    "subtext",
    "labelIconsContainer10",
    "endIconsContainer10",
  ],
  startIconsContainer10: ["startIconsContainer10", "icon"],
  icon: ["icon"],
  labelsContainer10: [
    "labelsContainer10",
    "labelText10",
    "subtext",
    "labelIconsContainer10",
  ],
  labelText10: ["labelText10", "subtext"],
  subtext: ["subtext"],
  labelIconsContainer10: ["labelIconsContainer10"],
  endIconsContainer10: ["endIconsContainer10"],
  _switch: ["_switch"],
  right: [
    "right",
    "startIconsContainer12",
    "labelsContainer12",
    "labelText12",
    "label14",
    "text",
    "labelIconsContainer12",
    "endIconsContainer12",
  ],
  startIconsContainer12: ["startIconsContainer12"],
  labelsContainer12: [
    "labelsContainer12",
    "labelText12",
    "label14",
    "text",
    "labelIconsContainer12",
  ],
  labelText12: ["labelText12", "label14", "text"],
  label14: ["label14"],
  text: ["text"],
  labelIconsContainer12: ["labelIconsContainer12"],
  endIconsContainer12: ["endIconsContainer12"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button10: "div";
  startIconsContainer10: "div";
  icon: "svg";
  labelsContainer10: "div";
  labelText10: "div";
  subtext: "div";
  labelIconsContainer10: "div";
  endIconsContainer10: "div";
  _switch: typeof ToggleButtonSwitch;
  right: "button";
  startIconsContainer12: "div";
  labelsContainer12: "div";
  labelText12: "div";
  label14: "div";
  text: "div";
  labelIconsContainer12: "div";
  endIconsContainer12: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConflict__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConflict__VariantsArgs;
    args?: PlasmicConflict__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConflict__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConflict__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConflict__ArgProps,
          internalVariantPropNames: PlasmicConflict__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicConflict__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConflict";
  } else {
    func.displayName = `PlasmicConflict.${nodeName}`;
  }
  return func;
}

export const PlasmicConflict = Object.assign(
  // Top-level PlasmicConflict renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button10: makeNodeComponent("button10"),
    startIconsContainer10: makeNodeComponent("startIconsContainer10"),
    icon: makeNodeComponent("icon"),
    labelsContainer10: makeNodeComponent("labelsContainer10"),
    labelText10: makeNodeComponent("labelText10"),
    subtext: makeNodeComponent("subtext"),
    labelIconsContainer10: makeNodeComponent("labelIconsContainer10"),
    endIconsContainer10: makeNodeComponent("endIconsContainer10"),
    _switch: makeNodeComponent("_switch"),
    right: makeNodeComponent("right"),
    startIconsContainer12: makeNodeComponent("startIconsContainer12"),
    labelsContainer12: makeNodeComponent("labelsContainer12"),
    labelText12: makeNodeComponent("labelText12"),
    label14: makeNodeComponent("label14"),
    text: makeNodeComponent("text"),
    labelIconsContainer12: makeNodeComponent("labelIconsContainer12"),
    endIconsContainer12: makeNodeComponent("endIconsContainer12"),

    // Metadata about props expected for PlasmicConflict
    internalVariantProps: PlasmicConflict__VariantProps,
    internalArgProps: PlasmicConflict__ArgProps,
  }
);

export default PlasmicConflict;
/* prettier-ignore-end */
