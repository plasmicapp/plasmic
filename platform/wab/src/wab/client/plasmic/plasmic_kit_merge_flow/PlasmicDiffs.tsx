// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p8FkKgCnyuat1kHSEYAKfW
// Component: o4Oidp6CzFL

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_merge_flow.module.css"; // plasmic-import: p8FkKgCnyuat1kHSEYAKfW/projectcss
import sty from "./PlasmicDiffs.module.css"; // plasmic-import: o4Oidp6CzFL/css

import ArrowLeftSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowLeftSvg"; // plasmic-import: -d8Kjj4sp/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: eV4_yyuiy3/icon

createPlasmicElementProxy;

export type PlasmicDiffs__VariantMembers = {};
export type PlasmicDiffs__VariantsArgs = {};
type VariantPropType = keyof PlasmicDiffs__VariantsArgs;
export const PlasmicDiffs__VariantProps = new Array<VariantPropType>();

export type PlasmicDiffs__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicDiffs__ArgsType;
export const PlasmicDiffs__ArgProps = new Array<ArgPropType>("children");

export type PlasmicDiffs__OverridesType = {
  root?: Flex__<"div">;
  backButton?: Flex__<typeof Button>;
  labelText?: Flex__<"div">;
  label?: Flex__<"div">;
  branchLabel?: Flex__<"span">;
  text?: Flex__<"div">;
  labelIconsContainer?: Flex__<"div">;
  diffContent?: Flex__<"div">;
};

export interface DefaultDiffsProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicDiffs__RenderFunc(props: {
  variants: PlasmicDiffs__VariantsArgs;
  args: PlasmicDiffs__ArgsType;
  overrides: PlasmicDiffs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bU0WY)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__kZmf4)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7C2QV)}
          >
            <Button
              data-plasmic-name={"backButton"}
              data-plasmic-override={overrides.backButton}
              className={classNames("__wab_instance", sty.backButton)}
              startIcon={
                <ArrowLeftSvgIcon
                  className={classNames(projectcss.all, sty.svg__n4509)}
                  role={"img"}
                />
              }
              type={["clear"]}
              withIcons={["startIcon"]}
            >
              {"Back"}
            </Button>
            <div className={classNames(projectcss.all, sty.freeBox__bo5SR)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xCi3C)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ue9L3)}>
                  <div
                    data-plasmic-name={"labelText"}
                    data-plasmic-override={overrides.labelText}
                    className={classNames(projectcss.all, sty.labelText)}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Changes in "}</React.Fragment>
                        {
                          <span
                            data-plasmic-name={"branchLabel"}
                            data-plasmic-override={overrides.branchLabel}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.branchLabel
                            )}
                          >
                            {"the main branch"}
                          </span>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                    {false ? (
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer"}
                      data-plasmic-override={overrides.labelIconsContainer}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__aCBau)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
              </Stack__>
            </div>
            <div
              data-plasmic-name={"diffContent"}
              data-plasmic-override={overrides.diffContent}
              className={classNames(projectcss.all, sty.diffContent)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wTUx)}>
                {renderPlasmicSlot({
                  defaultContents: "Enter some text",
                  value: args.children,
                })}
              </div>
            </div>
          </Stack__>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "backButton",
    "labelText",
    "label",
    "branchLabel",
    "text",
    "labelIconsContainer",
    "diffContent",
  ],
  backButton: ["backButton"],
  labelText: ["labelText", "label", "branchLabel", "text"],
  label: ["label", "branchLabel"],
  branchLabel: ["branchLabel"],
  text: ["text"],
  labelIconsContainer: ["labelIconsContainer"],
  diffContent: ["diffContent"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  backButton: typeof Button;
  labelText: "div";
  label: "div";
  branchLabel: "span";
  text: "div";
  labelIconsContainer: "div";
  diffContent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDiffs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDiffs__VariantsArgs;
    args?: PlasmicDiffs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDiffs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDiffs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDiffs__ArgProps,
          internalVariantPropNames: PlasmicDiffs__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDiffs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDiffs";
  } else {
    func.displayName = `PlasmicDiffs.${nodeName}`;
  }
  return func;
}

export const PlasmicDiffs = Object.assign(
  // Top-level PlasmicDiffs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    backButton: makeNodeComponent("backButton"),
    labelText: makeNodeComponent("labelText"),
    label: makeNodeComponent("label"),
    branchLabel: makeNodeComponent("branchLabel"),
    text: makeNodeComponent("text"),
    labelIconsContainer: makeNodeComponent("labelIconsContainer"),
    diffContent: makeNodeComponent("diffContent"),

    // Metadata about props expected for PlasmicDiffs
    internalVariantProps: PlasmicDiffs__VariantProps,
    internalArgProps: PlasmicDiffs__ArgProps,
  }
);

export default PlasmicDiffs;
/* prettier-ignore-end */
