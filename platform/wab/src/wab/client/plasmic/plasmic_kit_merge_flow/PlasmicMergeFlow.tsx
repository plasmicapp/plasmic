// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p8FkKgCnyuat1kHSEYAKfW
// Component: A4VINgKjc8

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Conflict from "../../components/merge/Conflict"; // plasmic-import: RM-Ya_c-mv/component
import LineItem from "../../components/merge/LineItem"; // plasmic-import: VgvN9iOqwZ/component
import Switch from "../../components/merge/Switch"; // plasmic-import: AJepyKzS-T-/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_merge_flow.module.css"; // plasmic-import: p8FkKgCnyuat1kHSEYAKfW/projectcss
import sty from "./PlasmicMergeFlow.module.css"; // plasmic-import: A4VINgKjc8/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: b32FQsRIZF/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: eV4_yyuiy3/icon
import CloseIcon from "./icons/PlasmicIcon__Close"; // plasmic-import: YCOFZmA9Gr/icon
import FramePlusIcon from "./icons/PlasmicIcon__FramePlus"; // plasmic-import: 9_qXsh2_0/icon
import plusCnRm3QpPqQ from "./images/plus.svg"; // plasmic-import: CnRm3QPPqQ/picture
import treeV2EVpmODo from "./images/tree.svg"; // plasmic-import: v2eVPM-oDO/picture

createPlasmicElementProxy;

export type PlasmicMergeFlow__VariantMembers = {
  empty: "empty";
  loading: "loading";
  blocked: "blocked";
};
export type PlasmicMergeFlow__VariantsArgs = {
  empty?: SingleBooleanChoiceArg<"empty">;
  loading?: SingleBooleanChoiceArg<"loading">;
  blocked?: SingleBooleanChoiceArg<"blocked">;
};
type VariantPropType = keyof PlasmicMergeFlow__VariantsArgs;
export const PlasmicMergeFlow__VariantProps = new Array<VariantPropType>(
  "empty",
  "loading",
  "blocked"
);

export type PlasmicMergeFlow__ArgsType = {};
type ArgPropType = keyof PlasmicMergeFlow__ArgsType;
export const PlasmicMergeFlow__ArgProps = new Array<ArgPropType>();

export type PlasmicMergeFlow__OverridesType = {
  root?: Flex__<"div">;
  sourceBranchChanges?: Flex__<"button">;
  destinationBranchChanges?: Flex__<"button">;
  labelIconsContainer4?: Flex__<"div">;
  showAllSwitchContainer?: Flex__<"div">;
  showAllSwitch?: Flex__<typeof Switch>;
  pairedChanges?: Flex__<"div">;
  reconciliationsContainer?: Flex__<"div">;
  startIconsContainer13?: Flex__<"div">;
  labelIconsContainer13?: Flex__<"div">;
  endIconsContainer13?: Flex__<"div">;
  reconciliations?: Flex__<"div">;
  blockedContainer?: Flex__<"div">;
  mergeBlockedTitle?: Flex__<"div">;
  mergeBlockedMsg?: Flex__<"div">;
  description?: Flex__<"textarea">;
  tagsSelector?: Flex__<typeof Select>;
  cancelButton?: Flex__<typeof Button>;
  finishButton?: Flex__<typeof Button>;
  spinnerContainer?: Flex__<"div">;
};

export interface DefaultMergeFlowProps {
  empty?: SingleBooleanChoiceArg<"empty">;
  loading?: SingleBooleanChoiceArg<"loading">;
  blocked?: SingleBooleanChoiceArg<"blocked">;
  className?: string;
}

const $$ = {};

function PlasmicMergeFlow__RenderFunc(props: {
  variants: PlasmicMergeFlow__VariantsArgs;
  args: PlasmicMergeFlow__ArgsType;
  overrides: PlasmicMergeFlow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "empty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.empty,
      },
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading,
      },
      {
        path: "showAllSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: "blocked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.blocked,
      },
      {
        path: "description.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootblocked]: hasVariant($state, "blocked", "blocked"),
          [sty.rootempty]: hasVariant($state, "empty", "empty"),
          [sty.rootloading]: hasVariant($state, "loading", "loading"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___5XViU, {
          [sty.freeBoxblocked___5XViU1MFev]: hasVariant(
            $state,
            "blocked",
            "blocked"
          ),
          [sty.freeBoxloading___5XViUjPjj]: hasVariant(
            $state,
            "loading",
            "loading"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__ng1Mz, {
            [sty.freeBoxblocked__ng1Mz1MFev]: hasVariant(
              $state,
              "blocked",
              "blocked"
            ),
            [sty.freeBoxloading__ng1MZjPjj]: hasVariant(
              $state,
              "loading",
              "loading"
            ),
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qjcS0, {
              [sty.freeBoxblocked__qjcS01MFev]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
              [sty.freeBoxloading__qjcS0JPjj]: hasVariant(
                $state,
                "loading",
                "loading"
              ),
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__d9Waw)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eDeVh)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0E0Sg)}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__pv5KQ)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__kggB)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r9Bdd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lUvMr
                      )}
                    >
                      {"Review changes"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gZfMj
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iwyI7)}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__oMQg)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6YdgV)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___88CXy)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: treeV2EVpmODo,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jd4MV)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4K6Q6)}
                >
                  <CloseIcon
                    className={classNames(projectcss.all, sty.svg__r3Owl)}
                    role={"img"}
                  />
                </Stack__>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfrFn)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lJhL1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sy7Wj
                        )}
                      >
                        {"Variants"}
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qJa9R
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rx9Cd
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___51BzZ
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qrpge)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bfIyh)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: plusCnRm3QpPqQ,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tiUf4, {
                [sty.freeBoxblocked__tiUf41MFev]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
              })}
            >
              <Stack__
                as={"button"}
                data-plasmic-name={"sourceBranchChanges"}
                data-plasmic-override={overrides.sourceBranchChanges}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.sourceBranchChanges,
                  {
                    [sty.sourceBranchChangesblocked]: hasVariant(
                      $state,
                      "blocked",
                      "blocked"
                    ),
                  }
                )}
                ref={(ref) => {
                  $refs["sourceBranchChanges"] = ref;
                }}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___5Fo1K)}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__rwequ)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__fMyi7)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fUtGh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kp5Wz
                      )}
                    >
                      {"in this branch"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x53Vz
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rDMa)}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__rHMaH)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dwEzg)}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__qeCf)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
              <Stack__
                as={"button"}
                data-plasmic-name={"destinationBranchChanges"}
                data-plasmic-override={overrides.destinationBranchChanges}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.destinationBranchChanges
                )}
                ref={(ref) => {
                  $refs["destinationBranchChanges"] = ref;
                }}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iWcvc)}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__igbUt)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__deRok)}>
                  <div className={classNames(projectcss.all, sty.freeBox__eJE)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8FduF
                      )}
                    >
                      {"in main branch since this branch was created"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nvNxw
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer4"}
                      data-plasmic-override={overrides.labelIconsContainer4}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer4
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__rtsiL)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__frmUb)}
                >
                  <ArrowRightIcon
                    className={classNames(projectcss.all, sty.svg__mAv6V)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hyDgo, {
              [sty.freeBoxblocked__hyDgo1MFev]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__omzv8)} />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ulNmQ, {
              [sty.freeBoxblocked__ulNmQ1MFev]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bsiUw)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bRbRl)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7Y1W)}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__b5Ju)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__tWrBp)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fsfy0)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uH8Hs
                      )}
                    >
                      {"Conflicting changes"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__knemq
                      )}
                    >
                      {"Pick the branch to keep changes from."}
                    </div>
                  </Stack__>
                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lXxKw)}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__qtac)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wFkmb)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___0MvkB)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: treeV2EVpmODo,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
              <div
                data-plasmic-name={"showAllSwitchContainer"}
                data-plasmic-override={overrides.showAllSwitchContainer}
                className={classNames(
                  projectcss.all,
                  sty.showAllSwitchContainer
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__e62Vb)}>
                  <Switch
                    data-plasmic-name={"showAllSwitch"}
                    data-plasmic-override={overrides.showAllSwitch}
                    className={classNames("__wab_instance", sty.showAllSwitch)}
                    isChecked={
                      generateStateValueProp($state, [
                        "showAllSwitch",
                        "isChecked",
                      ]) ?? false
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "showAllSwitch",
                          "isChecked",
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__haM4A
                      )}
                    >
                      {"Show all changes"}
                    </div>
                  </Switch>
                </div>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iM7TU, {
                [sty.freeBoxempty__iM7TUk797E]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dcTi7, {
                  [sty.freeBoxempty__dcTi7K797E]: hasVariant(
                    $state,
                    "empty",
                    "empty"
                  ),
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vW2G2, {
                    [sty.freeBoxblocked__vW2G21MFev]: hasVariant(
                      $state,
                      "blocked",
                      "blocked"
                    ),
                  })}
                >
                  {false ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fFhWx)}
                    >
                      <FramePlusIcon
                        className={classNames(projectcss.all, sty.svg__zuEam)}
                        role={"img"}
                      />
                    </Stack__>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2NNJ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__l8H0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8D6Zw
                        )}
                      >
                        {"Object"}
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ipYnc
                          )}
                        >
                          {"Label"}
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iu7Ph
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5AnHa
                          )}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uJ5Wf)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__qp40P)}
                        displayHeight={"20px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        src={{
                          src: treeV2EVpmODo,
                          fullWidth: 20,
                          fullHeight: 20,
                          aspectRatio: 1,
                        }}
                      />
                    </Stack__>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9XHyG)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yl1Mo)}
                  >
                    {false ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e9Ghe
                        )}
                      >
                        <FramePlusIcon
                          className={classNames(projectcss.all, sty.svg__tad73)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a4BLq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ziNtG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iXNhU
                          )}
                        >
                          {"Main\nbranch"}
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pbYbl
                            )}
                          >
                            {"Label"}
                          </div>
                        ) : null}
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mnDjo
                          )}
                        >
                          <ChevronDownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ajIg
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Swbw
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__p8Jv0)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: treeV2EVpmODo,
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1,
                          }}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zsNEo)}
                  >
                    {false ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6DxoJ
                        )}
                      >
                        <FramePlusIcon
                          className={classNames(projectcss.all, sty.svg__hub8L)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oajyO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__muFrq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qtmHr
                          )}
                        >
                          {"This\nbranch"}
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yDyvZ
                            )}
                          >
                            {"Label"}
                          </div>
                        ) : null}
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yc4Gp
                          )}
                        >
                          <ChevronDownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hlnrc
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sKs4
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__t922V)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: treeV2EVpmODo,
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1,
                          }}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__miviq)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__kWgE9)}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"pairedChanges"}
                data-plasmic-override={overrides.pairedChanges}
                hasGap={true}
                className={classNames(projectcss.all, sty.pairedChanges, {
                  [sty.pairedChangesempty]: hasVariant(
                    $state,
                    "empty",
                    "empty"
                  ),
                })}
              >
                <Conflict
                  className={classNames("__wab_instance", sty.conflict__a9E2T, {
                    [sty.conflictempty__a9E2TK797E]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  })}
                  name={"Homepage"}
                  subtext={"Some changes were auto merged"}
                />

                <Conflict
                  className={classNames("__wab_instance", sty.conflict__i7Jgd)}
                  hasSubtext={true}
                  name={"Homepage"}
                  subtext={"Some changes were auto merged"}
                />

                <Conflict
                  className={classNames("__wab_instance", sty.conflict__u2SIb)}
                  merged={true}
                  name={"Homepage"}
                  subtext={"Some changes were auto merged"}
                />

                <Conflict
                  className={classNames("__wab_instance", sty.conflict__xNAqO, {
                    [sty.conflictempty__xNAqOk797E]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  })}
                  merged={true}
                  name={"Homepage"}
                  subtext={"Some changes were auto merged"}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7NgIv,
                  {
                    [sty.textempty___7NgIvk797E]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  }
                )}
              >
                {"No conflicting changes!"}
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iXqLb, {
              [sty.freeBoxblocked__iXqLb1MFev]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__ewyyN, {
                [sty.freeBoxempty__ewyyNk797E]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
              })}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"reconciliationsContainer"}
            data-plasmic-override={overrides.reconciliationsContainer}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.reconciliationsContainer,
              {
                [sty.reconciliationsContainerblocked]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
                [sty.reconciliationsContainerempty]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
              }
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pBIaG)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kw1KW)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"startIconsContainer13"}
                    data-plasmic-override={overrides.startIconsContainer13}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.startIconsContainer13
                    )}
                  >
                    <FramePlusIcon
                      className={classNames(projectcss.all, sty.svg__hgECr)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__x8BCz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ctAYm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ifdJl
                      )}
                    >
                      {"Automatically reconciled changes"}
                    </div>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uKa6G
                        )}
                      >
                        {"Label"}
                      </div>
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"labelIconsContainer13"}
                      data-plasmic-override={overrides.labelIconsContainer13}
                      className={classNames(
                        projectcss.all,
                        sty.labelIconsContainer13
                      )}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__gtQk1)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"endIconsContainer13"}
                    data-plasmic-override={overrides.endIconsContainer13}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.endIconsContainer13
                    )}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vpzpQ)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"20px"}
                      loading={"lazy"}
                      src={{
                        src: treeV2EVpmODo,
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1,
                      }}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"reconciliations"}
              data-plasmic-override={overrides.reconciliations}
              hasGap={true}
              className={classNames(projectcss.all, sty.reconciliations)}
            >
              <LineItem
                className={classNames("__wab_instance", sty.lineItem__dIr7Y, {
                  [sty.lineItemempty__dIr7YK797E]: hasVariant(
                    $state,
                    "empty",
                    "empty"
                  ),
                })}
              >
                {
                  "Token \u201cInfo\u201d added in both branches, so we renamed this branch\u2019s to \u201cInfo2\u201d."
                }
              </LineItem>
              <LineItem
                className={classNames("__wab_instance", sty.lineItem__skGyc)}
              >
                {
                  "Component \u201cListItem\u201d deleted in this branch, but got used in the main branch, so we deleted those new usages."
                }
              </LineItem>
            </Stack__>
          </Stack__>
          {(
            hasVariant($state, "blocked", "blocked")
              ? true
              : hasVariant($state, "loading", "loading")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"blockedContainer"}
              data-plasmic-override={overrides.blockedContainer}
              className={classNames(projectcss.all, sty.blockedContainer, {
                [sty.blockedContainerblocked]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
                [sty.blockedContainerloading]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                ),
              })}
            >
              <div
                data-plasmic-name={"mergeBlockedTitle"}
                data-plasmic-override={overrides.mergeBlockedTitle}
                className={classNames(projectcss.all, sty.mergeBlockedTitle, {
                  [sty.mergeBlockedTitleblocked]: hasVariant(
                    $state,
                    "blocked",
                    "blocked"
                  ),
                  [sty.mergeBlockedTitleloading]: hasVariant(
                    $state,
                    "loading",
                    "loading"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ujPpp,
                    {
                      [sty.textblocked__ujPpp1MFev]: hasVariant(
                        $state,
                        "blocked",
                        "blocked"
                      ),
                      [sty.textloading__ujPppjPjj]: hasVariant(
                        $state,
                        "loading",
                        "loading"
                      ),
                    }
                  )}
                >
                  {"Cannot merge branches"}
                </div>
              </div>
              <div
                data-plasmic-name={"mergeBlockedMsg"}
                data-plasmic-override={overrides.mergeBlockedMsg}
                className={classNames(projectcss.all, sty.mergeBlockedMsg, {
                  [sty.mergeBlockedMsgblocked]: hasVariant(
                    $state,
                    "blocked",
                    "blocked"
                  ),
                  [sty.mergeBlockedMsgloading]: hasVariant(
                    $state,
                    "loading",
                    "loading"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9XgRb,
                    {
                      [sty.textblocked___9XgRb1MFev]: hasVariant(
                        $state,
                        "blocked",
                        "blocked"
                      ),
                    }
                  )}
                >
                  {
                    "The branches cannot be merged because: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam eget ligula eu lectus lobortis condimentum. Aliquam nonummy auctor massa."
                  }
                </div>
              </div>
            </div>
          ) : null}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7ZvWs)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__sq5KK)} />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8VwQ3)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6AaCb, {
                [sty.freeBoxblocked___6AaCb1MFev]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tPwaU
                )}
              >
                {"Merge and save version"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uUu0C
                )}
              >
                {
                  "Merging will cause a new version to be saved. Publish actions will not be run."
                }
              </div>
            </Stack__>
            <div
              className={classNames(projectcss.all, sty.freeBox__tBNhD, {
                [sty.freeBoxblocked__tBNhD1MFev]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wsqMx,
                  {
                    [sty.textblocked__wsqMx1MFev]: hasVariant(
                      $state,
                      "blocked",
                      "blocked"
                    ),
                  }
                )}
              >
                {"Description"}
              </div>
              <textarea
                data-plasmic-name={"description"}
                data-plasmic-override={overrides.description}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.description
                )}
                onChange={async (...eventArgs: any) => {
                  ((e) => {
                    generateStateOnChangeProp($state, ["description", "value"])(
                      e.target.value
                    );
                  }).apply(null, eventArgs);
                }}
                placeholder={"Enter description here (optional)…"}
                ref={(ref) => {
                  $refs["description"] = ref;
                }}
                rows={2}
                value={
                  generateStateValueProp($state, ["description", "value"]) ?? ""
                }
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__d3QkI, {
                [sty.freeBoxblocked__d3QkI1MFev]: hasVariant(
                  $state,
                  "blocked",
                  "blocked"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dd2Qx
                )}
              >
                {"Tags"}
              </div>
              <Select
                data-plasmic-name={"tagsSelector"}
                data-plasmic-override={overrides.tagsSelector}
                className={classNames("__wab_instance", sty.tagsSelector)}
                type={"bordered"}
              />
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sZadF, {
                [sty.freeBoxempty__sZadFk797E]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
              })}
            >
              <Button
                data-plasmic-name={"cancelButton"}
                data-plasmic-override={overrides.cancelButton}
                caption={"Caption"}
                className={classNames("__wab_instance", sty.cancelButton)}
              >
                {"Cancel"}
              </Button>
              <Button
                data-plasmic-name={"finishButton"}
                data-plasmic-override={overrides.finishButton}
                caption={"Caption"}
                className={classNames("__wab_instance", sty.finishButton, {
                  [sty.finishButtonblocked]: hasVariant(
                    $state,
                    "blocked",
                    "blocked"
                  ),
                })}
                disabled={
                  hasVariant($state, "blocked", "blocked") ? true : undefined
                }
                isSubmit={false}
                type={["primary"]}
              >
                {"Merge"}
              </Button>
            </Stack__>
          </Stack__>
        </div>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__tFpp, {
          [sty.freeBoxblocked__tFpp1MFev]: hasVariant(
            $state,
            "blocked",
            "blocked"
          ),
          [sty.freeBoxloading__tFppjPjj]: hasVariant(
            $state,
            "loading",
            "loading"
          ),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yZmul,
            {
              [sty.textblocked__yZmul1MFev]: hasVariant(
                $state,
                "blocked",
                "blocked"
              ),
              [sty.textloading__yZmuLjPjj]: hasVariant(
                $state,
                "loading",
                "loading"
              ),
            }
          )}
        >
          {"Please wait, determining conflicting changes..."}
        </div>
        <div
          data-plasmic-name={"spinnerContainer"}
          data-plasmic-override={overrides.spinnerContainer}
          className={classNames(projectcss.all, sty.spinnerContainer, {
            [sty.spinnerContainerblocked]: hasVariant(
              $state,
              "blocked",
              "blocked"
            ),
            [sty.spinnerContainerloading]: hasVariant(
              $state,
              "loading",
              "loading"
            ),
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sourceBranchChanges",
    "destinationBranchChanges",
    "labelIconsContainer4",
    "showAllSwitchContainer",
    "showAllSwitch",
    "pairedChanges",
    "reconciliationsContainer",
    "startIconsContainer13",
    "labelIconsContainer13",
    "endIconsContainer13",
    "reconciliations",
    "blockedContainer",
    "mergeBlockedTitle",
    "mergeBlockedMsg",
    "description",
    "tagsSelector",
    "cancelButton",
    "finishButton",
    "spinnerContainer",
  ],
  sourceBranchChanges: ["sourceBranchChanges"],
  destinationBranchChanges: [
    "destinationBranchChanges",
    "labelIconsContainer4",
  ],
  labelIconsContainer4: ["labelIconsContainer4"],
  showAllSwitchContainer: ["showAllSwitchContainer", "showAllSwitch"],
  showAllSwitch: ["showAllSwitch"],
  pairedChanges: ["pairedChanges"],
  reconciliationsContainer: [
    "reconciliationsContainer",
    "startIconsContainer13",
    "labelIconsContainer13",
    "endIconsContainer13",
    "reconciliations",
  ],
  startIconsContainer13: ["startIconsContainer13"],
  labelIconsContainer13: ["labelIconsContainer13"],
  endIconsContainer13: ["endIconsContainer13"],
  reconciliations: ["reconciliations"],
  blockedContainer: [
    "blockedContainer",
    "mergeBlockedTitle",
    "mergeBlockedMsg",
  ],
  mergeBlockedTitle: ["mergeBlockedTitle"],
  mergeBlockedMsg: ["mergeBlockedMsg"],
  description: ["description"],
  tagsSelector: ["tagsSelector"],
  cancelButton: ["cancelButton"],
  finishButton: ["finishButton"],
  spinnerContainer: ["spinnerContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sourceBranchChanges: "button";
  destinationBranchChanges: "button";
  labelIconsContainer4: "div";
  showAllSwitchContainer: "div";
  showAllSwitch: typeof Switch;
  pairedChanges: "div";
  reconciliationsContainer: "div";
  startIconsContainer13: "div";
  labelIconsContainer13: "div";
  endIconsContainer13: "div";
  reconciliations: "div";
  blockedContainer: "div";
  mergeBlockedTitle: "div";
  mergeBlockedMsg: "div";
  description: "textarea";
  tagsSelector: typeof Select;
  cancelButton: typeof Button;
  finishButton: typeof Button;
  spinnerContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMergeFlow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMergeFlow__VariantsArgs;
    args?: PlasmicMergeFlow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMergeFlow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMergeFlow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMergeFlow__ArgProps,
          internalVariantPropNames: PlasmicMergeFlow__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicMergeFlow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMergeFlow";
  } else {
    func.displayName = `PlasmicMergeFlow.${nodeName}`;
  }
  return func;
}

export const PlasmicMergeFlow = Object.assign(
  // Top-level PlasmicMergeFlow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sourceBranchChanges: makeNodeComponent("sourceBranchChanges"),
    destinationBranchChanges: makeNodeComponent("destinationBranchChanges"),
    labelIconsContainer4: makeNodeComponent("labelIconsContainer4"),
    showAllSwitchContainer: makeNodeComponent("showAllSwitchContainer"),
    showAllSwitch: makeNodeComponent("showAllSwitch"),
    pairedChanges: makeNodeComponent("pairedChanges"),
    reconciliationsContainer: makeNodeComponent("reconciliationsContainer"),
    startIconsContainer13: makeNodeComponent("startIconsContainer13"),
    labelIconsContainer13: makeNodeComponent("labelIconsContainer13"),
    endIconsContainer13: makeNodeComponent("endIconsContainer13"),
    reconciliations: makeNodeComponent("reconciliations"),
    blockedContainer: makeNodeComponent("blockedContainer"),
    mergeBlockedTitle: makeNodeComponent("mergeBlockedTitle"),
    mergeBlockedMsg: makeNodeComponent("mergeBlockedMsg"),
    description: makeNodeComponent("description"),
    tagsSelector: makeNodeComponent("tagsSelector"),
    cancelButton: makeNodeComponent("cancelButton"),
    finishButton: makeNodeComponent("finishButton"),
    spinnerContainer: makeNodeComponent("spinnerContainer"),

    // Metadata about props expected for PlasmicMergeFlow
    internalVariantProps: PlasmicMergeFlow__VariantProps,
    internalArgProps: PlasmicMergeFlow__ArgProps,
  }
);

export default PlasmicMergeFlow;
/* prettier-ignore-end */
