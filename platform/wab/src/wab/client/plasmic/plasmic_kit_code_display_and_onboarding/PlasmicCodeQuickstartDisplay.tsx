/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pTmuho7nuNtDcvZAf2kJgx
// Component: jLDeDF206V

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import FrameworkTabs from "../../components/studio/code-quickstart/FrameworkTabs"; // plasmic-import: tf_fQvs5kI8/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_code_display_and_onboarding.module.css"; // plasmic-import: pTmuho7nuNtDcvZAf2kJgx/projectcss
import sty from "./PlasmicCodeQuickstartDisplay.module.css"; // plasmic-import: jLDeDF206V/css

createPlasmicElementProxy;

export type PlasmicCodeQuickstartDisplay__VariantMembers = {};
export type PlasmicCodeQuickstartDisplay__VariantsArgs = {};
type VariantPropType = keyof PlasmicCodeQuickstartDisplay__VariantsArgs;
export const PlasmicCodeQuickstartDisplay__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCodeQuickstartDisplay__ArgsType = {};
type ArgPropType = keyof PlasmicCodeQuickstartDisplay__ArgsType;
export const PlasmicCodeQuickstartDisplay__ArgProps = new Array<ArgPropType>();

export type PlasmicCodeQuickstartDisplay__OverridesType = {
  root?: Flex__<"div">;
  frameworkTabsContainer?: Flex__<"div">;
  frameworkTabs?: Flex__<typeof FrameworkTabs>;
  iframeContainer?: Flex__<"div">;
};

export interface DefaultCodeQuickstartDisplayProps {
  className?: string;
}

const $$ = {};

function PlasmicCodeQuickstartDisplay__RenderFunc(props: {
  variants: PlasmicCodeQuickstartDisplay__VariantsArgs;
  args: PlasmicCodeQuickstartDisplay__ArgsType;
  overrides: PlasmicCodeQuickstartDisplay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"frameworkTabsContainer"}
        data-plasmic-override={overrides.frameworkTabsContainer}
        className={classNames(projectcss.all, sty.frameworkTabsContainer)}
      >
        <FrameworkTabs
          data-plasmic-name={"frameworkTabs"}
          data-plasmic-override={overrides.frameworkTabs}
          className={classNames("__wab_instance", sty.frameworkTabs)}
        />
      </div>
      <div
        data-plasmic-name={"iframeContainer"}
        data-plasmic-override={overrides.iframeContainer}
        className={classNames(projectcss.all, sty.iframeContainer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "frameworkTabsContainer", "frameworkTabs", "iframeContainer"],
  frameworkTabsContainer: ["frameworkTabsContainer", "frameworkTabs"],
  frameworkTabs: ["frameworkTabs"],
  iframeContainer: ["iframeContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frameworkTabsContainer: "div";
  frameworkTabs: typeof FrameworkTabs;
  iframeContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCodeQuickstartDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCodeQuickstartDisplay__VariantsArgs;
    args?: PlasmicCodeQuickstartDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCodeQuickstartDisplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCodeQuickstartDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCodeQuickstartDisplay__ArgProps,
          internalVariantPropNames: PlasmicCodeQuickstartDisplay__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCodeQuickstartDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCodeQuickstartDisplay";
  } else {
    func.displayName = `PlasmicCodeQuickstartDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicCodeQuickstartDisplay = Object.assign(
  // Top-level PlasmicCodeQuickstartDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frameworkTabsContainer: makeNodeComponent("frameworkTabsContainer"),
    frameworkTabs: makeNodeComponent("frameworkTabs"),
    iframeContainer: makeNodeComponent("iframeContainer"),

    // Metadata about props expected for PlasmicCodeQuickstartDisplay
    internalVariantProps: PlasmicCodeQuickstartDisplay__VariantProps,
    internalArgProps: PlasmicCodeQuickstartDisplay__ArgProps,
  }
);

export default PlasmicCodeQuickstartDisplay;
/* prettier-ignore-end */
