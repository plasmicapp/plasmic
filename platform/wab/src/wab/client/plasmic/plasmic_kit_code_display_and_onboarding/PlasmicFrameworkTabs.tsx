/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pTmuho7nuNtDcvZAf2kJgx
// Component: tf_fQvs5kI8

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import FrameworkTab from "../../components/studio/code-quickstart/FrameworkTab"; // plasmic-import: aSLlLoswhi/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_code_display_and_onboarding.module.css"; // plasmic-import: pTmuho7nuNtDcvZAf2kJgx/projectcss
import sty from "./PlasmicFrameworkTabs.module.css"; // plasmic-import: tf_fQvs5kI8/css

import GraphqlIcon from "./icons/PlasmicIcon__Graphql"; // plasmic-import: tVE40jlrgY/icon
import NextjsIcon from "./icons/PlasmicIcon__Nextjs"; // plasmic-import: XYB65iJ0Dd/icon
import ReactIcon from "./icons/PlasmicIcon__React"; // plasmic-import: iHJMrwqTt/icon
import RestIcon from "./icons/PlasmicIcon__Rest"; // plasmic-import: 0QyD0vO4WB/icon
import gatsbyHfAyqV1Qc2 from "./images/gatsby.svg"; // plasmic-import: HFAyqV1qc2/picture
import hydrogenGyWGjPYh from "./images/hydrogen.png"; // plasmic-import: gyW-GjPYh/picture
import javascriptGlPcV90N from "./images/javascript.svg"; // plasmic-import: GLPcV-_90n/picture
import phpSk5QCRrjj2 from "./images/php.svg"; // plasmic-import: Sk5qCRrjj2/picture
import remixPuIajWxD from "./images/remix.png"; // plasmic-import: pu_IajWxD/picture
import tanstackSERoZFuGIf4 from "./images/tanstack.png"; // plasmic-import: sERoZ_FuGIf4/picture

createPlasmicElementProxy;

export type PlasmicFrameworkTabs__VariantMembers = {};
export type PlasmicFrameworkTabs__VariantsArgs = {};
type VariantPropType = keyof PlasmicFrameworkTabs__VariantsArgs;
export const PlasmicFrameworkTabs__VariantProps = new Array<VariantPropType>();

export type PlasmicFrameworkTabs__ArgsType = {
  openInNewTab?: Target;
  reactHref?: string;
  nextjsHref?: string;
  gatsbyHref?: string;
  hydrogenHref?: string;
  remixHref?: string;
  tanstackHref?: string;
  phpHref?: string;
  restHref?: string;
  graphqlHref?: string;
  jsHref?: string;
};
type ArgPropType = keyof PlasmicFrameworkTabs__ArgsType;
export const PlasmicFrameworkTabs__ArgProps = new Array<ArgPropType>(
  "openInNewTab",
  "reactHref",
  "nextjsHref",
  "gatsbyHref",
  "hydrogenHref",
  "remixHref",
  "tanstackHref",
  "phpHref",
  "restHref",
  "graphqlHref",
  "jsHref"
);

export type PlasmicFrameworkTabs__OverridesType = {
  root?: Flex__<"div">;
  react?: Flex__<typeof FrameworkTab>;
  nextjs?: Flex__<typeof FrameworkTab>;
  gatsby?: Flex__<typeof FrameworkTab>;
  hydrogen?: Flex__<typeof FrameworkTab>;
  remix?: Flex__<typeof FrameworkTab>;
  tanstack?: Flex__<typeof FrameworkTab>;
  js?: Flex__<typeof FrameworkTab>;
  php?: Flex__<typeof FrameworkTab>;
  rest?: Flex__<typeof FrameworkTab>;
  graphql?: Flex__<typeof FrameworkTab>;
};

export interface DefaultFrameworkTabsProps {
  openInNewTab?: Target;
  reactHref?: string;
  nextjsHref?: string;
  gatsbyHref?: string;
  hydrogenHref?: string;
  remixHref?: string;
  tanstackHref?: string;
  phpHref?: string;
  restHref?: string;
  graphqlHref?: string;
  jsHref?: string;
  className?: string;
}

const $$ = {};

function PlasmicFrameworkTabs__RenderFunc(props: {
  variants: PlasmicFrameworkTabs__VariantsArgs;
  args: PlasmicFrameworkTabs__ArgsType;
  overrides: PlasmicFrameworkTabs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <FrameworkTab
        data-plasmic-name={"react"}
        data-plasmic-override={overrides.react}
        className={classNames("__wab_instance", sty.react)}
        destination={args.reactHref}
        logo={
          <ReactIcon
            className={classNames(projectcss.all, sty.svg__hNQF)}
            role={"img"}
          />
        }
        name={"React"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"nextjs"}
        data-plasmic-override={overrides.nextjs}
        className={classNames("__wab_instance", sty.nextjs)}
        destination={args.nextjsHref}
        logo={
          <NextjsIcon
            className={classNames(projectcss.all, sty.svg__kovLr)}
            role={"img"}
          />
        }
        name={"Next.js"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"gatsby"}
        data-plasmic-override={overrides.gatsby}
        className={classNames("__wab_instance", sty.gatsby)}
        destination={args.gatsbyHref}
        logo={
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__i3ZU
            )}
            src={gatsbyHfAyqV1Qc2}
          />
        }
        name={"Gatsby"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"hydrogen"}
        data-plasmic-override={overrides.hydrogen}
        className={classNames("__wab_instance", sty.hydrogen)}
        destination={args.hydrogenHref}
        logo={
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__uRy6
            )}
            src={hydrogenGyWGjPYh}
          />
        }
        name={"Hydrogen"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"remix"}
        data-plasmic-override={overrides.remix}
        className={classNames("__wab_instance", sty.remix)}
        destination={args.remixHref}
        logo={
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__ldnM
            )}
            src={remixPuIajWxD}
          />
        }
        name={"Remix"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"tanstack"}
        data-plasmic-override={overrides.tanstack}
        className={classNames("__wab_instance", sty.tanstack)}
        destination={args.remixHref}
        logo={
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__p0NiT
            )}
            src={tanstackSERoZFuGIf4}
          />
        }
        name={"TanStack"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"js"}
        data-plasmic-override={overrides.js}
        className={classNames("__wab_instance", sty.js)}
        destination={args.jsHref}
        logo={
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__mR4YS
            )}
            src={javascriptGlPcV90N}
          />
        }
        name={"JavaScript"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"php"}
        data-plasmic-override={overrides.php}
        className={classNames("__wab_instance", sty.php)}
        destination={args.phpHref}
        logo={
          <img
            alt={""}
            className={classNames(
              projectcss.all,
              projectcss.img,
              sty.img__dcs2X
            )}
            src={phpSk5QCRrjj2}
          />
        }
        name={"PHP"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"rest"}
        data-plasmic-override={overrides.rest}
        className={classNames("__wab_instance", sty.rest)}
        destination={args.restHref}
        logo={
          <RestIcon
            className={classNames(projectcss.all, sty.svg__sE64)}
            role={"img"}
          />
        }
        name={"REST API"}
        openInNewTab={args.openInNewTab}
      />

      <FrameworkTab
        data-plasmic-name={"graphql"}
        data-plasmic-override={overrides.graphql}
        className={classNames("__wab_instance", sty.graphql)}
        destination={args.graphqlHref}
        logo={
          <GraphqlIcon
            className={classNames(projectcss.all, sty.svg___5FZlj)}
            role={"img"}
          />
        }
        name={"GraphQL"}
        openInNewTab={args.openInNewTab}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "react",
    "nextjs",
    "gatsby",
    "hydrogen",
    "remix",
    "tanstack",
    "js",
    "php",
    "rest",
    "graphql",
  ],
  react: ["react"],
  nextjs: ["nextjs"],
  gatsby: ["gatsby"],
  hydrogen: ["hydrogen"],
  remix: ["remix"],
  tanstack: ["tanstack"],
  js: ["js"],
  php: ["php"],
  rest: ["rest"],
  graphql: ["graphql"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  react: typeof FrameworkTab;
  nextjs: typeof FrameworkTab;
  gatsby: typeof FrameworkTab;
  hydrogen: typeof FrameworkTab;
  remix: typeof FrameworkTab;
  tanstack: typeof FrameworkTab;
  js: typeof FrameworkTab;
  php: typeof FrameworkTab;
  rest: typeof FrameworkTab;
  graphql: typeof FrameworkTab;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFrameworkTabs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFrameworkTabs__VariantsArgs;
    args?: PlasmicFrameworkTabs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFrameworkTabs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFrameworkTabs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFrameworkTabs__ArgProps,
          internalVariantPropNames: PlasmicFrameworkTabs__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicFrameworkTabs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFrameworkTabs";
  } else {
    func.displayName = `PlasmicFrameworkTabs.${nodeName}`;
  }
  return func;
}

export const PlasmicFrameworkTabs = Object.assign(
  // Top-level PlasmicFrameworkTabs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    react: makeNodeComponent("react"),
    nextjs: makeNodeComponent("nextjs"),
    gatsby: makeNodeComponent("gatsby"),
    hydrogen: makeNodeComponent("hydrogen"),
    remix: makeNodeComponent("remix"),
    tanstack: makeNodeComponent("tanstack"),
    js: makeNodeComponent("js"),
    php: makeNodeComponent("php"),
    rest: makeNodeComponent("rest"),
    graphql: makeNodeComponent("graphql"),

    // Metadata about props expected for PlasmicFrameworkTabs
    internalVariantProps: PlasmicFrameworkTabs__VariantProps,
    internalArgProps: PlasmicFrameworkTabs__ArgProps,
  }
);

export default PlasmicFrameworkTabs;
/* prettier-ignore-end */
