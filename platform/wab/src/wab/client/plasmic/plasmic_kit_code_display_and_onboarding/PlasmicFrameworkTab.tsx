/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pTmuho7nuNtDcvZAf2kJgx
// Component: aSLlLoswhi

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_code_display_and_onboarding.module.css"; // plasmic-import: pTmuho7nuNtDcvZAf2kJgx/projectcss
import sty from "./PlasmicFrameworkTab.module.css"; // plasmic-import: aSLlLoswhi/css

createPlasmicElementProxy;

export type PlasmicFrameworkTab__VariantMembers = {
  active: "active";
};
export type PlasmicFrameworkTab__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
};
type VariantPropType = keyof PlasmicFrameworkTab__VariantsArgs;
export const PlasmicFrameworkTab__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicFrameworkTab__ArgsType = {
  name?: React.ReactNode;
  logo?: React.ReactNode;
  destination?: string;
  openInNewTab?: Target;
};
type ArgPropType = keyof PlasmicFrameworkTab__ArgsType;
export const PlasmicFrameworkTab__ArgProps = new Array<ArgPropType>(
  "name",
  "logo",
  "destination",
  "openInNewTab"
);

export type PlasmicFrameworkTab__OverridesType = {
  root?: Flex__<"a">;
  fixIconHeight?: Flex__<"div">;
};

export interface DefaultFrameworkTabProps {
  name?: React.ReactNode;
  logo?: React.ReactNode;
  destination?: string;
  openInNewTab?: Target;
  active?: SingleBooleanChoiceArg<"active">;
  className?: string;
}

const $$ = {};

function PlasmicFrameworkTab__RenderFunc(props: {
  variants: PlasmicFrameworkTab__VariantsArgs;
  args: PlasmicFrameworkTab__ArgsType;
  overrides: PlasmicFrameworkTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        sty.root,
        { [sty.rootactive]: hasVariant($state, "active", "active") }
      )}
      href={args.destination}
      platform={"react"}
      target={args.openInNewTab}
    >
      <div
        data-plasmic-name={"fixIconHeight"}
        data-plasmic-override={overrides.fixIconHeight}
        className={classNames(projectcss.all, sty.fixIconHeight, {
          [sty.fixIconHeightactive]: hasVariant($state, "active", "active"),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.logo,
        })}
      </div>
      {renderPlasmicSlot({
        defaultContents: "Framework",
        value: args.name,
        className: classNames(sty.slotTargetName, {
          [sty.slotTargetNameactive]: hasVariant($state, "active", "active"),
        }),
      })}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fixIconHeight"],
  fixIconHeight: ["fixIconHeight"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  fixIconHeight: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFrameworkTab__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFrameworkTab__VariantsArgs;
    args?: PlasmicFrameworkTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFrameworkTab__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFrameworkTab__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFrameworkTab__ArgProps,
          internalVariantPropNames: PlasmicFrameworkTab__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicFrameworkTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFrameworkTab";
  } else {
    func.displayName = `PlasmicFrameworkTab.${nodeName}`;
  }
  return func;
}

export const PlasmicFrameworkTab = Object.assign(
  // Top-level PlasmicFrameworkTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fixIconHeight: makeNodeComponent("fixIconHeight"),

    // Metadata about props expected for PlasmicFrameworkTab
    internalVariantProps: PlasmicFrameworkTab__VariantProps,
    internalArgProps: PlasmicFrameworkTab__ArgProps,
  }
);

export default PlasmicFrameworkTab;
/* prettier-ignore-end */
