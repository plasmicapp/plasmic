/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: 5cdjGaqBQ4

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import EditableResourceName from "../../components/EditableResourceName"; // plasmic-import: UttGK3xVrb/component
import ProjectListItem from "../../components/ProjectListItem"; // plasmic-import: 2FvZipCkyxl/component
import ProjectsFilter from "../../components/dashboard/ProjectsFilter"; // plasmic-import: mdX7wFJOmP/component
import ShareButton from "../../components/dashboard/ShareButton"; // plasmic-import: BOKmukuncx/component
import WorkspaceDataSources from "../../components/dashboard/WorkspaceDataSources"; // plasmic-import: O5AxABt3WN/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import { useScreenVariants as useScreenVariants_2DzYbdw5Xtx } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: 2dzYbdw5Xtx/globalVariant
import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicWorkspaceSection.module.css"; // plasmic-import: 5cdjGaqBQ4/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicWorkspaceSection__VariantMembers = {
  noProjects: "noProjects";
  accessLevel: "cantEdit";
  inTeamPage: "inTeamPage";
  canUseCms: "canUseCms";
  canUseCmsAndDataSources: "projects" | "dataSources" | "empty";
  personalWorkspace: "personalWorkspace";
};
export type PlasmicWorkspaceSection__VariantsArgs = {
  noProjects?: SingleBooleanChoiceArg<"noProjects">;
  accessLevel?: SingleChoiceArg<"cantEdit">;
  inTeamPage?: SingleBooleanChoiceArg<"inTeamPage">;
  canUseCms?: SingleBooleanChoiceArg<"canUseCms">;
  canUseCmsAndDataSources?: SingleChoiceArg<
    "projects" | "dataSources" | "empty"
  >;
  personalWorkspace?: SingleBooleanChoiceArg<"personalWorkspace">;
};
type VariantPropType = keyof PlasmicWorkspaceSection__VariantsArgs;
export const PlasmicWorkspaceSection__VariantProps = new Array<VariantPropType>(
  "noProjects",
  "accessLevel",
  "inTeamPage",
  "canUseCms",
  "canUseCmsAndDataSources",
  "personalWorkspace"
);

export type PlasmicWorkspaceSection__ArgsType = {
  children?: React.ReactNode;
  numMembers?: React.ReactNode;
  noProjectsText?: React.ReactNode;
  databases?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWorkspaceSection__ArgsType;
export const PlasmicWorkspaceSection__ArgProps = new Array<ArgPropType>(
  "children",
  "numMembers",
  "noProjectsText",
  "databases"
);

export type PlasmicWorkspaceSection__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"header">;
  editableName?: Flex__<typeof EditableResourceName>;
  actions?: Flex__<"div">;
  newProjectButton?: Flex__<typeof Button>;
  shareButton?: Flex__<typeof ShareButton>;
  projectsFilter?: Flex__<typeof ProjectsFilter>;
  moreButton?: Flex__<typeof MenuButton>;
  projectsSection?: Flex__<"div">;
  projectsTab?: Flex__<"div">;
  dataSourcesTab?: Flex__<"div">;
  h3?: Flex__<"h3">;
  newCmsButton2?: Flex__<typeof Button>;
  databases?: Flex__<typeof ProjectListItem>;
  dataSources?: Flex__<typeof WorkspaceDataSources>;
  cmsSection?: Flex__<"div">;
  newCmsButton?: Flex__<typeof Button>;
};

export interface DefaultWorkspaceSectionProps {
  children?: React.ReactNode;
  numMembers?: React.ReactNode;
  noProjectsText?: React.ReactNode;
  databases?: React.ReactNode;
  noProjects?: SingleBooleanChoiceArg<"noProjects">;
  accessLevel?: SingleChoiceArg<"cantEdit">;
  inTeamPage?: SingleBooleanChoiceArg<"inTeamPage">;
  canUseCms?: SingleBooleanChoiceArg<"canUseCms">;
  canUseCmsAndDataSources?: SingleChoiceArg<
    "projects" | "dataSources" | "empty"
  >;
  personalWorkspace?: SingleBooleanChoiceArg<"personalWorkspace">;
  className?: string;
}

const $$ = {};

function PlasmicWorkspaceSection__RenderFunc(props: {
  variants: PlasmicWorkspaceSection__VariantsArgs;
  args: PlasmicWorkspaceSection__ArgsType;
  overrides: PlasmicWorkspaceSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noProjects",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noProjects,
      },
      {
        path: "accessLevel",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.accessLevel,
      },
      {
        path: "inTeamPage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.inTeamPage,
      },
      {
        path: "canUseCms",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.canUseCms,
      },
      {
        path: "canUseCmsAndDataSources",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.canUseCmsAndDataSources,
      },
      {
        path: "personalWorkspace",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.personalWorkspace,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2DzYbdw5Xtx(),
    environment: useEnvironment(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.rootcanUseCmsAndDataSources_dataSources]: hasVariant(
            $state,
            "canUseCmsAndDataSources",
            "dataSources"
          ),
          [sty.rootcanUseCmsAndDataSources_projects]: hasVariant(
            $state,
            "canUseCmsAndDataSources",
            "projects"
          ),
          [sty.rootcanUseCms]: hasVariant($state, "canUseCms", "canUseCms"),
          [sty.rootinTeamPage]: hasVariant($state, "inTeamPage", "inTeamPage"),
          [sty.rootnoProjects]: hasVariant($state, "noProjects", "noProjects"),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__numE8, {
          [sty.freeBoxcanUseCms__numE8Kb24A]: hasVariant(
            $state,
            "canUseCms",
            "canUseCms"
          ),
          [sty.freeBoxinTeamPage__numE86NXgy]: hasVariant(
            $state,
            "inTeamPage",
            "inTeamPage"
          ),
        })}
      >
        <header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header, {
            [sty.headeraccessLevel_cantEdit]: hasVariant(
              $state,
              "accessLevel",
              "cantEdit"
            ),
            [sty.headercanUseCmsAndDataSources_dataSources]: hasVariant(
              $state,
              "canUseCmsAndDataSources",
              "dataSources"
            ),
            [sty.headercanUseCmsAndDataSources_dataSources_personalWorkspace]:
              hasVariant($state, "personalWorkspace", "personalWorkspace") &&
              hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
            [sty.headercanUseCmsAndDataSources_projects]: hasVariant(
              $state,
              "canUseCmsAndDataSources",
              "projects"
            ),
            [sty.headercanUseCms]: hasVariant($state, "canUseCms", "canUseCms"),
            [sty.headerinTeamPage]: hasVariant(
              $state,
              "inTeamPage",
              "inTeamPage"
            ),
            [sty.headerinTeamPage_canUseCms]:
              hasVariant($state, "inTeamPage", "inTeamPage") &&
              hasVariant($state, "canUseCms", "canUseCms"),
            [sty.headerpersonalWorkspace]: hasVariant(
              $state,
              "personalWorkspace",
              "personalWorkspace"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__sKiL, {
              [sty.freeBoxaccessLevel_cantEdit__sKiL50Z7A]: hasVariant(
                $state,
                "accessLevel",
                "cantEdit"
              ),
              [sty.freeBoxcanUseCmsAndDataSources_dataSources_personalWorkspace__sKiL8X0KvQx7R]:
                hasVariant($state, "personalWorkspace", "personalWorkspace") &&
                hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
              [sty.freeBoxcanUseCms__sKiLkb24A]: hasVariant(
                $state,
                "canUseCms",
                "canUseCms"
              ),
              [sty.freeBoxpersonalWorkspace__sKiLQx7R]: hasVariant(
                $state,
                "personalWorkspace",
                "personalWorkspace"
              ),
            })}
          >
            <EditableResourceName
              data-plasmic-name={"editableName"}
              data-plasmic-override={overrides.editableName}
              cantEdit={
                hasVariant($state, "accessLevel", "cantEdit") ? true : undefined
              }
              className={classNames("__wab_instance", sty.editableName, {
                [sty.editableNameaccessLevel_cantEdit]: hasVariant(
                  $state,
                  "accessLevel",
                  "cantEdit"
                ),
                [sty.editableNamecanUseCmsAndDataSources_dataSources_personalWorkspace]:
                  hasVariant(
                    $state,
                    "personalWorkspace",
                    "personalWorkspace"
                  ) &&
                  hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
                [sty.editableNamecanUseCms]: hasVariant(
                  $state,
                  "canUseCms",
                  "canUseCms"
                ),
                [sty.editableNameinTeamPage]: hasVariant(
                  $state,
                  "inTeamPage",
                  "inTeamPage"
                ),
              })}
              name={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jjhMs,
                    {
                      [sty.textcanUseCmsAndDataSources_dataSources__jjhMs8X0Kv]:
                        hasVariant(
                          $state,
                          "canUseCmsAndDataSources",
                          "dataSources"
                        ),
                    }
                  )}
                >
                  {"Untitled workspace"}
                </div>
              }
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jiCaG, {
                [sty.freeBoxpersonalWorkspace__jiCaGqx7R]: hasVariant(
                  $state,
                  "personalWorkspace",
                  "personalWorkspace"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fuUz1
                )}
              >
                {"Workspace"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oyPmf
                )}
              >
                {"\u2022"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gydIl, {
                  [sty.freeBoxpersonalWorkspace__gydIlqx7R]: hasVariant(
                    $state,
                    "personalWorkspace",
                    "personalWorkspace"
                  ),
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: "6",
                  value: args.numMembers,
                  className: classNames(sty.slotTargetNumMembers),
                })}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6XT9N,
                    {
                      [sty.textinTeamPage___6XT9N6NXgy]: hasVariant(
                        $state,
                        "inTeamPage",
                        "inTeamPage"
                      ),
                      [sty.textpersonalWorkspace___6XT9NQx7R]: hasVariant(
                        $state,
                        "personalWorkspace",
                        "personalWorkspace"
                      ),
                    }
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#706F6C" }}
                    >
                      {"members"}
                    </span>
                  </React.Fragment>
                </div>
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"actions"}
            data-plasmic-override={overrides.actions}
            hasGap={true}
            className={classNames(projectcss.all, sty.actions, {
              [sty.actionsaccessLevel_cantEdit]: hasVariant(
                $state,
                "accessLevel",
                "cantEdit"
              ),
              [sty.actionscanUseCmsAndDataSources_dataSources_personalWorkspace]:
                hasVariant($state, "personalWorkspace", "personalWorkspace") &&
                hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
              [sty.actionspersonalWorkspace]: hasVariant(
                $state,
                "personalWorkspace",
                "personalWorkspace"
              ),
            })}
          >
            <Button
              data-plasmic-name={"newProjectButton"}
              data-plasmic-override={overrides.newProjectButton}
              className={classNames("__wab_instance", sty.newProjectButton, {
                [sty.newProjectButtonaccessLevel_cantEdit]: hasVariant(
                  $state,
                  "accessLevel",
                  "cantEdit"
                ),
                [sty.newProjectButtoncanUseCmsAndDataSources_dataSources]:
                  hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
                [sty.newProjectButtoncanUseCmsAndDataSources_projects]:
                  hasVariant($state, "canUseCmsAndDataSources", "projects"),
                [sty.newProjectButtoncanUseCms]: hasVariant(
                  $state,
                  "canUseCms",
                  "canUseCms"
                ),
                [sty.newProjectButtonpersonalWorkspace]: hasVariant(
                  $state,
                  "personalWorkspace",
                  "personalWorkspace"
                ),
              })}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg___4TYeu)}
                  role={"img"}
                />
              }
              size={"wide"}
              startIcon={
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__wt5S5)}
                  role={"img"}
                />
              }
              type={["clearPrimary"]}
              withIcons={["startIcon"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Euis
                )}
              >
                {"New project"}
              </div>
            </Button>
            <ShareButton
              data-plasmic-name={"shareButton"}
              data-plasmic-override={overrides.shareButton}
              className={classNames("__wab_instance", sty.shareButton, {
                [sty.shareButtonaccessLevel_cantEdit]: hasVariant(
                  $state,
                  "accessLevel",
                  "cantEdit"
                ),
                [sty.shareButtoncanUseCmsAndDataSources_projects]: hasVariant(
                  $state,
                  "canUseCmsAndDataSources",
                  "projects"
                ),
                [sty.shareButtonpersonalWorkspace]: hasVariant(
                  $state,
                  "personalWorkspace",
                  "personalWorkspace"
                ),
              })}
            />

            {(hasVariant($state, "inTeamPage", "inTeamPage") ? false : true) ? (
              <ProjectsFilter
                data-plasmic-name={"projectsFilter"}
                data-plasmic-override={overrides.projectsFilter}
                className={classNames("__wab_instance", sty.projectsFilter, {
                  [sty.projectsFilterinTeamPage]: hasVariant(
                    $state,
                    "inTeamPage",
                    "inTeamPage"
                  ),
                })}
              />
            ) : null}
            <MenuButton
              data-plasmic-name={"moreButton"}
              data-plasmic-override={overrides.moreButton}
              className={classNames("__wab_instance", sty.moreButton, {
                [sty.moreButtonaccessLevel_cantEdit]: hasVariant(
                  $state,
                  "accessLevel",
                  "cantEdit"
                ),
                [sty.moreButtoncanUseCmsAndDataSources_dataSources]: hasVariant(
                  $state,
                  "canUseCmsAndDataSources",
                  "dataSources"
                ),
                [sty.moreButtoninTeamPage]: hasVariant(
                  $state,
                  "inTeamPage",
                  "inTeamPage"
                ),
                [sty.moreButtonpersonalWorkspace]: hasVariant(
                  $state,
                  "personalWorkspace",
                  "personalWorkspace"
                ),
              })}
              stepUp={
                hasVariant($state, "inTeamPage", "inTeamPage")
                  ? undefined
                  : undefined
              }
              withBackgroundHover={true}
            />
          </Stack__>
        </header>
        <Stack__
          as={"div"}
          data-plasmic-name={"projectsSection"}
          data-plasmic-override={overrides.projectsSection}
          hasGap={true}
          className={classNames(projectcss.all, sty.projectsSection, {
            [sty.projectsSectioncanUseCmsAndDataSources_dataSources]:
              hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
            [sty.projectsSectioncanUseCmsAndDataSources_dataSources_personalWorkspace]:
              hasVariant($state, "personalWorkspace", "personalWorkspace") &&
              hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
            [sty.projectsSectioncanUseCmsAndDataSources_projects]: hasVariant(
              $state,
              "canUseCmsAndDataSources",
              "projects"
            ),
            [sty.projectsSectioncanUseCms]: hasVariant(
              $state,
              "canUseCms",
              "canUseCms"
            ),
            [sty.projectsSectioninTeamPage]: hasVariant(
              $state,
              "inTeamPage",
              "inTeamPage"
            ),
            [sty.projectsSectionnoProjects]: hasVariant(
              $state,
              "noProjects",
              "noProjects"
            ),
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mMquk, {
              [sty.freeBoxcanUseCmsAndDataSources_dataSources__mMquk8X0Kv]:
                hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
              [sty.freeBoxcanUseCmsAndDataSources_projects__mMqukz3NM3]:
                hasVariant($state, "canUseCmsAndDataSources", "projects"),
            })}
          >
            <div
              data-plasmic-name={"projectsTab"}
              data-plasmic-override={overrides.projectsTab}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.projectsTab,
                {
                  [sty.projectsTabcanUseCmsAndDataSources_dataSources]:
                    hasVariant(
                      $state,
                      "canUseCmsAndDataSources",
                      "dataSources"
                    ),
                  [sty.projectsTabcanUseCmsAndDataSources_projects]: hasVariant(
                    $state,
                    "canUseCmsAndDataSources",
                    "projects"
                  ),
                }
              )}
            >
              {"Projects"}
            </div>
            <div
              data-plasmic-name={"dataSourcesTab"}
              data-plasmic-override={overrides.dataSourcesTab}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dataSourcesTab,
                {
                  [sty.dataSourcesTabcanUseCmsAndDataSources_dataSources]:
                    hasVariant(
                      $state,
                      "canUseCmsAndDataSources",
                      "dataSources"
                    ),
                  [sty.dataSourcesTabcanUseCmsAndDataSources_projects]:
                    hasVariant($state, "canUseCmsAndDataSources", "projects"),
                }
              )}
            >
              {hasVariant($state, "canUseCmsAndDataSources", "dataSources")
                ? "Integrations"
                : hasVariant($state, "canUseCmsAndDataSources", "projects")
                ? "Integrations"
                : "Data sources"}
            </div>
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__taBnm, {
              [sty.freeBoxnoProjects__taBnmPq4Fx]: hasVariant(
                $state,
                "noProjects",
                "noProjects"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bQefr
                  )}
                >
                  {"This workspace has no projects."}
                </div>
              ),
              value: args.noProjectsText,
              className: classNames(sty.slotTargetNoProjectsText, {
                [sty.slotTargetNoProjectsTextnoProjects]: hasVariant(
                  $state,
                  "noProjects",
                  "noProjects"
                ),
              }),
            })}
          </div>
          {(
            hasVariant($state, "canUseCmsAndDataSources", "dataSources")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__sU2Y8, {
                [sty.freeBoxcanUseCmsAndDataSources_dataSources__sU2Y88X0Kv]:
                  hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
              })}
            >
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3,
                  {
                    [sty.h3canUseCmsAndDataSources_dataSources]: hasVariant(
                      $state,
                      "canUseCmsAndDataSources",
                      "dataSources"
                    ),
                  }
                )}
              >
                {"Content Management Systems (CMS)"}
              </h3>
              <Button
                data-plasmic-name={"newCmsButton2"}
                data-plasmic-override={overrides.newCmsButton2}
                className={classNames("__wab_instance", sty.newCmsButton2)}
                endIcon={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg__remgn)}
                    role={"img"}
                  />
                }
                startIcon={
                  <PlusIcon
                    className={classNames(projectcss.all, sty.svg__nary)}
                    role={"img"}
                  />
                }
                type={["clear"]}
                withIcons={["startIcon"]}
              >
                {"New CMS"}
              </Button>
            </div>
          ) : null}
          {(
            hasVariant($state, "canUseCmsAndDataSources", "dataSources")
              ? false
              : hasVariant($state, "noProjects", "noProjects")
              ? false
              : true
          )
            ? renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <ProjectListItem timestamp={"updated 1h ago"} />

                    <ProjectListItem
                      className={classNames(
                        "__wab_instance",
                        sty.projectListItem__nTlut
                      )}
                      timestamp={"updated 1h ago"}
                    />

                    <ProjectListItem
                      className={classNames(
                        "__wab_instance",
                        sty.projectListItem__iHcq
                      )}
                      timestamp={"updated 1h ago"}
                    />
                  </React.Fragment>
                ),
                value: args.children,
              })
            : null}
          {(
            hasVariant($state, "canUseCmsAndDataSources", "dataSources")
              ? true
              : false
          ) ? (
            <ProjectListItem
              data-plasmic-name={"databases"}
              data-plasmic-override={overrides.databases}
              className={classNames("__wab_instance", sty.databases, {
                [sty.databasescanUseCmsAndDataSources_dataSources]: hasVariant(
                  $state,
                  "canUseCmsAndDataSources",
                  "dataSources"
                ),
              })}
              timestamp={"updated 1h ago"}
            />
          ) : null}
          {(
            hasVariant($state, "canUseCmsAndDataSources", "dataSources")
              ? true
              : false
          ) ? (
            <WorkspaceDataSources
              data-plasmic-name={"dataSources"}
              data-plasmic-override={overrides.dataSources}
              className={classNames("__wab_instance", sty.dataSources, {
                [sty.dataSourcescanUseCmsAndDataSources_dataSources]:
                  hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
              })}
            />
          ) : null}
        </Stack__>
        {(hasVariant($state, "canUseCms", "canUseCms") ? true : false) ? (
          <div
            data-plasmic-name={"cmsSection"}
            data-plasmic-override={overrides.cmsSection}
            className={classNames(projectcss.all, sty.cmsSection, {
              [sty.cmsSectioncanUseCmsAndDataSources_dataSources]: hasVariant(
                $state,
                "canUseCmsAndDataSources",
                "dataSources"
              ),
              [sty.cmsSectioncanUseCmsAndDataSources_projects]: hasVariant(
                $state,
                "canUseCmsAndDataSources",
                "projects"
              ),
              [sty.cmsSectioncanUseCms]: hasVariant(
                $state,
                "canUseCms",
                "canUseCms"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pxyYv, {
                [sty.freeBoxcanUseCmsAndDataSources_dataSources__pxyYv8X0Kv]:
                  hasVariant($state, "canUseCmsAndDataSources", "dataSources"),
                [sty.freeBoxcanUseCmsAndDataSources_empty__pxyYvosTzO]:
                  hasVariant($state, "canUseCmsAndDataSources", "empty"),
                [sty.freeBoxcanUseCmsAndDataSources_projects__pxyYvz3NM3]:
                  hasVariant($state, "canUseCmsAndDataSources", "projects"),
                [sty.freeBoxcanUseCms__pxyYVkb24A]: hasVariant(
                  $state,
                  "canUseCms",
                  "canUseCms"
                ),
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__fhW6O, {
                  [sty.freeBoxcanUseCmsAndDataSources_empty_canUseCms__fhW6OOsTzOKb24A]:
                    hasVariant($state, "canUseCms", "canUseCms") &&
                    hasVariant($state, "canUseCmsAndDataSources", "empty"),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x0AT1,
                    {
                      [sty.textcanUseCmsAndDataSources_dataSources__x0AT18X0Kv]:
                        hasVariant(
                          $state,
                          "canUseCmsAndDataSources",
                          "dataSources"
                        ),
                    }
                  )}
                >
                  {hasVariant($state, "canUseCmsAndDataSources", "dataSources")
                    ? "Content Management Systems (CMS)"
                    : "Workspace CMSs"}
                </div>
                <Button
                  data-plasmic-name={"newCmsButton"}
                  data-plasmic-override={overrides.newCmsButton}
                  className={classNames("__wab_instance", sty.newCmsButton, {
                    [sty.newCmsButtonaccessLevel_cantEdit]: hasVariant(
                      $state,
                      "accessLevel",
                      "cantEdit"
                    ),
                    [sty.newCmsButtoncanUseCmsAndDataSources_dataSources]:
                      hasVariant(
                        $state,
                        "canUseCmsAndDataSources",
                        "dataSources"
                      ),
                  })}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__woNvm)}
                      role={"img"}
                    />
                  }
                  size={"wide"}
                  startIcon={
                    <PlusIcon
                      className={classNames(projectcss.all, sty.svg__liIIg)}
                      role={"img"}
                    />
                  }
                  type={["clear"]}
                  withIcons={["startIcon"]}
                >
                  {"New CMS"}
                </Button>
              </div>
              {renderPlasmicSlot({
                defaultContents: "This workspace has no CMSs.",
                value: args.databases,
                className: classNames(sty.slotTargetDatabases, {
                  [sty.slotTargetDatabasescanUseCmsAndDataSources_empty]:
                    hasVariant($state, "canUseCmsAndDataSources", "empty"),
                  [sty.slotTargetDatabasescanUseCmsAndDataSources_empty_canUseCms]:
                    hasVariant($state, "canUseCms", "canUseCms") &&
                    hasVariant($state, "canUseCmsAndDataSources", "empty"),
                }),
              })}
            </Stack__>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "editableName",
    "actions",
    "newProjectButton",
    "shareButton",
    "projectsFilter",
    "moreButton",
    "projectsSection",
    "projectsTab",
    "dataSourcesTab",
    "h3",
    "newCmsButton2",
    "databases",
    "dataSources",
    "cmsSection",
    "newCmsButton",
  ],
  header: [
    "header",
    "editableName",
    "actions",
    "newProjectButton",
    "shareButton",
    "projectsFilter",
    "moreButton",
  ],
  editableName: ["editableName"],
  actions: [
    "actions",
    "newProjectButton",
    "shareButton",
    "projectsFilter",
    "moreButton",
  ],
  newProjectButton: ["newProjectButton"],
  shareButton: ["shareButton"],
  projectsFilter: ["projectsFilter"],
  moreButton: ["moreButton"],
  projectsSection: [
    "projectsSection",
    "projectsTab",
    "dataSourcesTab",
    "h3",
    "newCmsButton2",
    "databases",
    "dataSources",
  ],
  projectsTab: ["projectsTab"],
  dataSourcesTab: ["dataSourcesTab"],
  h3: ["h3"],
  newCmsButton2: ["newCmsButton2"],
  databases: ["databases"],
  dataSources: ["dataSources"],
  cmsSection: ["cmsSection", "newCmsButton"],
  newCmsButton: ["newCmsButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "header";
  editableName: typeof EditableResourceName;
  actions: "div";
  newProjectButton: typeof Button;
  shareButton: typeof ShareButton;
  projectsFilter: typeof ProjectsFilter;
  moreButton: typeof MenuButton;
  projectsSection: "div";
  projectsTab: "div";
  dataSourcesTab: "div";
  h3: "h3";
  newCmsButton2: typeof Button;
  databases: typeof ProjectListItem;
  dataSources: typeof WorkspaceDataSources;
  cmsSection: "div";
  newCmsButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWorkspaceSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWorkspaceSection__VariantsArgs;
    args?: PlasmicWorkspaceSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWorkspaceSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWorkspaceSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWorkspaceSection__ArgProps,
          internalVariantPropNames: PlasmicWorkspaceSection__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicWorkspaceSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorkspaceSection";
  } else {
    func.displayName = `PlasmicWorkspaceSection.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkspaceSection = Object.assign(
  // Top-level PlasmicWorkspaceSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    editableName: makeNodeComponent("editableName"),
    actions: makeNodeComponent("actions"),
    newProjectButton: makeNodeComponent("newProjectButton"),
    shareButton: makeNodeComponent("shareButton"),
    projectsFilter: makeNodeComponent("projectsFilter"),
    moreButton: makeNodeComponent("moreButton"),
    projectsSection: makeNodeComponent("projectsSection"),
    projectsTab: makeNodeComponent("projectsTab"),
    dataSourcesTab: makeNodeComponent("dataSourcesTab"),
    h3: makeNodeComponent("h3"),
    newCmsButton2: makeNodeComponent("newCmsButton2"),
    databases: makeNodeComponent("databases"),
    dataSources: makeNodeComponent("dataSources"),
    cmsSection: makeNodeComponent("cmsSection"),
    newCmsButton: makeNodeComponent("newCmsButton"),

    // Metadata about props expected for PlasmicWorkspaceSection
    internalVariantProps: PlasmicWorkspaceSection__VariantProps,
    internalArgProps: PlasmicWorkspaceSection__ArgProps,
  }
);

export default PlasmicWorkspaceSection;
/* prettier-ignore-end */
