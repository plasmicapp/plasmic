/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: mdX7wFJOmP

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../../components/widgets/Select__Option"; // plasmic-import: rr-LWdMni2G/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicProjectsFilter.module.css"; // plasmic-import: mdX7wFJOmP/css

import CloseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import PlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import SearchSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicProjectsFilter__VariantMembers = {};
export type PlasmicProjectsFilter__VariantsArgs = {};
type VariantPropType = keyof PlasmicProjectsFilter__VariantsArgs;
export const PlasmicProjectsFilter__VariantProps = new Array<VariantPropType>();

export type PlasmicProjectsFilter__ArgsType = {};
type ArgPropType = keyof PlasmicProjectsFilter__ArgsType;
export const PlasmicProjectsFilter__ArgProps = new Array<ArgPropType>();

export type PlasmicProjectsFilter__OverridesType = {
  root?: Flex__<"div">;
  orderBySelect?: Flex__<typeof Select>;
  text?: Flex__<"div">;
  searchBox?: Flex__<typeof Textbox>;
};

export interface DefaultProjectsFilterProps {
  className?: string;
}

const $$ = {};

function PlasmicProjectsFilter__RenderFunc(props: {
  variants: PlasmicProjectsFilter__VariantsArgs;
  args: PlasmicProjectsFilter__ArgsType;
  overrides: PlasmicProjectsFilter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "orderBySelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "updatedAt",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
        }
      )}
    >
      <Select
        data-plasmic-name={"orderBySelect"}
        data-plasmic-override={overrides.orderBySelect}
        icon={
          <PlusSvgIcon
            className={classNames(projectcss.all, sty.svg__jeu7J)}
            role={"img"}
          />
        }
        onChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["orderBySelect", "value"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        placeholder={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Select..."}
          </div>
        }
        type={"wide"}
        value={generateStateValueProp($state, ["orderBySelect", "value"])}
      >
        <Select__Option
          className={classNames("__wab_instance", sty.option__uOhyt)}
          value={"updatedAt"}
        >
          {"Last modified"}
        </Select__Option>
        <Select__Option
          className={classNames("__wab_instance", sty.option__w9Sj6)}
          value={"name"}
        >
          {"Alphabetically"}
        </Select__Option>
      </Select>
      <Textbox
        data-plasmic-name={"searchBox"}
        data-plasmic-override={overrides.searchBox}
        className={classNames("__wab_instance", sty.searchBox)}
        placeholder={"Search..."}
        prefixIcon={
          <SearchSvgIcon
            className={classNames(projectcss.all, sty.svg___7Xs0L)}
            role={"img"}
          />
        }
        styleType={["bordered"]}
        suffixIcon={
          <CloseSvgIcon
            className={classNames(projectcss.all, sty.svg__wowH7)}
            role={"img"}
          />
        }
        whiteBackground={true}
        withIcons={["withPrefix"]}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "orderBySelect", "text", "searchBox"],
  orderBySelect: ["orderBySelect", "text"],
  text: ["text"],
  searchBox: ["searchBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  orderBySelect: typeof Select;
  text: "div";
  searchBox: typeof Textbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectsFilter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProjectsFilter__VariantsArgs;
    args?: PlasmicProjectsFilter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProjectsFilter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProjectsFilter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProjectsFilter__ArgProps,
          internalVariantPropNames: PlasmicProjectsFilter__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicProjectsFilter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectsFilter";
  } else {
    func.displayName = `PlasmicProjectsFilter.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectsFilter = Object.assign(
  // Top-level PlasmicProjectsFilter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    orderBySelect: makeNodeComponent("orderBySelect"),
    text: makeNodeComponent("text"),
    searchBox: makeNodeComponent("searchBox"),

    // Metadata about props expected for PlasmicProjectsFilter
    internalVariantProps: PlasmicProjectsFilter__VariantProps,
    internalArgProps: PlasmicProjectsFilter__ArgProps,
  }
);

export default PlasmicProjectsFilter;
/* prettier-ignore-end */
