/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: vM6JbvCArA

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import TeamPickerItem from "../../components/modals/TeamPickerItem"; // plasmic-import: 3naiwkyPoFj/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicTeamPicker.module.css"; // plasmic-import: vM6JbvCArA/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicTeamPicker__VariantMembers = {
  noTeams: "noTeams";
};
export type PlasmicTeamPicker__VariantsArgs = {
  noTeams?: SingleBooleanChoiceArg<"noTeams">;
};
type VariantPropType = keyof PlasmicTeamPicker__VariantsArgs;
export const PlasmicTeamPicker__VariantProps = new Array<VariantPropType>(
  "noTeams"
);

export type PlasmicTeamPicker__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicTeamPicker__ArgsType;
export const PlasmicTeamPicker__ArgProps = new Array<ArgPropType>("children");

export type PlasmicTeamPicker__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a">;
  newTeamName?: Flex__<"input">;
  createTeamButton?: Flex__<typeof Button>;
};

export interface DefaultTeamPickerProps {
  children?: React.ReactNode;
  noTeams?: SingleBooleanChoiceArg<"noTeams">;
  className?: string;
}

const $$ = {};

function PlasmicTeamPicker__RenderFunc(props: {
  variants: PlasmicTeamPicker__VariantsArgs;
  args: PlasmicTeamPicker__ArgsType;
  overrides: PlasmicTeamPicker__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noTeams",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTeams,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yFvIw)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bCkKu
          )}
        >
          {"Select an organization to upgrade"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ietak
          )}
        >
          {"Upgrade account to unlock more features."}
        </div>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link
          )}
          href={"https://www.plasmic.app/pricing"}
          platform={"react"}
          target={"_blank"}
        >
          {"Learn more."}
        </PlasmicLink__>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__zbduW, {
          [sty.freeBoxnoTeams__zbduWHye8O]: hasVariant(
            $state,
            "noTeams",
            "noTeams"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <TeamPickerItem
                className={classNames(
                  "__wab_instance",
                  sty.teamPickerItem__tbmcx
                )}
              />

              <TeamPickerItem
                className={classNames(
                  "__wab_instance",
                  sty.teamPickerItem__pDvMy
                )}
              />

              <TeamPickerItem
                className={classNames(
                  "__wab_instance",
                  sty.teamPickerItem__at80Z
                )}
              />
            </React.Fragment>
          ),
          value: args.children,
        })}
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bnwG, {
          [sty.freeBoxnoTeams__bnwGHye8O]: hasVariant(
            $state,
            "noTeams",
            "noTeams"
          ),
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jAxOg)} />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__flC2V
          )}
        >
          {"or"}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__tAsEk)} />
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zdy3R)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xNslH, {
            [sty.freeBoxnoTeams__xNslHHye8O]: hasVariant(
              $state,
              "noTeams",
              "noTeams"
            ),
          })}
        >
          <input
            data-plasmic-name={"newTeamName"}
            data-plasmic-override={overrides.newTeamName}
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.newTeamName,
              {
                [sty.newTeamNamenoTeams]: hasVariant(
                  $state,
                  "noTeams",
                  "noTeams"
                ),
              }
            )}
            placeholder={"Enter organization name\u2026"}
            ref={(ref) => {
              $refs["newTeamName"] = ref;
            }}
            size={1}
            type={"text"}
            value={""}
          />
        </Stack__>
        <Button
          data-plasmic-name={"createTeamButton"}
          data-plasmic-override={overrides.createTeamButton}
          className={classNames("__wab_instance", sty.createTeamButton, {
            [sty.createTeamButtonnoTeams]: hasVariant(
              $state,
              "noTeams",
              "noTeams"
            ),
          })}
          endIcon={
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg__pg7L2)}
              role={"img"}
            />
          }
          size={"wide"}
          startIcon={
            <ArrowRightSvgIcon
              className={classNames(projectcss.all, sty.svg__huEL)}
              role={"img"}
            />
          }
          type={["primary"]}
        >
          {"Create new organization"}
        </Button>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "newTeamName", "createTeamButton"],
  link: ["link"],
  newTeamName: ["newTeamName"],
  createTeamButton: ["createTeamButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  newTeamName: "input";
  createTeamButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamPicker__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamPicker__VariantsArgs;
    args?: PlasmicTeamPicker__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeamPicker__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamPicker__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeamPicker__ArgProps,
          internalVariantPropNames: PlasmicTeamPicker__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTeamPicker__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamPicker";
  } else {
    func.displayName = `PlasmicTeamPicker.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamPicker = Object.assign(
  // Top-level PlasmicTeamPicker renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    newTeamName: makeNodeComponent("newTeamName"),
    createTeamButton: makeNodeComponent("createTeamButton"),

    // Metadata about props expected for PlasmicTeamPicker
    internalVariantProps: PlasmicTeamPicker__VariantProps,
    internalArgProps: PlasmicTeamPicker__ArgProps,
  }
);

export default PlasmicTeamPicker;
/* prettier-ignore-end */
