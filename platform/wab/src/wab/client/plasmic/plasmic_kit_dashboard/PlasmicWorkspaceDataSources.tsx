/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: O5AxABt3WN

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import DataSource from "../../components/dashboard/DataSource"; // plasmic-import: B2dxgzfI6E/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import { useScreenVariants as useScreenVariants_2DzYbdw5Xtx } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: 2dzYbdw5Xtx/globalVariant
import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicWorkspaceDataSources.module.css"; // plasmic-import: O5AxABt3WN/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicWorkspaceDataSources__VariantMembers = {
  viewer: "viewer";
  showApiKeys: "showApiKeys";
};
export type PlasmicWorkspaceDataSources__VariantsArgs = {
  viewer?: SingleBooleanChoiceArg<"viewer">;
  showApiKeys?: SingleBooleanChoiceArg<"showApiKeys">;
};
type VariantPropType = keyof PlasmicWorkspaceDataSources__VariantsArgs;
export const PlasmicWorkspaceDataSources__VariantProps =
  new Array<VariantPropType>("viewer", "showApiKeys");

export type PlasmicWorkspaceDataSources__ArgsType = {
  apiKeys?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWorkspaceDataSources__ArgsType;
export const PlasmicWorkspaceDataSources__ArgProps = new Array<ArgPropType>(
  "apiKeys"
);

export type PlasmicWorkspaceDataSources__OverridesType = {
  root?: Flex__<"div">;
  newDataSource?: Flex__<typeof Button>;
  sources?: Flex__<"div">;
  newApiKey?: Flex__<typeof Button>;
};

export interface DefaultWorkspaceDataSourcesProps {
  apiKeys?: React.ReactNode;
  viewer?: SingleBooleanChoiceArg<"viewer">;
  showApiKeys?: SingleBooleanChoiceArg<"showApiKeys">;
  className?: string;
}

const $$ = {};

function PlasmicWorkspaceDataSources__RenderFunc(props: {
  variants: PlasmicWorkspaceDataSources__VariantsArgs;
  args: PlasmicWorkspaceDataSources__ArgsType;
  overrides: PlasmicWorkspaceDataSources__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "viewer",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.viewer,
      },
      {
        path: "showApiKeys",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showApiKeys,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2DzYbdw5Xtx(),
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.rootshowApiKeys]: hasVariant(
            $state,
            "showApiKeys",
            "showApiKeys"
          ),
          [sty.rootshowApiKeys_viewer]:
            hasVariant($state, "viewer", "viewer") &&
            hasVariant($state, "showApiKeys", "showApiKeys"),
          [sty.rootviewer]: hasVariant($state, "viewer", "viewer"),
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__bnqn6)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aqvnZ,
            {
              [sty.textviewer__aqvnZka1Nj]: hasVariant(
                $state,
                "viewer",
                "viewer"
              ),
            }
          )}
        >
          {"Integrations"}
        </div>
        <Button
          data-plasmic-name={"newDataSource"}
          data-plasmic-override={overrides.newDataSource}
          className={classNames("__wab_instance", sty.newDataSource, {
            [sty.newDataSourceviewer]: hasVariant($state, "viewer", "viewer"),
          })}
          endIcon={
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg__gDqeH)}
              role={"img"}
            />
          }
          startIcon={
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobile")
                  ? PlusIcon
                  : PlusIcon
              }
              className={classNames(projectcss.all, sty.svg__cIasM)}
              role={"img"}
            />
          }
          type={
            hasVariant(globalVariants, "screen", "mobile")
              ? ["primary"]
              : ["clear"]
          }
          withIcons={
            hasVariant(globalVariants, "screen", "mobile")
              ? ["startIcon"]
              : ["startIcon"]
          }
        >
          {hasVariant(globalVariants, "screen", "mobile")
            ? "New member"
            : "New integration"}
        </Button>
      </div>
      <div
        data-plasmic-name={"sources"}
        data-plasmic-override={overrides.sources}
        className={classNames(projectcss.all, sty.sources, {
          [sty.sourcesviewer]: hasVariant($state, "viewer", "viewer"),
        })}
      >
        <DataSource
          className={classNames("__wab_instance", sty.dataSource__woPfd)}
        />

        <DataSource
          className={classNames("__wab_instance", sty.dataSource__oGtJd, {
            [sty.dataSourceviewer__oGtJDka1Nj]: hasVariant(
              $state,
              "viewer",
              "viewer"
            ),
          })}
        >
          {"Data source 2"}
        </DataSource>
      </div>
      {(
        hasVariant($state, "viewer", "viewer") &&
        hasVariant($state, "showApiKeys", "showApiKeys")
          ? false
          : hasVariant($state, "showApiKeys", "showApiKeys")
          ? true
          : hasVariant($state, "viewer", "viewer")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__sgxeZ, {
            [sty.freeBoxshowApiKeys__sgxeZ0NBw]: hasVariant(
              $state,
              "showApiKeys",
              "showApiKeys"
            ),
            [sty.freeBoxshowApiKeys_viewer__sgxeZ0NBwKa1Nj]:
              hasVariant($state, "viewer", "viewer") &&
              hasVariant($state, "showApiKeys", "showApiKeys"),
            [sty.freeBoxviewer__sgxeZka1Nj]: hasVariant(
              $state,
              "viewer",
              "viewer"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8Xwoc,
              {
                [sty.textviewer___8Xwocka1Nj]: hasVariant(
                  $state,
                  "viewer",
                  "viewer"
                ),
              }
            )}
          >
            {"API keys\n"}
          </div>
          <Button
            data-plasmic-name={"newApiKey"}
            data-plasmic-override={overrides.newApiKey}
            className={classNames("__wab_instance", sty.newApiKey, {
              [sty.newApiKeyviewer]: hasVariant($state, "viewer", "viewer"),
            })}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__pMpmB)}
                role={"img"}
              />
            }
            startIcon={
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? PlusIcon
                    : PlusIcon
                }
                className={classNames(projectcss.all, sty.svg__h7RPf)}
                role={"img"}
              />
            }
            type={
              hasVariant(globalVariants, "screen", "mobile")
                ? ["primary"]
                : ["primary"]
            }
            withIcons={
              hasVariant(globalVariants, "screen", "mobile")
                ? ["startIcon"]
                : ["startIcon"]
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2VnNh
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "New member"
                : "New API key"}
            </div>
          </Button>
        </div>
      ) : null}
      {(
        hasVariant($state, "showApiKeys", "showApiKeys")
          ? true
          : hasVariant($state, "viewer", "viewer")
          ? false
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__zi9Y9, {
            [sty.freeBoxshowApiKeys__zi9Y90NBw]: hasVariant(
              $state,
              "showApiKeys",
              "showApiKeys"
            ),
            [sty.freeBoxviewer__zi9Y9Ka1Nj]: hasVariant(
              $state,
              "viewer",
              "viewer"
            ),
          })}
        >
          {(
            hasVariant($state, "viewer", "viewer") &&
            hasVariant($state, "showApiKeys", "showApiKeys")
              ? false
              : true
          )
            ? renderPlasmicSlot({
                defaultContents: null,
                value: args.apiKeys,
              })
            : null}
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "newDataSource", "sources", "newApiKey"],
  newDataSource: ["newDataSource"],
  sources: ["sources"],
  newApiKey: ["newApiKey"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  newDataSource: typeof Button;
  sources: "div";
  newApiKey: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWorkspaceDataSources__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWorkspaceDataSources__VariantsArgs;
    args?: PlasmicWorkspaceDataSources__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWorkspaceDataSources__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWorkspaceDataSources__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWorkspaceDataSources__ArgProps,
          internalVariantPropNames: PlasmicWorkspaceDataSources__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicWorkspaceDataSources__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorkspaceDataSources";
  } else {
    func.displayName = `PlasmicWorkspaceDataSources.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkspaceDataSources = Object.assign(
  // Top-level PlasmicWorkspaceDataSources renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    newDataSource: makeNodeComponent("newDataSource"),
    sources: makeNodeComponent("sources"),
    newApiKey: makeNodeComponent("newApiKey"),

    // Metadata about props expected for PlasmicWorkspaceDataSources
    internalVariantProps: PlasmicWorkspaceDataSources__VariantProps,
    internalArgProps: PlasmicWorkspaceDataSources__ArgProps,
  }
);

export default PlasmicWorkspaceDataSources;
/* prettier-ignore-end */
