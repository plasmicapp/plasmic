/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: gdLJj97tYt

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../../components/widgets/Select__Option"; // plasmic-import: rr-LWdMni2G/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicTeamMemberListItem.module.css"; // plasmic-import: gdLJj97tYt/css

import InformationSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__InformationSvg"; // plasmic-import: hqBNVBJWB/icon
import PlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicTeamMemberListItem__VariantMembers = {};
export type PlasmicTeamMemberListItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeamMemberListItem__VariantsArgs;
export const PlasmicTeamMemberListItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTeamMemberListItem__ArgsType = {
  name?: React.ReactNode;
  email?: React.ReactNode;
  lastActive?: React.ReactNode;
  numProjects?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTeamMemberListItem__ArgsType;
export const PlasmicTeamMemberListItem__ArgProps = new Array<ArgPropType>(
  "name",
  "email",
  "lastActive",
  "numProjects"
);

export type PlasmicTeamMemberListItem__OverridesType = {
  root?: Flex__<"div">;
  role?: Flex__<typeof Select>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  roleHelp?: Flex__<"svg">;
  menuButton?: Flex__<typeof MenuButton>;
};

export interface DefaultTeamMemberListItemProps {
  name?: React.ReactNode;
  email?: React.ReactNode;
  lastActive?: React.ReactNode;
  numProjects?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicTeamMemberListItem__RenderFunc(props: {
  variants: PlasmicTeamMemberListItem__VariantsArgs;
  args: PlasmicTeamMemberListItem__ArgsType;
  overrides: PlasmicTeamMemberListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "role.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lV3Y)}>
        {renderPlasmicSlot({
          defaultContents: "Name",
          value: args.name,
          className: classNames(sty.slotTargetName),
        })}
        {renderPlasmicSlot({
          defaultContents: "email@domain.com",
          value: args.email,
          className: classNames(sty.slotTargetEmail),
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__bvhPk)}>
        {renderPlasmicSlot({
          defaultContents: "1d ago",
          value: args.lastActive,
          className: classNames(sty.slotTargetLastActive),
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__yKwtR)}>
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__boT7
              )}
            >
              {"10"}
            </div>
          ),
          value: args.numProjects,
          className: classNames(sty.slotTargetNumProjects),
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__alQif)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yVnYe)}
        >
          <Select
            data-plasmic-name={"role"}
            data-plasmic-override={overrides.role}
            className={classNames("__wab_instance", sty.role)}
            icon={
              <PlusSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["role", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Select..."}
              </div>
            }
            type={"bordered"}
            value={generateStateValueProp($state, ["role", "value"])}
          >
            <Select__Option
              className={classNames("__wab_instance", sty.option__pMoLu)}
              isDisabled={true}
              value={"owner"}
            >
              {"Owner"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__rEr0)}
              value={"editor"}
            >
              {"Editor"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__vXrYx)}
              value={"designer"}
            >
              {"Designer"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__itAig)}
              value={"content"}
            >
              {"Content Creator"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__r0GbZ)}
              value={"viewer"}
            >
              {"Viewer"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option___0ByQx)}
              isDisabled={true}
              value={"none"}
            >
              {"None"}
            </Select__Option>
          </Select>
          <InformationSvgIcon
            data-plasmic-name={"roleHelp"}
            data-plasmic-override={overrides.roleHelp}
            className={classNames(projectcss.all, sty.roleHelp)}
            role={"img"}
          />
        </Stack__>
        <MenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          hoverText={"More…"}
          withBackgroundHover={true}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "role", "text", "svg", "roleHelp", "menuButton"],
  role: ["role", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  roleHelp: ["roleHelp"],
  menuButton: ["menuButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  role: typeof Select;
  text: "div";
  svg: "svg";
  roleHelp: "svg";
  menuButton: typeof MenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamMemberListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamMemberListItem__VariantsArgs;
    args?: PlasmicTeamMemberListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeamMemberListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamMemberListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeamMemberListItem__ArgProps,
          internalVariantPropNames: PlasmicTeamMemberListItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTeamMemberListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamMemberListItem";
  } else {
    func.displayName = `PlasmicTeamMemberListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamMemberListItem = Object.assign(
  // Top-level PlasmicTeamMemberListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    role: makeNodeComponent("role"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    roleHelp: makeNodeComponent("roleHelp"),
    menuButton: makeNodeComponent("menuButton"),

    // Metadata about props expected for PlasmicTeamMemberListItem
    internalVariantProps: PlasmicTeamMemberListItem__VariantProps,
    internalArgProps: PlasmicTeamMemberListItem__ArgProps,
  }
);

export default PlasmicTeamMemberListItem;
/* prettier-ignore-end */
