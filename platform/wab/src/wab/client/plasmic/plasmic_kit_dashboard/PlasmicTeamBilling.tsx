/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: MtL6MGlBxoy

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import FreeTrial from "../../components/FreeTrial"; // plasmic-import: p3GgKAlaQe/component
import PriceTierPicker from "../../components/pricing/PriceTierPicker"; // plasmic-import: Xx_WsdQKli-S/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Switch from "../../components/widgets/Switch"; // plasmic-import: b35JDgXpbiF/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicTeamBilling.module.css"; // plasmic-import: MtL6MGlBxoy/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ArrowUpRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowUpRightSvg"; // plasmic-import: N_BtK6grX/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicTeamBilling__VariantMembers = {
  showBillingError: "showBillingError";
  tier: "free" | "enterprise";
};
export type PlasmicTeamBilling__VariantsArgs = {
  showBillingError?: SingleBooleanChoiceArg<"showBillingError">;
  tier?: SingleChoiceArg<"free" | "enterprise">;
};
type VariantPropType = keyof PlasmicTeamBilling__VariantsArgs;
export const PlasmicTeamBilling__VariantProps = new Array<VariantPropType>(
  "showBillingError",
  "tier"
);

export type PlasmicTeamBilling__ArgsType = {
  billingError?: React.ReactNode;
  currentBill?: React.ReactNode;
  seatsUsed?: React.ReactNode;
  seatsPurchased?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTeamBilling__ArgsType;
export const PlasmicTeamBilling__ArgProps = new Array<ArgPropType>(
  "billingError",
  "currentBill",
  "seatsUsed",
  "seatsPurchased"
);

export type PlasmicTeamBilling__OverridesType = {
  root?: Flex__<"div">;
  learnMore?: Flex__<"a">;
  freeTrial?: Flex__<typeof FreeTrial>;
  billingFrequencyToggle?: Flex__<typeof Switch>;
  priceTierPicker?: Flex__<typeof PriceTierPicker>;
  premiumSections?: Flex__<"div">;
  h4?: Flex__<"h4">;
  billingEmail?: Flex__<"input">;
  updateBillingEmailButton?: Flex__<typeof Button>;
  changeSeatsButton?: Flex__<typeof Button>;
  changeCreditCardButton?: Flex__<typeof Button>;
  manageBilling?: Flex__<typeof Button>;
  cancelSubscriptionButton?: Flex__<typeof Button>;
};

export interface DefaultTeamBillingProps {
  billingError?: React.ReactNode;
  currentBill?: React.ReactNode;
  seatsUsed?: React.ReactNode;
  seatsPurchased?: React.ReactNode;
  showBillingError?: SingleBooleanChoiceArg<"showBillingError">;
  tier?: SingleChoiceArg<"free" | "enterprise">;
  className?: string;
}

const $$ = {};

function PlasmicTeamBilling__RenderFunc(props: {
  variants: PlasmicTeamBilling__VariantsArgs;
  args: PlasmicTeamBilling__ArgsType;
  overrides: PlasmicTeamBilling__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showBillingError",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showBillingError,
      },
      {
        path: "tier",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tier,
      },
      {
        path: "billingFrequencyToggle.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => "isChecked",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.rootshowBillingError]: hasVariant(
            $state,
            "showBillingError",
            "showBillingError"
          ),
          [sty.roottier_free]: hasVariant($state, "tier", "free"),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__nOs6U, {
          [sty.freeBoxshowBillingError__nOs6UXmPkf]: hasVariant(
            $state,
            "showBillingError",
            "showBillingError"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "ERROR: Cannot process payment",
          value: args.billingError,
          className: classNames(sty.slotTargetBillingError),
        })}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__ftaU, {
          [sty.freeBoxshowBillingError__ftaUXmPkf]: hasVariant(
            $state,
            "showBillingError",
            "showBillingError"
          ),
          [sty.freeBoxtier_free__ftaUxEnAp]: hasVariant($state, "tier", "free"),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xXxvr)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___7YcIa)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___70ASv
              )}
            >
              {"Account Plan"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2PErC)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qCvxa,
                  {
                    [sty.textshowBillingError__qCvxaXmPkf]: hasVariant(
                      $state,
                      "showBillingError",
                      "showBillingError"
                    ),
                  }
                )}
              >
                {"Pick a plan that fits your workflow."}
              </div>
              <PlasmicLink__
                data-plasmic-name={"learnMore"}
                data-plasmic-override={overrides.learnMore}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.learnMore
                )}
                href={"https://www.plasmic.app/pricing"}
                platform={"react"}
                target={"_blank"}
              >
                {"Learn more."}
              </PlasmicLink__>
            </Stack__>
          </div>
          {(hasVariant($state, "tier", "free") ? true : false) ? (
            <FreeTrial
              data-plasmic-name={"freeTrial"}
              data-plasmic-override={overrides.freeTrial}
              accountSection={true}
              className={classNames("__wab_instance", sty.freeTrial, {
                [sty.freeTrialtier_free]: hasVariant($state, "tier", "free"),
              })}
            />
          ) : null}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fQ70J, {
              [sty.freeBoxtier_enterprise__fQ70J5Ph4X]: hasVariant(
                $state,
                "tier",
                "enterprise"
              ),
              [sty.freeBoxtier_free__fQ70JXEnAp]: hasVariant(
                $state,
                "tier",
                "free"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "$45/month",
              value: args.currentBill,
              className: classNames(sty.slotTargetCurrentBill),
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4Yo4
              )}
            >
              {"Recurring bill"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mOmdD)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2NKs)}
            >
              {renderPlasmicSlot({
                defaultContents: "1",
                value: args.seatsUsed,
                className: classNames(sty.slotTargetSeatsUsed),
              })}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gJjIm
                )}
              >
                {"of"}
              </div>
              {renderPlasmicSlot({
                defaultContents: "3",
                value: args.seatsPurchased,
                className: classNames(sty.slotTargetSeatsPurchased),
              })}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iz26I
                )}
              >
                {"seats used"}
              </div>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ofLuw
              )}
            >
              {"Current usage"}
            </div>
          </Stack__>
        </Stack__>
        <Switch
          data-plasmic-name={"billingFrequencyToggle"}
          data-plasmic-override={overrides.billingFrequencyToggle}
          className={classNames("__wab_instance", sty.billingFrequencyToggle)}
          isChecked={
            generateStateValueProp($state, [
              "billingFrequencyToggle",
              "isChecked",
            ]) ?? false
          }
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, [
                "billingFrequencyToggle",
                "isChecked",
              ])(eventArgs[0]);
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0IM
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 500 }}
              >
                {"Annual Billing"}
              </span>
              <React.Fragment>{" (Save 20%)"}</React.Fragment>
            </React.Fragment>
          </div>
        </Switch>
      </div>
      <PriceTierPicker
        data-plasmic-name={"priceTierPicker"}
        data-plasmic-override={overrides.priceTierPicker}
        className={classNames("__wab_instance", sty.priceTierPicker, {
          [sty.priceTierPickershowBillingError]: hasVariant(
            $state,
            "showBillingError",
            "showBillingError"
          ),
          [sty.priceTierPickertier_enterprise]: hasVariant(
            $state,
            "tier",
            "enterprise"
          ),
          [sty.priceTierPickertier_free]: hasVariant($state, "tier", "free"),
        })}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"premiumSections"}
        data-plasmic-override={overrides.premiumSections}
        hasGap={true}
        className={classNames(projectcss.all, sty.premiumSections, {
          [sty.premiumSectionstier_free]: hasVariant($state, "tier", "free"),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__egD9R)}
        >
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4
            )}
          >
            {"Preferences"}
          </h4>
          <div className={classNames(projectcss.all, sty.freeBox__sDa4Q)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oz3Ad)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dsQj7
                )}
              >
                {"Billing email"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4WK2C)}
              >
                <input
                  data-plasmic-name={"billingEmail"}
                  data-plasmic-override={overrides.billingEmail}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.billingEmail
                  )}
                  placeholder={"Enter…"}
                  ref={(ref) => {
                    $refs["billingEmail"] = ref;
                  }}
                  size={1}
                  type={"email"}
                  value={""}
                />

                <Button
                  data-plasmic-name={"updateBillingEmailButton"}
                  data-plasmic-override={overrides.updateBillingEmailButton}
                  className={classNames(
                    "__wab_instance",
                    sty.updateBillingEmailButton
                  )}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__lL73)}
                      role={"img"}
                    />
                  }
                  size={"wide"}
                  startIcon={
                    <ArrowRightSvgIcon
                      className={classNames(projectcss.all, sty.svg__dEpin)}
                      role={"img"}
                    />
                  }
                  type={["primary"]}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vqNbp
                    )}
                  >
                    {"Update"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2CSw, {
                [sty.freeBoxshowBillingError___2CSwXmPkf]: hasVariant(
                  $state,
                  "showBillingError",
                  "showBillingError"
                ),
                [sty.freeBoxtier_enterprise___2CSw5Ph4X]: hasVariant(
                  $state,
                  "tier",
                  "enterprise"
                ),
                [sty.freeBoxtier_free___2CSwxEnAp]: hasVariant(
                  $state,
                  "tier",
                  "free"
                ),
              })}
            >
              <Button
                data-plasmic-name={"changeSeatsButton"}
                data-plasmic-override={overrides.changeSeatsButton}
                className={classNames("__wab_instance", sty.changeSeatsButton)}
                endIcon={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg__a4XtS)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightSvgIcon
                    className={classNames(projectcss.all, sty.svg__zyBz8)}
                    role={"img"}
                  />
                }
                type={["secondary"]}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uzg1X
                  )}
                >
                  {"Manage seats"}
                </div>
              </Button>
              <Button
                data-plasmic-name={"changeCreditCardButton"}
                data-plasmic-override={overrides.changeCreditCardButton}
                className={classNames(
                  "__wab_instance",
                  sty.changeCreditCardButton
                )}
                endIcon={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg__bwN41)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightSvgIcon
                    className={classNames(projectcss.all, sty.svg__g7GmU)}
                    role={"img"}
                  />
                }
                type={["secondary"]}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l6WqO
                  )}
                >
                  {"Change credit card"}
                </div>
              </Button>
              <Button
                data-plasmic-name={"manageBilling"}
                data-plasmic-override={overrides.manageBilling}
                className={classNames("__wab_instance", sty.manageBilling)}
                endIcon={
                  <ArrowUpRightSvgIcon
                    className={classNames(projectcss.all, sty.svg___7TuH)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightSvgIcon
                    className={classNames(projectcss.all, sty.svg__bOkpg)}
                    role={"img"}
                  />
                }
                type={["secondary"]}
                withIcons={["endIcon"]}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k3Dt
                  )}
                >
                  {"Manage billing"}
                </div>
              </Button>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ncYhG)}>
            <Button
              data-plasmic-name={"cancelSubscriptionButton"}
              data-plasmic-override={overrides.cancelSubscriptionButton}
              size={"wide"}
              type={["backlitError"]}
              withIcons={[]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iI7N
                )}
              >
                {"Cancel plan"}
              </div>
            </Button>
          </div>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "learnMore",
    "freeTrial",
    "billingFrequencyToggle",
    "priceTierPicker",
    "premiumSections",
    "h4",
    "billingEmail",
    "updateBillingEmailButton",
    "changeSeatsButton",
    "changeCreditCardButton",
    "manageBilling",
    "cancelSubscriptionButton",
  ],
  learnMore: ["learnMore"],
  freeTrial: ["freeTrial"],
  billingFrequencyToggle: ["billingFrequencyToggle"],
  priceTierPicker: ["priceTierPicker"],
  premiumSections: [
    "premiumSections",
    "h4",
    "billingEmail",
    "updateBillingEmailButton",
    "changeSeatsButton",
    "changeCreditCardButton",
    "manageBilling",
    "cancelSubscriptionButton",
  ],
  h4: ["h4"],
  billingEmail: ["billingEmail"],
  updateBillingEmailButton: ["updateBillingEmailButton"],
  changeSeatsButton: ["changeSeatsButton"],
  changeCreditCardButton: ["changeCreditCardButton"],
  manageBilling: ["manageBilling"],
  cancelSubscriptionButton: ["cancelSubscriptionButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  learnMore: "a";
  freeTrial: typeof FreeTrial;
  billingFrequencyToggle: typeof Switch;
  priceTierPicker: typeof PriceTierPicker;
  premiumSections: "div";
  h4: "h4";
  billingEmail: "input";
  updateBillingEmailButton: typeof Button;
  changeSeatsButton: typeof Button;
  changeCreditCardButton: typeof Button;
  manageBilling: typeof Button;
  cancelSubscriptionButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamBilling__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamBilling__VariantsArgs;
    args?: PlasmicTeamBilling__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeamBilling__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamBilling__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeamBilling__ArgProps,
          internalVariantPropNames: PlasmicTeamBilling__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTeamBilling__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamBilling";
  } else {
    func.displayName = `PlasmicTeamBilling.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamBilling = Object.assign(
  // Top-level PlasmicTeamBilling renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    learnMore: makeNodeComponent("learnMore"),
    freeTrial: makeNodeComponent("freeTrial"),
    billingFrequencyToggle: makeNodeComponent("billingFrequencyToggle"),
    priceTierPicker: makeNodeComponent("priceTierPicker"),
    premiumSections: makeNodeComponent("premiumSections"),
    h4: makeNodeComponent("h4"),
    billingEmail: makeNodeComponent("billingEmail"),
    updateBillingEmailButton: makeNodeComponent("updateBillingEmailButton"),
    changeSeatsButton: makeNodeComponent("changeSeatsButton"),
    changeCreditCardButton: makeNodeComponent("changeCreditCardButton"),
    manageBilling: makeNodeComponent("manageBilling"),
    cancelSubscriptionButton: makeNodeComponent("cancelSubscriptionButton"),

    // Metadata about props expected for PlasmicTeamBilling
    internalVariantProps: PlasmicTeamBilling__VariantProps,
    internalArgProps: PlasmicTeamBilling__ArgProps,
  }
);

export default PlasmicTeamBilling;
/* prettier-ignore-end */
