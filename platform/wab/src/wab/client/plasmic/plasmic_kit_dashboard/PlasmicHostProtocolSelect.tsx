/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: 6_CfQ5GVLku

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";
import HostProtocolSelect__Option from "../../components/HostProtocolSelect__Option"; // plasmic-import: aHgWgR3OVni/component
import HostProtocolSelect__OptionGroup from "../../components/HostProtocolSelect__OptionGroup"; // plasmic-import: FB-WsFik1_I/component
import HostProtocolSelect__Overlay from "../../components/HostProtocolSelect__Overlay"; // plasmic-import: WAelYWWWRyr/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicHostProtocolSelect.module.css"; // plasmic-import: 6_CfQ5GVLku/css

import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ChevronUpSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: i9D87DzsX/icon

createPlasmicElementProxy;

export type PlasmicHostProtocolSelect__VariantMembers = {
  showPlaceholder: "showPlaceholder";
  isOpen: "isOpen";
  isDisabled: "isDisabled";
};
export type PlasmicHostProtocolSelect__VariantsArgs = {
  showPlaceholder?: SingleBooleanChoiceArg<"showPlaceholder">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};
type VariantPropType = keyof PlasmicHostProtocolSelect__VariantsArgs;
export const PlasmicHostProtocolSelect__VariantProps =
  new Array<VariantPropType>("showPlaceholder", "isOpen", "isDisabled");

export type PlasmicHostProtocolSelect__ArgsType = {
  selectedContent?: React.ReactNode;
  placeholder?: React.ReactNode;
  children?: React.ReactNode;
  value?: "Dynamic options";
  name?: string;
  options?: any;
  onChange?: (value: string) => void;
  "aria-label"?: string;
  "aria-labelledby"?: string;
};
type ArgPropType = keyof PlasmicHostProtocolSelect__ArgsType;
export const PlasmicHostProtocolSelect__ArgProps = new Array<ArgPropType>(
  "selectedContent",
  "placeholder",
  "children",
  "value",
  "name",
  "options",
  "onChange",
  "aria-label",
  "aria-labelledby"
);

export type PlasmicHostProtocolSelect__OverridesType = {
  root?: Flex__<"div">;
  trigger?: Flex__<"button">;
  contentContainer?: Flex__<"div">;
  dropdownIcon?: Flex__<"svg">;
  overlay?: Flex__<typeof HostProtocolSelect__Overlay>;
  optionsContainer?: Flex__<"div">;
};

export interface DefaultHostProtocolSelectProps extends pp.BaseSelectProps {
  options?: any;
  "aria-label"?: string;
  "aria-labelledby"?: string;
}

const PlasmicHostProtocolSelectContext = React.createContext<
  | undefined
  | {
      variants: PlasmicHostProtocolSelect__VariantsArgs;
      args: PlasmicHostProtocolSelect__ArgsType;
    }
>(undefined);

const $$ = {};

function PlasmicHostProtocolSelect__RenderFunc(props: {
  variants: PlasmicHostProtocolSelect__VariantsArgs;
  args: PlasmicHostProtocolSelect__ArgsType;
  overrides: PlasmicHostProtocolSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showPlaceholder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showPlaceholder,
      },
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen,
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled,
      },
      {
        path: "value",
        type: "writable",
        variableType: "text",

        valueProp: "value",
        onChangeProp: "onChange",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(
    "useFocusedWithin",
    {}
  );
  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false,
    });
  const triggers = {
    focusWithinFocusVisibleWithin_root:
      isRootFocusWithin && isRootFocusVisibleWithin,
  };

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <PlasmicHostProtocolSelectContext.Provider value={{ variants, args }}>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          plasmic_plasmic_kit_pricing_css.plasmic_tokens,
          sty.root,
          {
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [plasmic_plasmic_kit_pricing_css.global_environment_website]:
              hasVariant(globalVariants, "environment", "website"),
            [sty.root___focusWithin__focusVisibleWithin]:
              triggers.focusWithinFocusVisibleWithin_root,
            [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen"),
          }
        )}
        data-plasmic-trigger-props={[
          triggerRootFocusWithinProps,
          triggerRootFocusVisibleWithinProps,
        ]}
      >
        <Stack__
          as={"button"}
          data-plasmic-name={"trigger"}
          data-plasmic-override={overrides.trigger}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.trigger,
            {
              [sty.trigger___focusWithin__focusVisibleWithin]:
                triggers.focusWithinFocusVisibleWithin_root,
              [sty.triggerisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.triggerisOpen]: hasVariant($state, "isOpen", "isOpen"),
              [sty.triggershowPlaceholder]: hasVariant(
                $state,
                "showPlaceholder",
                "showPlaceholder"
              ),
            }
          )}
          disabled={
            hasVariant($state, "isDisabled", "isDisabled") ? true : undefined
          }
          ref={(ref) => {
            $refs["trigger"] = ref;
          }}
        >
          <div
            data-plasmic-name={"contentContainer"}
            data-plasmic-override={overrides.contentContainer}
            className={classNames(projectcss.all, sty.contentContainer, {
              [sty.contentContainerisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.contentContainershowPlaceholder]: hasVariant(
                $state,
                "showPlaceholder",
                "showPlaceholder"
              ),
            })}
          >
            {(
              hasVariant($state, "showPlaceholder", "showPlaceholder")
                ? false
                : true
            )
              ? renderPlasmicSlot({
                  defaultContents: "Selected",
                  value: args.selectedContent,
                  className: classNames(sty.slotTargetSelectedContent, {
                    [sty.slotTargetSelectedContentisDisabled]: hasVariant(
                      $state,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.slotTargetSelectedContentisOpen]: hasVariant(
                      $state,
                      "isOpen",
                      "isOpen"
                    ),
                    [sty.slotTargetSelectedContentshowPlaceholder]: hasVariant(
                      $state,
                      "showPlaceholder",
                      "showPlaceholder"
                    ),
                  }),
                })
              : null}
            {(
              hasVariant($state, "showPlaceholder", "showPlaceholder")
                ? true
                : false
            )
              ? renderPlasmicSlot({
                  defaultContents: "Select\u2026",
                  value: args.placeholder,
                  className: classNames(sty.slotTargetPlaceholder, {
                    [sty.slotTargetPlaceholdershowPlaceholder]: hasVariant(
                      $state,
                      "showPlaceholder",
                      "showPlaceholder"
                    ),
                  }),
                })
              : null}
          </div>
          {(hasVariant($state, "isDisabled", "isDisabled") ? false : true) ? (
            <PlasmicIcon__
              data-plasmic-name={"dropdownIcon"}
              data-plasmic-override={overrides.dropdownIcon}
              PlasmicIconType={
                hasVariant($state, "isOpen", "isOpen")
                  ? ChevronUpSvgIcon
                  : ChevronDownSvgIcon
              }
              className={classNames(projectcss.all, sty.dropdownIcon, {
                [sty.dropdownIcon___focusWithin__focusVisibleWithin]:
                  triggers.focusWithinFocusVisibleWithin_root,
                [sty.dropdownIconisDisabled]: hasVariant(
                  $state,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.dropdownIconisOpen]: hasVariant(
                  $state,
                  "isOpen",
                  "isOpen"
                ),
                [sty.dropdownIconshowPlaceholder]: hasVariant(
                  $state,
                  "showPlaceholder",
                  "showPlaceholder"
                ),
              })}
              role={"img"}
            />
          ) : null}
        </Stack__>
        {(hasVariant($state, "isOpen", "isOpen") ? true : false) ? (
          <HostProtocolSelect__Overlay
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames("__wab_instance", sty.overlay, {
              [sty.overlayisOpen]: hasVariant($state, "isOpen", "isOpen"),
            })}
            relativePlacement={"bottom"}
          >
            <div
              data-plasmic-name={"optionsContainer"}
              data-plasmic-override={overrides.optionsContainer}
              className={classNames(projectcss.all, sty.optionsContainer, {
                [sty.optionsContainerisOpen]: hasVariant(
                  $state,
                  "isOpen",
                  "isOpen"
                ),
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <HostProtocolSelect__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__mdBtX
                      )}
                      value={"value1"}
                    >
                      {"Option 1"}
                    </HostProtocolSelect__Option>
                    <HostProtocolSelect__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option___0Skue
                      )}
                      value={"value2"}
                    >
                      {"Option 2"}
                    </HostProtocolSelect__Option>
                  </React.Fragment>
                ),
                value: args.children,
              })}
            </div>
          </HostProtocolSelect__Overlay>
        ) : null}
      </div>
    </PlasmicHostProtocolSelectContext.Provider>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseSelectProps>(
  props: P,
  ref: pp.SelectRef
) {
  if (!("options" in props)) {
    if (!("children" in props)) {
      props = {
        ...props,
        children: (
          <React.Fragment>
            <HostProtocolSelect__Option
              className={classNames("__wab_instance", sty.option__mdBtX)}
              value={"value1"}
            >
              {"Option 1"}
            </HostProtocolSelect__Option>
            <HostProtocolSelect__Option
              className={classNames("__wab_instance", sty.option___0Skue)}
              value={"value2"}
            >
              {"Option 2"}
            </HostProtocolSelect__Option>
          </React.Fragment>
        ),
      };
    }
  }
  return pp.useSelect(
    PlasmicHostProtocolSelect,
    props,
    {
      ...{
        isOpenVariant: { group: "isOpen", variant: "isOpen" },
        placeholderVariant: {
          group: "showPlaceholder",
          variant: "showPlaceholder",
        },
        isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
        triggerContentSlot: "selectedContent",
        optionsSlot: "children",
        placeholderSlot: "placeholder",
        root: "root",
        trigger: "trigger",
        overlay: "overlay",
        optionsContainer: "optionsContainer",
      },
      OptionComponent: HostProtocolSelect__Option,
      OptionGroupComponent: HostProtocolSelect__OptionGroup,
    },
    ref
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "trigger",
    "contentContainer",
    "dropdownIcon",
    "overlay",
    "optionsContainer",
  ],
  trigger: ["trigger", "contentContainer", "dropdownIcon"],
  contentContainer: ["contentContainer"],
  dropdownIcon: ["dropdownIcon"],
  overlay: ["overlay", "optionsContainer"],
  optionsContainer: ["optionsContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  trigger: "button";
  contentContainer: "div";
  dropdownIcon: "svg";
  overlay: typeof HostProtocolSelect__Overlay;
  optionsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHostProtocolSelect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHostProtocolSelect__VariantsArgs;
    args?: PlasmicHostProtocolSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHostProtocolSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHostProtocolSelect__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHostProtocolSelect__ArgProps,
          internalVariantPropNames: PlasmicHostProtocolSelect__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicHostProtocolSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHostProtocolSelect";
  } else {
    func.displayName = `PlasmicHostProtocolSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicHostProtocolSelect = Object.assign(
  // Top-level PlasmicHostProtocolSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    trigger: makeNodeComponent("trigger"),
    contentContainer: makeNodeComponent("contentContainer"),
    dropdownIcon: makeNodeComponent("dropdownIcon"),
    overlay: makeNodeComponent("overlay"),
    optionsContainer: makeNodeComponent("optionsContainer"),

    // Metadata about props expected for PlasmicHostProtocolSelect
    internalVariantProps: PlasmicHostProtocolSelect__VariantProps,
    internalArgProps: PlasmicHostProtocolSelect__ArgProps,

    // Context for sub components
    Context: PlasmicHostProtocolSelectContext,

    useBehavior,
  }
);

export default PlasmicHostProtocolSelect;
/* prettier-ignore-end */
