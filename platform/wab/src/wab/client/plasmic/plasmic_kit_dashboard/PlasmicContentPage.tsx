/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: A4UIAN_FGs

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CmsListItem from "../../components/CmsListItem"; // plasmic-import: DEllwXrn27Q/component
import CmsSection from "../../components/CmsSection"; // plasmic-import: 54ykx6A8G6T/component
import DefaultLayout from "../../components/dashboard/DefaultLayout"; // plasmic-import: nSkQWLjK-B/component
import NavTeamSection from "../../components/dashboard/NavTeamSection"; // plasmic-import: VqaN_WL-stA/component
import MenuItem from "../../components/MenuItem"; // plasmic-import: Ts79yZbRFG/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicContentPage.module.css"; // plasmic-import: A4UIAN_FGs/css

import SettingsSlidersSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SettingsSlidersSvg"; // plasmic-import: Y1oJwH9hP/icon

createPlasmicElementProxy;

export type PlasmicContentPage__VariantMembers = {};
export type PlasmicContentPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentPage__VariantsArgs;
export const PlasmicContentPage__VariantProps = new Array<VariantPropType>();

export type PlasmicContentPage__ArgsType = { modelList?: React.ReactNode };
type ArgPropType = keyof PlasmicContentPage__ArgsType;
export const PlasmicContentPage__ArgProps = new Array<ArgPropType>("modelList");

export type PlasmicContentPage__OverridesType = {
  root?: Flex__<"div">;
  defaultLayout?: Flex__<typeof DefaultLayout>;
  moreButton?: Flex__<typeof MenuButton>;
  modelNav?: Flex__<"div">;
  editModelsButton?: Flex__<"a">;
  svg?: Flex__<"svg">;
  cmsSection?: Flex__<typeof CmsSection>;
  navTeamSection?: Flex__<typeof NavTeamSection>;
};

export interface DefaultContentPageProps {
  modelList?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicContentPage__RenderFunc(props: {
  variants: PlasmicContentPage__VariantsArgs;
  args: PlasmicContentPage__ArgsType;
  overrides: PlasmicContentPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
            plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
            plasmic_plasmic_kit_pricing_css.plasmic_tokens,
            sty.root,
            {
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
              [plasmic_plasmic_kit_pricing_css.global_environment_website]:
                hasVariant(globalVariants, "environment", "website"),
            }
          )}
        >
          <DefaultLayout
            data-plasmic-name={"defaultLayout"}
            data-plasmic-override={overrides.defaultLayout}
            className={classNames("__wab_instance", sty.defaultLayout)}
            teams={
              <NavTeamSection
                data-plasmic-name={"navTeamSection"}
                data-plasmic-override={overrides.navTeamSection}
                className={classNames("__wab_instance", sty.navTeamSection)}
              />
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__zQtUe)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__crDwU
                )}
              >
                {"Content"}
              </div>
              <MenuButton
                data-plasmic-name={"moreButton"}
                data-plasmic-override={overrides.moreButton}
                className={classNames("__wab_instance", sty.moreButton)}
                hoverText={"Moreâ€¦"}
                stepUp={true}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___0HLou)}>
              <div
                data-plasmic-name={"modelNav"}
                data-plasmic-override={overrides.modelNav}
                className={classNames(projectcss.all, sty.modelNav)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qpmBb)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jpMzn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o1YhO
                      )}
                    >
                      {"Types"}
                    </div>
                    <PlasmicLink__
                      data-plasmic-name={"editModelsButton"}
                      data-plasmic-override={overrides.editModelsButton}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.editModelsButton
                      )}
                      platform={"react"}
                      title={"Manage Content Types"}
                    >
                      <SettingsSlidersSvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </PlasmicLink__>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__d2EH)}
                  >
                    {renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <MenuItem href={"#"}>{"Alpha"}</MenuItem>
                          <MenuItem href={"#"} selected={true}>
                            {"Beta"}
                          </MenuItem>
                          <MenuItem href={"#"}>{"Gamma"}</MenuItem>
                        </React.Fragment>
                      ),
                      value: args.modelList,
                    })}
                  </Stack__>
                </Stack__>
              </div>
              <CmsSection
                data-plasmic-name={"cmsSection"}
                data-plasmic-override={overrides.cmsSection}
                className={classNames("__wab_instance", sty.cmsSection)}
                subHeader={true}
              >
                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__jprb
                  )}
                  isFirstItem={true}
                  timestamp={"updated 1h ago"}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__yOduq
                  )}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__b0PfA
                  )}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__nfZj
                  )}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__k4J99
                  )}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__c016M
                  )}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem___2Yhis
                  )}
                />

                <CmsListItem
                  className={classNames(
                    "__wab_instance",
                    sty.cmsListItem__prI5C
                  )}
                />
              </CmsSection>
            </div>
          </DefaultLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "defaultLayout",
    "moreButton",
    "modelNav",
    "editModelsButton",
    "svg",
    "cmsSection",
    "navTeamSection",
  ],
  defaultLayout: [
    "defaultLayout",
    "moreButton",
    "modelNav",
    "editModelsButton",
    "svg",
    "cmsSection",
    "navTeamSection",
  ],
  moreButton: ["moreButton"],
  modelNav: ["modelNav", "editModelsButton", "svg"],
  editModelsButton: ["editModelsButton", "svg"],
  svg: ["svg"],
  cmsSection: ["cmsSection"],
  navTeamSection: ["navTeamSection"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  defaultLayout: typeof DefaultLayout;
  moreButton: typeof MenuButton;
  modelNav: "div";
  editModelsButton: "a";
  svg: "svg";
  cmsSection: typeof CmsSection;
  navTeamSection: typeof NavTeamSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentPage__VariantsArgs;
    args?: PlasmicContentPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContentPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContentPage__ArgProps,
          internalVariantPropNames: PlasmicContentPage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicContentPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContentPage";
  } else {
    func.displayName = `PlasmicContentPage.${nodeName}`;
  }
  return func;
}

export const PlasmicContentPage = Object.assign(
  // Top-level PlasmicContentPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    defaultLayout: makeNodeComponent("defaultLayout"),
    moreButton: makeNodeComponent("moreButton"),
    modelNav: makeNodeComponent("modelNav"),
    editModelsButton: makeNodeComponent("editModelsButton"),
    svg: makeNodeComponent("svg"),
    cmsSection: makeNodeComponent("cmsSection"),
    navTeamSection: makeNodeComponent("navTeamSection"),

    // Metadata about props expected for PlasmicContentPage
    internalVariantProps: PlasmicContentPage__VariantProps,
    internalArgProps: PlasmicContentPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicContentPage;
/* prettier-ignore-end */
