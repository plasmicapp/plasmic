/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: mQBPD0GccAU

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicUpsellCreditCard.module.css"; // plasmic-import: mQBPD0GccAU/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicUpsellCreditCard__VariantMembers = {};
export type PlasmicUpsellCreditCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicUpsellCreditCard__VariantsArgs;
export const PlasmicUpsellCreditCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUpsellCreditCard__ArgsType = {};
type ArgPropType = keyof PlasmicUpsellCreditCard__ArgsType;
export const PlasmicUpsellCreditCard__ArgProps = new Array<ArgPropType>();

export type PlasmicUpsellCreditCard__OverridesType = {
  root?: Flex__<"div">;
  stripeCardElement?: Flex__<"div">;
  text?: Flex__<"div">;
  spinnerContainer?: Flex__<"div">;
  submitButton?: Flex__<typeof Button>;
};

export interface DefaultUpsellCreditCardProps {
  className?: string;
}

const $$ = {};

function PlasmicUpsellCreditCard__RenderFunc(props: {
  variants: PlasmicUpsellCreditCard__VariantsArgs;
  args: PlasmicUpsellCreditCard__ArgsType;
  overrides: PlasmicUpsellCreditCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mqxSq)}
      >
        <div
          data-plasmic-name={"stripeCardElement"}
          data-plasmic-override={overrides.stripeCardElement}
          className={classNames(projectcss.all, sty.stripeCardElement)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"STRIPE CARD ELEMENT"}
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pvAE)}
        >
          <div
            data-plasmic-name={"spinnerContainer"}
            data-plasmic-override={overrides.spinnerContainer}
            className={classNames(projectcss.all, sty.spinnerContainer)}
          />

          <Button
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton)}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__fk8Ai)}
                role={"img"}
              />
            }
            size={"wide"}
            startIcon={
              <ArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__mF8R4)}
                role={"img"}
              />
            }
            type={["primary"]}
          >
            {"Submit"}
          </Button>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "stripeCardElement",
    "text",
    "spinnerContainer",
    "submitButton",
  ],
  stripeCardElement: ["stripeCardElement", "text"],
  text: ["text"],
  spinnerContainer: ["spinnerContainer"],
  submitButton: ["submitButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  stripeCardElement: "div";
  text: "div";
  spinnerContainer: "div";
  submitButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpsellCreditCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUpsellCreditCard__VariantsArgs;
    args?: PlasmicUpsellCreditCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUpsellCreditCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUpsellCreditCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUpsellCreditCard__ArgProps,
          internalVariantPropNames: PlasmicUpsellCreditCard__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicUpsellCreditCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpsellCreditCard";
  } else {
    func.displayName = `PlasmicUpsellCreditCard.${nodeName}`;
  }
  return func;
}

export const PlasmicUpsellCreditCard = Object.assign(
  // Top-level PlasmicUpsellCreditCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    stripeCardElement: makeNodeComponent("stripeCardElement"),
    text: makeNodeComponent("text"),
    spinnerContainer: makeNodeComponent("spinnerContainer"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicUpsellCreditCard
    internalVariantProps: PlasmicUpsellCreditCard__VariantProps,
    internalArgProps: PlasmicUpsellCreditCard__ArgProps,
  }
);

export default PlasmicUpsellCreditCard;
/* prettier-ignore-end */
