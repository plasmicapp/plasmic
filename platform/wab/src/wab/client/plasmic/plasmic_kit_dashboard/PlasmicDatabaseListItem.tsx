/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: G_RLd7TB5Ns

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import EditableResourceName from "../../components/EditableResourceName"; // plasmic-import: UttGK3xVrb/component
import Shared from "../../components/dashboard/Shared"; // plasmic-import: r2L4x5kulJ/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicDatabaseListItem.module.css"; // plasmic-import: G_RLd7TB5Ns/css

import DatabaseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__DatabaseSvg"; // plasmic-import: I6B50v8zj/icon

createPlasmicElementProxy;

export type PlasmicDatabaseListItem__VariantMembers = {};
export type PlasmicDatabaseListItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicDatabaseListItem__VariantsArgs;
export const PlasmicDatabaseListItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDatabaseListItem__ArgsType = { timestamp?: React.ReactNode };
type ArgPropType = keyof PlasmicDatabaseListItem__ArgsType;
export const PlasmicDatabaseListItem__ArgProps = new Array<ArgPropType>(
  "timestamp"
);

export type PlasmicDatabaseListItem__OverridesType = {
  root?: Flex__<"a">;
  left?: Flex__<"div">;
  svg?: Flex__<"svg">;
  editableName?: Flex__<typeof EditableResourceName>;
  right?: Flex__<"div">;
  shared?: Flex__<typeof Shared>;
  menuButton?: Flex__<typeof MenuButton>;
  updatedJustNow?: Flex__<"div">;
};

export interface DefaultDatabaseListItemProps {
  timestamp?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicDatabaseListItem__RenderFunc(props: {
  variants: PlasmicDatabaseListItem__VariantsArgs;
  args: PlasmicDatabaseListItem__ArgsType;
  overrides: PlasmicDatabaseListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: false,
    }
  );
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    focusVisible_root: isRootFocusVisible,
    hover_root: isRootHover,
  };

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.root___focusVisible]: triggers.focusVisible_root,
        }
      )}
      href={"#"}
      platform={"react"}
      data-plasmic-trigger-props={[
        triggerRootFocusVisibleProps,
        triggerRootHoverProps,
      ]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"left"}
        data-plasmic-override={overrides.left}
        hasGap={true}
        className={classNames(projectcss.all, sty.left, {
          [sty.left___focusVisible]: triggers.focusVisible_root,
        })}
      >
        <DatabaseSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox__na9Wj)}>
          <EditableResourceName
            data-plasmic-name={"editableName"}
            data-plasmic-override={overrides.editableName}
            name={
              triggers.hover_root ? "Untitled Project" : "Untitled Database"
            }
            state={triggers.hover_root ? "hover" : undefined}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tql95)}>
            {renderPlasmicSlot({
              defaultContents: "updated 1h ago",
              value: args.timestamp,
              className: classNames(sty.slotTargetTimestamp, {
                [sty.slotTargetTimestamp___focusVisible]:
                  triggers.focusVisible_root,
              }),
            })}
          </div>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"right"}
        data-plasmic-override={overrides.right}
        className={classNames(projectcss.all, sty.right)}
      >
        <Shared
          data-plasmic-name={"shared"}
          data-plasmic-override={overrides.shared}
          className={classNames("__wab_instance", sty.shared)}
        />

        <MenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          className={classNames("__wab_instance", sty.menuButton)}
        />
      </div>
      <div
        data-plasmic-name={"updatedJustNow"}
        data-plasmic-override={overrides.updatedJustNow}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.updatedJustNow
        )}
      >
        {"updated just now"}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "left",
    "svg",
    "editableName",
    "right",
    "shared",
    "menuButton",
    "updatedJustNow",
  ],
  left: ["left", "svg", "editableName"],
  svg: ["svg"],
  editableName: ["editableName"],
  right: ["right", "shared", "menuButton"],
  shared: ["shared"],
  menuButton: ["menuButton"],
  updatedJustNow: ["updatedJustNow"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  left: "div";
  svg: "svg";
  editableName: typeof EditableResourceName;
  right: "div";
  shared: typeof Shared;
  menuButton: typeof MenuButton;
  updatedJustNow: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDatabaseListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDatabaseListItem__VariantsArgs;
    args?: PlasmicDatabaseListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDatabaseListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDatabaseListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDatabaseListItem__ArgProps,
          internalVariantPropNames: PlasmicDatabaseListItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDatabaseListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDatabaseListItem";
  } else {
    func.displayName = `PlasmicDatabaseListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDatabaseListItem = Object.assign(
  // Top-level PlasmicDatabaseListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    left: makeNodeComponent("left"),
    svg: makeNodeComponent("svg"),
    editableName: makeNodeComponent("editableName"),
    right: makeNodeComponent("right"),
    shared: makeNodeComponent("shared"),
    menuButton: makeNodeComponent("menuButton"),
    updatedJustNow: makeNodeComponent("updatedJustNow"),

    // Metadata about props expected for PlasmicDatabaseListItem
    internalVariantProps: PlasmicDatabaseListItem__VariantProps,
    internalArgProps: PlasmicDatabaseListItem__ArgProps,
  }
);

export default PlasmicDatabaseListItem;
/* prettier-ignore-end */
