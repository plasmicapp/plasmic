/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: 82ZzbE4hazN

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicNavButton.module.css"; // plasmic-import: 82ZzbE4hazN/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicNavButton__VariantMembers = {
  disabled: "disabled";
  selected: "selected";
  withEndIcon: "withEndIcon";
  blue: "blue";
  violet: "violet";
  bold: "bold";
  smallIcon: "smallIcon";
};
export type PlasmicNavButton__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  selected?: SingleBooleanChoiceArg<"selected">;
  withEndIcon?: SingleBooleanChoiceArg<"withEndIcon">;
  blue?: SingleBooleanChoiceArg<"blue">;
  violet?: SingleBooleanChoiceArg<"violet">;
  bold?: SingleBooleanChoiceArg<"bold">;
  smallIcon?: SingleBooleanChoiceArg<"smallIcon">;
};
type VariantPropType = keyof PlasmicNavButton__VariantsArgs;
export const PlasmicNavButton__VariantProps = new Array<VariantPropType>(
  "disabled",
  "selected",
  "withEndIcon",
  "blue",
  "violet",
  "bold",
  "smallIcon"
);

export type PlasmicNavButton__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  href?: string;
  target?: string;
};
type ArgPropType = keyof PlasmicNavButton__ArgsType;
export const PlasmicNavButton__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon",
  "href",
  "target"
);

export type PlasmicNavButton__OverridesType = {
  root?: Flex__<"a">;
  startIconContainer?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultNavButtonProps {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  href?: string;
  target?: string;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  selected?: SingleBooleanChoiceArg<"selected">;
  withEndIcon?: SingleBooleanChoiceArg<"withEndIcon">;
  blue?: SingleBooleanChoiceArg<"blue">;
  violet?: SingleBooleanChoiceArg<"violet">;
  bold?: SingleBooleanChoiceArg<"bold">;
  smallIcon?: SingleBooleanChoiceArg<"smallIcon">;
  className?: string;
}

const $$ = {};

function PlasmicNavButton__RenderFunc(props: {
  variants: PlasmicNavButton__VariantsArgs;
  args: PlasmicNavButton__ArgsType;
  overrides: PlasmicNavButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          target: "",
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled,
      },
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected,
      },
      {
        path: "withEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withEndIcon,
      },
      {
        path: "blue",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.blue,
      },
      {
        path: "violet",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.violet,
      },
      {
        path: "bold",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bold,
      },
      {
        path: "smallIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.smallIcon,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false,
    });
  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: false,
    }
  );
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
    focusVisible_root: isRootFocusVisible,
  };

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.root___focusVisible]: triggers.focusVisible_root,
          [sty.rootblue]: hasVariant($state, "blue", "blue"),
          [sty.rootblue_violet]:
            hasVariant($state, "blue", "blue") &&
            hasVariant($state, "violet", "violet"),
          [sty.rootbold]: hasVariant($state, "bold", "bold"),
          [sty.rootdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.rootdisabled_violet]:
            hasVariant($state, "disabled", "disabled") &&
            hasVariant($state, "violet", "violet"),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
          [sty.rootselected_blue]:
            hasVariant($state, "blue", "blue") &&
            hasVariant($state, "selected", "selected"),
          [sty.rootsmallIcon]: hasVariant($state, "smallIcon", "smallIcon"),
          [sty.rootviolet]: hasVariant($state, "violet", "violet"),
          [sty.rootwithEndIcon]: hasVariant(
            $state,
            "withEndIcon",
            "withEndIcon"
          ),
        }
      )}
      href={args.href}
      platform={"react"}
      target={args.target}
      data-plasmic-trigger-props={[
        triggerRootFocusVisibleWithinProps,
        triggerRootFocusVisibleProps,
      ]}
    >
      <div
        data-plasmic-name={"startIconContainer"}
        data-plasmic-override={overrides.startIconContainer}
        className={classNames(projectcss.all, sty.startIconContainer, {
          [sty.startIconContainer___focusVisibleWithin]:
            triggers.focusVisibleWithin_root,
          [sty.startIconContainer___focusVisible]: triggers.focusVisible_root,
          [sty.startIconContainerblue]: hasVariant($state, "blue", "blue"),
          [sty.startIconContainerselected]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
          [sty.startIconContainersmallIcon]: hasVariant(
            $state,
            "smallIcon",
            "smallIcon"
          ),
          [sty.startIconContainerwithEndIcon]: hasVariant(
            $state,
            "withEndIcon",
            "withEndIcon"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <ArrowRightSvgIcon
              className={classNames(projectcss.all, sty.svg__qik2M)}
              role={"img"}
            />
          ),

          value: args.startIcon,
          className: classNames(sty.slotTargetStartIcon, {
            [sty.slotTargetStartIcon___focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.slotTargetStartIcon___focusVisible]:
              triggers.focusVisible_root,
            [sty.slotTargetStartIconblue]: hasVariant($state, "blue", "blue"),
            [sty.slotTargetStartIconselected]: hasVariant(
              $state,
              "selected",
              "selected"
            ),
            [sty.slotTargetStartIconsmallIcon]: hasVariant(
              $state,
              "smallIcon",
              "smallIcon"
            ),
            [sty.slotTargetStartIconviolet]: hasVariant(
              $state,
              "violet",
              "violet"
            ),
            [sty.slotTargetStartIconwithEndIcon]: hasVariant(
              $state,
              "withEndIcon",
              "withEndIcon"
            ),
          }),
        })}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxblue]: hasVariant($state, "blue", "blue"),
          [sty.freeBoxviolet]: hasVariant($state, "violet", "violet"),
          [sty.freeBoxwithEndIcon]: hasVariant(
            $state,
            "withEndIcon",
            "withEndIcon"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Button",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildren___focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.slotTargetChildren___focusVisible]: triggers.focusVisible_root,
            [sty.slotTargetChildrenblue]: hasVariant($state, "blue", "blue"),
            [sty.slotTargetChildrenbold]: hasVariant($state, "bold", "bold"),
            [sty.slotTargetChildrendisabled]: hasVariant(
              $state,
              "disabled",
              "disabled"
            ),
            [sty.slotTargetChildrenselected]: hasVariant(
              $state,
              "selected",
              "selected"
            ),
            [sty.slotTargetChildrenviolet]: hasVariant(
              $state,
              "violet",
              "violet"
            ),
            [sty.slotTargetChildrenwithEndIcon]: hasVariant(
              $state,
              "withEndIcon",
              "withEndIcon"
            ),
          }),
        })}
        {(hasVariant($state, "withEndIcon", "withEndIcon") ? true : false) ? (
          <div
            data-plasmic-name={"endIconContainer"}
            data-plasmic-override={overrides.endIconContainer}
            className={classNames(projectcss.all, sty.endIconContainer, {
              [sty.endIconContainerblue]: hasVariant($state, "blue", "blue"),
              [sty.endIconContainerviolet]: hasVariant(
                $state,
                "violet",
                "violet"
              ),
              [sty.endIconContainerwithEndIcon]: hasVariant(
                $state,
                "withEndIcon",
                "withEndIcon"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__siHw5)}
                  role={"img"}
                />
              ),

              value: args.endIcon,
              className: classNames(sty.slotTargetEndIcon, {
                [sty.slotTargetEndIconblue]: hasVariant($state, "blue", "blue"),
                [sty.slotTargetEndIconviolet]: hasVariant(
                  $state,
                  "violet",
                  "violet"
                ),
                [sty.slotTargetEndIconwithEndIcon]: hasVariant(
                  $state,
                  "withEndIcon",
                  "withEndIcon"
                ),
              }),
            })}
          </div>
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "startIconContainer", "freeBox", "endIconContainer"],
  startIconContainer: ["startIconContainer"],
  freeBox: ["freeBox", "endIconContainer"],
  endIconContainer: ["endIconContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  startIconContainer: "div";
  freeBox: "div";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavButton__VariantsArgs;
    args?: PlasmicNavButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavButton__ArgProps,
          internalVariantPropNames: PlasmicNavButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNavButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavButton";
  } else {
    func.displayName = `PlasmicNavButton.${nodeName}`;
  }
  return func;
}

export const PlasmicNavButton = Object.assign(
  // Top-level PlasmicNavButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    freeBox: makeNodeComponent("freeBox"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicNavButton
    internalVariantProps: PlasmicNavButton__VariantProps,
    internalArgProps: PlasmicNavButton__ArgProps,
  }
);

export default PlasmicNavButton;
/* prettier-ignore-end */
