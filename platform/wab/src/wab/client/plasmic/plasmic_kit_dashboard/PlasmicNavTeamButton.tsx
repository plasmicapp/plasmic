/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: Mql0DTa_iO

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicNavTeamButton.module.css"; // plasmic-import: Mql0DTa_iO/css

import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: UfxL0BbcEe/icon

createPlasmicElementProxy;

export type PlasmicNavTeamButton__VariantMembers = {
  selected: "selected";
  freeTrial: "freeTrial";
};
export type PlasmicNavTeamButton__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  freeTrial?: SingleBooleanChoiceArg<"freeTrial">;
};
type VariantPropType = keyof PlasmicNavTeamButton__VariantsArgs;
export const PlasmicNavTeamButton__VariantProps = new Array<VariantPropType>(
  "selected",
  "freeTrial"
);

export type PlasmicNavTeamButton__ArgsType = {
  name?: React.ReactNode;
  href?: string;
};
type ArgPropType = keyof PlasmicNavTeamButton__ArgsType;
export const PlasmicNavTeamButton__ArgProps = new Array<ArgPropType>(
  "name",
  "href"
);

export type PlasmicNavTeamButton__OverridesType = {
  root?: Flex__<"a">;
  svg?: Flex__<"svg">;
  link?: Flex__<"a">;
};

export interface DefaultNavTeamButtonProps {
  name?: React.ReactNode;
  href?: string;
  selected?: SingleBooleanChoiceArg<"selected">;
  freeTrial?: SingleBooleanChoiceArg<"freeTrial">;
  className?: string;
}

const $$ = {};

function PlasmicNavTeamButton__RenderFunc(props: {
  variants: PlasmicNavTeamButton__VariantsArgs;
  args: PlasmicNavTeamButton__ArgsType;
  overrides: PlasmicNavTeamButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected,
      },
      {
        path: "freeTrial",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.freeTrial,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={PlasmicLink__}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.rootfreeTrial]: hasVariant($state, "freeTrial", "freeTrial"),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
        }
      )}
      href={args.href}
      platform={"react"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__vFql, {
          [sty.freeBoxselected__vFqlLsQaD]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
        })}
      >
        <Icon18Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgselected]: hasVariant($state, "selected", "selected"),
          })}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__oClzd, {
          [sty.freeBoxfreeTrial__oClzdCMcVy]: hasVariant(
            $state,
            "freeTrial",
            "freeTrial"
          ),
          [sty.freeBoxselected__oClzdLsQaD]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Team name",
          value: args.name,
          className: classNames(sty.slotTargetName, {
            [sty.slotTargetNamefreeTrial]: hasVariant(
              $state,
              "freeTrial",
              "freeTrial"
            ),
            [sty.slotTargetNameselected]: hasVariant(
              $state,
              "selected",
              "selected"
            ),
          }),
        })}
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hk3YJ, {
            [sty.freeBoxfreeTrial__hk3YJcMcVy]: hasVariant(
              $state,
              "freeTrial",
              "freeTrial"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__awqZb,
              {
                [sty.textfreeTrial__awqZbCMcVy]: hasVariant(
                  $state,
                  "freeTrial",
                  "freeTrial"
                ),
                [sty.textselected__awqZbLsQaD]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                ),
              }
            )}
          >
            {"Organization"}
          </div>
          {(hasVariant($state, "freeTrial", "freeTrial") ? true : false) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gjCwb,
                {
                  [sty.textfreeTrial__gjCwbCMcVy]: hasVariant(
                    $state,
                    "freeTrial",
                    "freeTrial"
                  ),
                }
              )}
            >
              {"\u2022"}
            </div>
          ) : null}
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link,
              {
                [sty.linkfreeTrial]: hasVariant(
                  $state,
                  "freeTrial",
                  "freeTrial"
                ),
                [sty.linkselected]: hasVariant($state, "selected", "selected"),
              }
            )}
            platform={"react"}
          >
            {"Free trial"}
          </PlasmicLink__>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "link"],
  svg: ["svg"],
  link: ["link"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  svg: "svg";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavTeamButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavTeamButton__VariantsArgs;
    args?: PlasmicNavTeamButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavTeamButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavTeamButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavTeamButton__ArgProps,
          internalVariantPropNames: PlasmicNavTeamButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNavTeamButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavTeamButton";
  } else {
    func.displayName = `PlasmicNavTeamButton.${nodeName}`;
  }
  return func;
}

export const PlasmicNavTeamButton = Object.assign(
  // Top-level PlasmicNavTeamButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicNavTeamButton
    internalVariantProps: PlasmicNavTeamButton__VariantProps,
    internalArgProps: PlasmicNavTeamButton__ArgProps,
  }
);

export default PlasmicNavTeamButton;
/* prettier-ignore-end */
