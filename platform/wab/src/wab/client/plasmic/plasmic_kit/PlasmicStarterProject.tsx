/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: CCsDeqqYeoM

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicStarterProject.module.css"; // plasmic-import: CCsDeqqYeoM/css

import imageDQeKTjQst from "../plasmic_kit_dashboard/images/image.png"; // plasmic-import: dQeKTjQST/picture
import EyeSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EyeSvg"; // plasmic-import: oFYcZi8LU/icon
import CheckIcon from "./PlasmicIcon__Check"; // plasmic-import: pawp1H5YxB_3B/icon

createPlasmicElementProxy;

export type PlasmicStarterProject__VariantMembers = {
  type: "first" | "second" | "third" | "noBorder";
  icon: "withIcon" | "unnamedVariant";
  image: "withImage";
  withDescrip: "withDescrip";
  showPreview: "showPreview";
  withDropShadow: "withDropShadow";
};
export type PlasmicStarterProject__VariantsArgs = {
  type?: SingleChoiceArg<"first" | "second" | "third" | "noBorder">;
  icon?: SingleChoiceArg<"withIcon" | "unnamedVariant">;
  image?: SingleChoiceArg<"withImage">;
  withDescrip?: SingleBooleanChoiceArg<"withDescrip">;
  showPreview?: SingleBooleanChoiceArg<"showPreview">;
  withDropShadow?: SingleBooleanChoiceArg<"withDropShadow">;
};
type VariantPropType = keyof PlasmicStarterProject__VariantsArgs;
export const PlasmicStarterProject__VariantProps = new Array<VariantPropType>(
  "type",
  "icon",
  "image",
  "withDescrip",
  "showPreview",
  "withDropShadow"
);

export type PlasmicStarterProject__ArgsType = {
  instruction?: React.ReactNode;
  name?: React.ReactNode;
  preview?: React.ReactNode;
  children?: React.ReactNode;
  previewIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStarterProject__ArgsType;
export const PlasmicStarterProject__ArgProps = new Array<ArgPropType>(
  "instruction",
  "name",
  "preview",
  "children",
  "previewIcon"
);

export type PlasmicStarterProject__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<"button">;
  divider?: Flex__<"div">;
  frame317?: Flex__<"div">;
  frame308?: Flex__<"div">;
  bordersOutlinesStrokesPlaceholder?: Flex__<"div">;
};

export interface DefaultStarterProjectProps {
  instruction?: React.ReactNode;
  name?: React.ReactNode;
  preview?: React.ReactNode;
  children?: React.ReactNode;
  previewIcon?: React.ReactNode;
  type?: SingleChoiceArg<"first" | "second" | "third" | "noBorder">;
  icon?: SingleChoiceArg<"withIcon" | "unnamedVariant">;
  image?: SingleChoiceArg<"withImage">;
  withDescrip?: SingleBooleanChoiceArg<"withDescrip">;
  showPreview?: SingleBooleanChoiceArg<"showPreview">;
  withDropShadow?: SingleBooleanChoiceArg<"withDropShadow">;
  className?: string;
}

const $$ = {};

function PlasmicStarterProject__RenderFunc(props: {
  variants: PlasmicStarterProject__VariantsArgs;
  args: PlasmicStarterProject__ArgsType;
  overrides: PlasmicStarterProject__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "icon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.icon,
      },
      {
        path: "image",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.image,
      },
      {
        path: "withDescrip",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withDescrip,
      },
      {
        path: "showPreview",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showPreview,
      },
      {
        path: "withDropShadow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withDropShadow,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.rooticon_withIcon]: hasVariant($state, "icon", "withIcon"),
          [sty.rooticon_withIcon_type_first]:
            hasVariant($state, "type", "first") &&
            hasVariant($state, "icon", "withIcon"),
          [sty.rootimage_withImage]: hasVariant($state, "image", "withImage"),
          [sty.rootimage_withImage_withDescrip]:
            hasVariant($state, "image", "withImage") &&
            hasVariant($state, "withDescrip", "withDescrip"),
          [sty.roottype_first]: hasVariant($state, "type", "first"),
          [sty.roottype_noBorder]: hasVariant($state, "type", "noBorder"),
          [sty.roottype_second]: hasVariant($state, "type", "second"),
          [sty.roottype_third]: hasVariant($state, "type", "third"),
          [sty.rootwithDescrip]: hasVariant(
            $state,
            "withDescrip",
            "withDescrip"
          ),
          [sty.rootwithDropShadow]: hasVariant(
            $state,
            "withDropShadow",
            "withDropShadow"
          ),
          [sty.rootwithDropShadow_withDescrip]:
            hasVariant($state, "withDropShadow", "withDropShadow") &&
            hasVariant($state, "withDescrip", "withDescrip"),
        }
      )}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button, {
          [sty.buttonicon_withIcon]: hasVariant($state, "icon", "withIcon"),
          [sty.buttonicon_withIcon_type_first]:
            hasVariant($state, "type", "first") &&
            hasVariant($state, "icon", "withIcon"),
          [sty.buttonimage_withImage]: hasVariant($state, "image", "withImage"),
          [sty.buttonshowPreview]: hasVariant(
            $state,
            "showPreview",
            "showPreview"
          ),
          [sty.buttontype_first]: hasVariant($state, "type", "first"),
          [sty.buttontype_noBorder]: hasVariant($state, "type", "noBorder"),
          [sty.buttontype_second]: hasVariant($state, "type", "second"),
          [sty.buttontype_third]: hasVariant($state, "type", "third"),
          [sty.buttonwithDescrip]: hasVariant(
            $state,
            "withDescrip",
            "withDescrip"
          ),
          [sty.buttonwithDropShadow]: hasVariant(
            $state,
            "withDropShadow",
            "withDropShadow"
          ),
        })}
      >
        {(
          hasVariant($state, "withDropShadow", "withDropShadow")
            ? true
            : hasVariant($state, "image", "withImage")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__vAmgL, {
              [sty.freeBoxicon_withIcon__vAmgLn8MlJ]: hasVariant(
                $state,
                "icon",
                "withIcon"
              ),
              [sty.freeBoximage_withImage__vAmgLPe6Kv]: hasVariant(
                $state,
                "image",
                "withImage"
              ),
              [sty.freeBoxtype_second__vAmgLig5DJ]: hasVariant(
                $state,
                "type",
                "second"
              ),
              [sty.freeBoxwithDropShadow__vAmgLqdgSu]: hasVariant(
                $state,
                "withDropShadow",
                "withDropShadow"
              ),
            })}
            style={{ aspectRatio: "285 / 165" }}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={""}
                  className={classNames(
                    projectcss.all,
                    projectcss.img,
                    sty.img___8JfR1
                  )}
                  src={imageDQeKTjQst}
                />
              ),

              value: args.preview,
            })}
          </div>
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__yWsHw, {
            [sty.freeBoxicon_withIcon__yWsHwn8MlJ]: hasVariant(
              $state,
              "icon",
              "withIcon"
            ),
            [sty.freeBoximage_withImage__yWsHwPe6Kv]: hasVariant(
              $state,
              "image",
              "withImage"
            ),
            [sty.freeBoxshowPreview__yWsHwtvNg7]: hasVariant(
              $state,
              "showPreview",
              "showPreview"
            ),
            [sty.freeBoxtype_first__yWsHwnPTsW]: hasVariant(
              $state,
              "type",
              "first"
            ),
            [sty.freeBoxtype_noBorder__yWsHwoW4Cf]: hasVariant(
              $state,
              "type",
              "noBorder"
            ),
            [sty.freeBoxtype_second__yWsHwIg5DJ]: hasVariant(
              $state,
              "type",
              "second"
            ),
            [sty.freeBoxtype_third__yWsHw2NMma]: hasVariant(
              $state,
              "type",
              "third"
            ),
            [sty.freeBoxwithDescrip__yWsHwZYyL8]: hasVariant(
              $state,
              "withDescrip",
              "withDescrip"
            ),
            [sty.freeBoxwithDropShadow__yWsHwQdgSu]: hasVariant(
              $state,
              "withDropShadow",
              "withDropShadow"
            ),
          })}
        >
          <div
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            className={classNames(projectcss.all, sty.divider, {
              [sty.dividericon_withIcon]: hasVariant(
                $state,
                "icon",
                "withIcon"
              ),
              [sty.dividerimage_withImage]: hasVariant(
                $state,
                "image",
                "withImage"
              ),
              [sty.dividertype_first]: hasVariant($state, "type", "first"),
              [sty.dividertype_second]: hasVariant($state, "type", "second"),
              [sty.dividertype_third]: hasVariant($state, "type", "third"),
              [sty.dividerwithDropShadow]: hasVariant(
                $state,
                "withDropShadow",
                "withDropShadow"
              ),
            })}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__h0Gn, {
              [sty.freeBoxicon_withIcon__h0GNn8MlJ]: hasVariant(
                $state,
                "icon",
                "withIcon"
              ),
              [sty.freeBoxicon_withIcon_type_first__h0GNn8MlJNPTsW]:
                hasVariant($state, "icon", "withIcon") &&
                hasVariant($state, "type", "first"),
              [sty.freeBoximage_withImage__h0GnPe6Kv]: hasVariant(
                $state,
                "image",
                "withImage"
              ),
              [sty.freeBoxshowPreview__h0GNtvNg7]: hasVariant(
                $state,
                "showPreview",
                "showPreview"
              ),
              [sty.freeBoxtype_first__h0GNnPTsW]: hasVariant(
                $state,
                "type",
                "first"
              ),
              [sty.freeBoxtype_second__h0Gnig5DJ]: hasVariant(
                $state,
                "type",
                "second"
              ),
              [sty.freeBoxtype_third__h0Gn2NMma]: hasVariant(
                $state,
                "type",
                "third"
              ),
              [sty.freeBoxwithDescrip__h0GnzYyL8]: hasVariant(
                $state,
                "withDescrip",
                "withDescrip"
              ),
              [sty.freeBoxwithDropShadow__h0GnqdgSu]: hasVariant(
                $state,
                "withDropShadow",
                "withDropShadow"
              ),
            })}
          >
            {(hasVariant($state, "icon", "withIcon") ? true : false) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___15Zn9, {
                  [sty.freeBoxicon_withIcon___15Zn9N8MlJ]: hasVariant(
                    $state,
                    "icon",
                    "withIcon"
                  ),
                  [sty.freeBoxicon_withIcon_type_first___15Zn9N8MlJNPTsW]:
                    hasVariant($state, "icon", "withIcon") &&
                    hasVariant($state, "type", "first"),
                  [sty.freeBoximage_withImage___15Zn9Pe6Kv]: hasVariant(
                    $state,
                    "image",
                    "withImage"
                  ),
                  [sty.freeBoxtype_first___15Zn9NPTsW]: hasVariant(
                    $state,
                    "type",
                    "first"
                  ),
                  [sty.freeBoxtype_second_icon_withIcon___15Zn9Ig5DJN8MlJ]:
                    hasVariant($state, "icon", "withIcon") &&
                    hasVariant($state, "type", "second"),
                  [sty.freeBoxtype_third___15Zn92NMma]: hasVariant(
                    $state,
                    "type",
                    "third"
                  ),
                  [sty.freeBoxtype_third_icon_withIcon___15Zn92NMmaN8MlJ]:
                    hasVariant($state, "icon", "withIcon") &&
                    hasVariant($state, "type", "third"),
                  [sty.freeBoxwithDropShadow___15Zn9QdgSu]: hasVariant(
                    $state,
                    "withDropShadow",
                    "withDropShadow"
                  ),
                })}
              >
                {(hasVariant($state, "icon", "withIcon") ? true : false)
                  ? renderPlasmicSlot({
                      defaultContents: (
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__oYrWt)}
                          role={"img"}
                        />
                      ),

                      value: args.children,
                      className: classNames(sty.slotTargetChildren, {
                        [sty.slotTargetChildrenicon_withIcon]: hasVariant(
                          $state,
                          "icon",
                          "withIcon"
                        ),
                        [sty.slotTargetChildrenicon_withIcon_type_first]:
                          hasVariant($state, "icon", "withIcon") &&
                          hasVariant($state, "type", "first"),
                        [sty.slotTargetChildrenimage_withImage]: hasVariant(
                          $state,
                          "image",
                          "withImage"
                        ),
                        [sty.slotTargetChildrentype_second_icon_withIcon]:
                          hasVariant($state, "icon", "withIcon") &&
                          hasVariant($state, "type", "second"),
                        [sty.slotTargetChildrentype_third_icon_withIcon]:
                          hasVariant($state, "icon", "withIcon") &&
                          hasVariant($state, "type", "third"),
                        [sty.slotTargetChildrenwithDropShadow]: hasVariant(
                          $state,
                          "withDropShadow",
                          "withDropShadow"
                        ),
                      }),
                    })
                  : null}
              </div>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wHm4F, {
                [sty.freeBoxicon_withIcon__wHm4Fn8MlJ]: hasVariant(
                  $state,
                  "icon",
                  "withIcon"
                ),
                [sty.freeBoximage_withImage__wHm4FPe6Kv]: hasVariant(
                  $state,
                  "image",
                  "withImage"
                ),
                [sty.freeBoxtype_first__wHm4FnPTsW]: hasVariant(
                  $state,
                  "type",
                  "first"
                ),
                [sty.freeBoxtype_second__wHm4Fig5DJ]: hasVariant(
                  $state,
                  "type",
                  "second"
                ),
                [sty.freeBoxtype_third__wHm4F2NMma]: hasVariant(
                  $state,
                  "type",
                  "third"
                ),
                [sty.freeBoxwithDescrip__wHm4FzYyL8]: hasVariant(
                  $state,
                  "withDescrip",
                  "withDescrip"
                ),
                [sty.freeBoxwithDropShadow__wHm4FqdgSu]: hasVariant(
                  $state,
                  "withDropShadow",
                  "withDropShadow"
                ),
              })}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame317"}
                data-plasmic-override={overrides.frame317}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame317, {
                  [sty.frame317icon_withIcon]: hasVariant(
                    $state,
                    "icon",
                    "withIcon"
                  ),
                  [sty.frame317image_withImage]: hasVariant(
                    $state,
                    "image",
                    "withImage"
                  ),
                  [sty.frame317type_first]: hasVariant($state, "type", "first"),
                  [sty.frame317type_second]: hasVariant(
                    $state,
                    "type",
                    "second"
                  ),
                  [sty.frame317type_third]: hasVariant($state, "type", "third"),
                  [sty.frame317withDescrip]: hasVariant(
                    $state,
                    "withDescrip",
                    "withDescrip"
                  ),
                  [sty.frame317withDropShadow]: hasVariant(
                    $state,
                    "withDropShadow",
                    "withDropShadow"
                  ),
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fj0Dj
                      )}
                    >
                      {"3-Minute Codegen Quickstart"}
                    </div>
                  ),
                  value: args.name,
                  className: classNames(sty.slotTargetName, {
                    [sty.slotTargetNameicon_withIcon]: hasVariant(
                      $state,
                      "icon",
                      "withIcon"
                    ),
                    [sty.slotTargetNameimage_withImage]: hasVariant(
                      $state,
                      "image",
                      "withImage"
                    ),
                    [sty.slotTargetNametype_first]: hasVariant(
                      $state,
                      "type",
                      "first"
                    ),
                    [sty.slotTargetNametype_second]: hasVariant(
                      $state,
                      "type",
                      "second"
                    ),
                    [sty.slotTargetNametype_second_withDescrip]:
                      hasVariant($state, "withDescrip", "withDescrip") &&
                      hasVariant($state, "type", "second"),
                    [sty.slotTargetNametype_third]: hasVariant(
                      $state,
                      "type",
                      "third"
                    ),
                    [sty.slotTargetNamewithDescrip]: hasVariant(
                      $state,
                      "withDescrip",
                      "withDescrip"
                    ),
                    [sty.slotTargetNamewithDescrip_type_first]:
                      hasVariant($state, "withDescrip", "withDescrip") &&
                      hasVariant($state, "type", "first"),
                    [sty.slotTargetNamewithDropShadow]: hasVariant(
                      $state,
                      "withDropShadow",
                      "withDropShadow"
                    ),
                  }),
                })}
              </Stack__>
              {(
                hasVariant($state, "withDescrip", "withDescrip") ? true : false
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame308"}
                  data-plasmic-override={overrides.frame308}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame308, {
                    [sty.frame308icon_withIcon]: hasVariant(
                      $state,
                      "icon",
                      "withIcon"
                    ),
                    [sty.frame308image_withImage]: hasVariant(
                      $state,
                      "image",
                      "withImage"
                    ),
                    [sty.frame308type_first]: hasVariant(
                      $state,
                      "type",
                      "first"
                    ),
                    [sty.frame308type_second]: hasVariant(
                      $state,
                      "type",
                      "second"
                    ),
                    [sty.frame308type_third]: hasVariant(
                      $state,
                      "type",
                      "third"
                    ),
                    [sty.frame308withDescrip]: hasVariant(
                      $state,
                      "withDescrip",
                      "withDescrip"
                    ),
                    [sty.frame308withDropShadow]: hasVariant(
                      $state,
                      "withDropShadow",
                      "withDropShadow"
                    ),
                  })}
                >
                  {renderPlasmicSlot({
                    defaultContents:
                      "Strongly recommended! Plasmic's power lies in its more advanced concepts.",
                    value: args.instruction,
                    className: classNames(sty.slotTargetInstruction, {
                      [sty.slotTargetInstructionicon_withIcon]: hasVariant(
                        $state,
                        "icon",
                        "withIcon"
                      ),
                      [sty.slotTargetInstructionimage_withImage]: hasVariant(
                        $state,
                        "image",
                        "withImage"
                      ),
                      [sty.slotTargetInstructiontype_first]: hasVariant(
                        $state,
                        "type",
                        "first"
                      ),
                      [sty.slotTargetInstructiontype_second]: hasVariant(
                        $state,
                        "type",
                        "second"
                      ),
                      [sty.slotTargetInstructiontype_second_withDescrip]:
                        hasVariant($state, "withDescrip", "withDescrip") &&
                        hasVariant($state, "type", "second"),
                      [sty.slotTargetInstructiontype_third]: hasVariant(
                        $state,
                        "type",
                        "third"
                      ),
                      [sty.slotTargetInstructiontype_third_withDescrip]:
                        hasVariant($state, "type", "third") &&
                        hasVariant($state, "withDescrip", "withDescrip"),
                      [sty.slotTargetInstructionwithDescrip]: hasVariant(
                        $state,
                        "withDescrip",
                        "withDescrip"
                      ),
                      [sty.slotTargetInstructionwithDescrip_type_first]:
                        hasVariant($state, "withDescrip", "withDescrip") &&
                        hasVariant($state, "type", "first"),
                      [sty.slotTargetInstructionwithDropShadow]: hasVariant(
                        $state,
                        "withDropShadow",
                        "withDropShadow"
                      ),
                    }),
                  })}
                </Stack__>
              ) : null}
            </Stack__>
            {(hasVariant($state, "showPreview", "showPreview") ? true : false)
              ? renderPlasmicSlot({
                  defaultContents: (
                    <EyeSvgIcon
                      className={classNames(projectcss.all, sty.svg__llXDw)}
                      role={"img"}
                    />
                  ),

                  value: args.previewIcon,
                  className: classNames(sty.slotTargetPreviewIcon, {
                    [sty.slotTargetPreviewIconshowPreview]: hasVariant(
                      $state,
                      "showPreview",
                      "showPreview"
                    ),
                  }),
                })
              : null}
          </Stack__>
        </div>
        <div
          data-plasmic-name={"bordersOutlinesStrokesPlaceholder"}
          data-plasmic-override={overrides.bordersOutlinesStrokesPlaceholder}
          className={classNames(
            projectcss.all,
            sty.bordersOutlinesStrokesPlaceholder,
            {
              [sty.bordersOutlinesStrokesPlaceholdericon_withIcon]: hasVariant(
                $state,
                "icon",
                "withIcon"
              ),
              [sty.bordersOutlinesStrokesPlaceholdericon_withIcon_type_first]:
                hasVariant($state, "icon", "withIcon") &&
                hasVariant($state, "type", "first"),
              [sty.bordersOutlinesStrokesPlaceholderimage_withImage]:
                hasVariant($state, "image", "withImage"),
              [sty.bordersOutlinesStrokesPlaceholdershowPreview]: hasVariant(
                $state,
                "showPreview",
                "showPreview"
              ),
              [sty.bordersOutlinesStrokesPlaceholdertype_first]: hasVariant(
                $state,
                "type",
                "first"
              ),
              [sty.bordersOutlinesStrokesPlaceholdertype_noBorder]: hasVariant(
                $state,
                "type",
                "noBorder"
              ),
              [sty.bordersOutlinesStrokesPlaceholdertype_second]: hasVariant(
                $state,
                "type",
                "second"
              ),
              [sty.bordersOutlinesStrokesPlaceholdertype_second_withDescrip]:
                hasVariant($state, "withDescrip", "withDescrip") &&
                hasVariant($state, "type", "second"),
              [sty.bordersOutlinesStrokesPlaceholdertype_third]: hasVariant(
                $state,
                "type",
                "third"
              ),
              [sty.bordersOutlinesStrokesPlaceholdertype_third_icon_withIcon]:
                hasVariant($state, "icon", "withIcon") &&
                hasVariant($state, "type", "third"),
              [sty.bordersOutlinesStrokesPlaceholdertype_third_withDescrip]:
                hasVariant($state, "type", "third") &&
                hasVariant($state, "withDescrip", "withDescrip"),
              [sty.bordersOutlinesStrokesPlaceholderwithDescrip]: hasVariant(
                $state,
                "withDescrip",
                "withDescrip"
              ),
              [sty.bordersOutlinesStrokesPlaceholderwithDescrip_type_first]:
                hasVariant($state, "withDescrip", "withDescrip") &&
                hasVariant($state, "type", "first"),
              [sty.bordersOutlinesStrokesPlaceholderwithDropShadow]: hasVariant(
                $state,
                "withDropShadow",
                "withDropShadow"
              ),
            }
          )}
        />
      </button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "divider",
    "frame317",
    "frame308",
    "bordersOutlinesStrokesPlaceholder",
  ],
  button: [
    "button",
    "divider",
    "frame317",
    "frame308",
    "bordersOutlinesStrokesPlaceholder",
  ],
  divider: ["divider"],
  frame317: ["frame317"],
  frame308: ["frame308"],
  bordersOutlinesStrokesPlaceholder: ["bordersOutlinesStrokesPlaceholder"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  divider: "div";
  frame317: "div";
  frame308: "div";
  bordersOutlinesStrokesPlaceholder: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStarterProject__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStarterProject__VariantsArgs;
    args?: PlasmicStarterProject__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStarterProject__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStarterProject__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStarterProject__ArgProps,
          internalVariantPropNames: PlasmicStarterProject__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicStarterProject__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStarterProject";
  } else {
    func.displayName = `PlasmicStarterProject.${nodeName}`;
  }
  return func;
}

export const PlasmicStarterProject = Object.assign(
  // Top-level PlasmicStarterProject renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    divider: makeNodeComponent("divider"),
    frame317: makeNodeComponent("frame317"),
    frame308: makeNodeComponent("frame308"),
    bordersOutlinesStrokesPlaceholder: makeNodeComponent(
      "bordersOutlinesStrokesPlaceholder"
    ),

    // Metadata about props expected for PlasmicStarterProject
    internalVariantProps: PlasmicStarterProject__VariantProps,
    internalArgProps: PlasmicStarterProject__ArgProps,
  }
);

export default PlasmicStarterProject;
/* prettier-ignore-end */
