/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXkSR39sgCDWSitZxC5xFV
// Component: pA22NEzDCsn_

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicTextbox.module.css"; // plasmic-import: pA22NEzDCsn_/css

import CloseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import SearchSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicTextbox__VariantMembers = {
  disabled: "disabled";
  styleType:
    | "right"
    | "rectangular"
    | "mono"
    | "seamless"
    | "inverted"
    | "bordered"
    | "autoheight"
    | "white"
    | "unset"
    | "medium"
    | "gray"
    | "red"
    | "green"
    | "blue"
    | "purple"
    | "topLayout";
  withIcons: "withPrefix" | "withSuffix";
  error: "error";
  fontSize: "xlarge";
  fontStyle: "bold";
  noOutline: "noOutline";
  whiteBackground: "whiteBackground";
  extraPadding: "extraPadding";
};
export type PlasmicTextbox__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  styleType?: MultiChoiceArg<
    | "right"
    | "rectangular"
    | "mono"
    | "seamless"
    | "inverted"
    | "bordered"
    | "autoheight"
    | "white"
    | "unset"
    | "medium"
    | "gray"
    | "red"
    | "green"
    | "blue"
    | "purple"
    | "topLayout"
  >;
  withIcons?: MultiChoiceArg<"withPrefix" | "withSuffix">;
  error?: SingleBooleanChoiceArg<"error">;
  fontSize?: SingleChoiceArg<"xlarge">;
  fontStyle?: SingleChoiceArg<"bold">;
  noOutline?: SingleBooleanChoiceArg<"noOutline">;
  whiteBackground?: SingleBooleanChoiceArg<"whiteBackground">;
  extraPadding?: SingleBooleanChoiceArg<"extraPadding">;
};
type VariantPropType = keyof PlasmicTextbox__VariantsArgs;
export const PlasmicTextbox__VariantProps = new Array<VariantPropType>(
  "disabled",
  "styleType",
  "withIcons",
  "error",
  "fontSize",
  "fontStyle",
  "noOutline",
  "whiteBackground",
  "extraPadding"
);

export type PlasmicTextbox__ArgsType = {
  placeholder?: string;
  value?: any;
  prefixIcon?: React.ReactNode;
  suffixIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTextbox__ArgsType;
export const PlasmicTextbox__ArgProps = new Array<ArgPropType>(
  "placeholder",
  "value",
  "prefixIcon",
  "suffixIcon"
);

export type PlasmicTextbox__OverridesType = {
  root?: Flex__<"div">;
  prefixContainer?: Flex__<"div">;
  textbox?: Flex__<"input">;
  suffixContainer?: Flex__<"div">;
};

export interface DefaultTextboxProps {
  placeholder?: string;
  value?: any;
  prefixIcon?: React.ReactNode;
  suffixIcon?: React.ReactNode;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  styleType?: MultiChoiceArg<
    | "right"
    | "rectangular"
    | "mono"
    | "seamless"
    | "inverted"
    | "bordered"
    | "autoheight"
    | "white"
    | "unset"
    | "medium"
    | "gray"
    | "red"
    | "green"
    | "blue"
    | "purple"
    | "topLayout"
  >;
  withIcons?: MultiChoiceArg<"withPrefix" | "withSuffix">;
  error?: SingleBooleanChoiceArg<"error">;
  fontSize?: SingleChoiceArg<"xlarge">;
  fontStyle?: SingleChoiceArg<"bold">;
  noOutline?: SingleBooleanChoiceArg<"noOutline">;
  whiteBackground?: SingleBooleanChoiceArg<"whiteBackground">;
  extraPadding?: SingleBooleanChoiceArg<"extraPadding">;
  className?: string;
}

const $$ = {};

function PlasmicTextbox__RenderFunc(props: {
  variants: PlasmicTextbox__VariantsArgs;
  args: PlasmicTextbox__ArgsType;
  overrides: PlasmicTextbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: "",
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled,
      },
      {
        path: "styleType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.styleType,
      },
      {
        path: "withIcons",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withIcons,
      },
      {
        path: "error",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.error,
      },
      {
        path: "fontSize",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontSize,
      },
      {
        path: "fontStyle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontStyle,
      },
      {
        path: "noOutline",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noOutline,
      },
      {
        path: "whiteBackground",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.whiteBackground,
      },
      {
        path: "extraPadding",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.extraPadding,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.rooterror]: hasVariant($state, "error", "error"),
          [sty.rootextraPadding]: hasVariant(
            $state,
            "extraPadding",
            "extraPadding"
          ),
          [sty.rootextraPadding_withIcons_withPrefix]:
            hasVariant($state, "extraPadding", "extraPadding") &&
            hasVariant($state, "withIcons", "withPrefix"),
          [sty.rootfontSize_xlarge]: hasVariant($state, "fontSize", "xlarge"),
          [sty.rootnoOutline]: hasVariant($state, "noOutline", "noOutline"),
          [sty.rootstyleType_autoheight]: hasVariant(
            $state,
            "styleType",
            "autoheight"
          ),
          [sty.rootstyleType_blue]: hasVariant($state, "styleType", "blue"),
          [sty.rootstyleType_bordered]: hasVariant(
            $state,
            "styleType",
            "bordered"
          ),
          [sty.rootstyleType_gray]: hasVariant($state, "styleType", "gray"),
          [sty.rootstyleType_green]: hasVariant($state, "styleType", "green"),
          [sty.rootstyleType_inverted]: hasVariant(
            $state,
            "styleType",
            "inverted"
          ),
          [sty.rootstyleType_medium_withIcons_withPrefix]:
            hasVariant($state, "styleType", "medium") &&
            hasVariant($state, "withIcons", "withPrefix"),
          [sty.rootstyleType_mono]: hasVariant($state, "styleType", "mono"),
          [sty.rootstyleType_purple]: hasVariant($state, "styleType", "purple"),
          [sty.rootstyleType_rectangular]: hasVariant(
            $state,
            "styleType",
            "rectangular"
          ),
          [sty.rootstyleType_red]: hasVariant($state, "styleType", "red"),
          [sty.rootstyleType_right]: hasVariant($state, "styleType", "right"),
          [sty.rootstyleType_seamless]: hasVariant(
            $state,
            "styleType",
            "seamless"
          ),
          [sty.rootstyleType_topLayout]: hasVariant(
            $state,
            "styleType",
            "topLayout"
          ),
          [sty.rootstyleType_unset]: hasVariant($state, "styleType", "unset"),
          [sty.rootstyleType_white]: hasVariant($state, "styleType", "white"),
          [sty.rootwhiteBackground]: hasVariant(
            $state,
            "whiteBackground",
            "whiteBackground"
          ),
          [sty.rootwithIcons_withPrefix]: hasVariant(
            $state,
            "withIcons",
            "withPrefix"
          ),
          [sty.rootwithIcons_withSuffix]: hasVariant(
            $state,
            "withIcons",
            "withSuffix"
          ),
          [sty.rootwithIcons_withSuffix_styleType_medium]:
            hasVariant($state, "withIcons", "withSuffix") &&
            hasVariant($state, "styleType", "medium"),
        }
      )}
    >
      {(hasVariant($state, "withIcons", "withPrefix") ? true : false) ? (
        <div
          data-plasmic-name={"prefixContainer"}
          data-plasmic-override={overrides.prefixContainer}
          className={classNames(projectcss.all, sty.prefixContainer, {
            [sty.prefixContainerextraPadding]: hasVariant(
              $state,
              "extraPadding",
              "extraPadding"
            ),
            [sty.prefixContainerextraPadding_withIcons_withPrefix]:
              hasVariant($state, "extraPadding", "extraPadding") &&
              hasVariant($state, "withIcons", "withPrefix"),
            [sty.prefixContainerstyleType_blue]: hasVariant(
              $state,
              "styleType",
              "blue"
            ),
            [sty.prefixContainerstyleType_gray]: hasVariant(
              $state,
              "styleType",
              "gray"
            ),
            [sty.prefixContainerstyleType_green]: hasVariant(
              $state,
              "styleType",
              "green"
            ),
            [sty.prefixContainerstyleType_medium_withIcons_withPrefix]:
              hasVariant($state, "styleType", "medium") &&
              hasVariant($state, "withIcons", "withPrefix"),
            [sty.prefixContainerstyleType_purple]: hasVariant(
              $state,
              "styleType",
              "purple"
            ),
            [sty.prefixContainerstyleType_red]: hasVariant(
              $state,
              "styleType",
              "red"
            ),
            [sty.prefixContainerwithIcons_withPrefix]: hasVariant(
              $state,
              "withIcons",
              "withPrefix"
            ),
            [sty.prefixContainerwithIcons_withSuffix]: hasVariant(
              $state,
              "withIcons",
              "withSuffix"
            ),
            [sty.prefixContainerwithIcons_withSuffix_withIcons_withPrefix]:
              hasVariant($state, "withIcons", "withPrefix") &&
              hasVariant($state, "withIcons", "withSuffix"),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <SearchSvgIcon
                className={classNames(projectcss.all, sty.svg__soWu)}
                role={"img"}
              />
            ),

            value: args.prefixIcon,
            className: classNames(sty.slotTargetPrefixIcon, {
              [sty.slotTargetPrefixIconextraPadding]: hasVariant(
                $state,
                "extraPadding",
                "extraPadding"
              ),
              [sty.slotTargetPrefixIconstyleType_blue]: hasVariant(
                $state,
                "styleType",
                "blue"
              ),
              [sty.slotTargetPrefixIconstyleType_gray]: hasVariant(
                $state,
                "styleType",
                "gray"
              ),
              [sty.slotTargetPrefixIconstyleType_green]: hasVariant(
                $state,
                "styleType",
                "green"
              ),
              [sty.slotTargetPrefixIconstyleType_medium_withIcons_withPrefix]:
                hasVariant($state, "styleType", "medium") &&
                hasVariant($state, "withIcons", "withPrefix"),
              [sty.slotTargetPrefixIconstyleType_purple]: hasVariant(
                $state,
                "styleType",
                "purple"
              ),
              [sty.slotTargetPrefixIconstyleType_red]: hasVariant(
                $state,
                "styleType",
                "red"
              ),
              [sty.slotTargetPrefixIconwithIcons_withPrefix]: hasVariant(
                $state,
                "withIcons",
                "withPrefix"
              ),
            }),
          })}
        </div>
      ) : null}
      <input
        data-plasmic-name={"textbox"}
        data-plasmic-override={overrides.textbox}
        className={classNames(projectcss.all, projectcss.input, sty.textbox, {
          [sty.textboxdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.textboxerror]: hasVariant($state, "error", "error"),
          [sty.textboxextraPadding]: hasVariant(
            $state,
            "extraPadding",
            "extraPadding"
          ),
          [sty.textboxextraPadding_withIcons_withPrefix]:
            hasVariant($state, "extraPadding", "extraPadding") &&
            hasVariant($state, "withIcons", "withPrefix"),
          [sty.textboxfontSize_xlarge]: hasVariant(
            $state,
            "fontSize",
            "xlarge"
          ),
          [sty.textboxfontStyle_bold]: hasVariant($state, "fontStyle", "bold"),
          [sty.textboxnoOutline]: hasVariant($state, "noOutline", "noOutline"),
          [sty.textboxstyleType_autoheight]: hasVariant(
            $state,
            "styleType",
            "autoheight"
          ),
          [sty.textboxstyleType_blue]: hasVariant($state, "styleType", "blue"),
          [sty.textboxstyleType_bordered]: hasVariant(
            $state,
            "styleType",
            "bordered"
          ),
          [sty.textboxstyleType_gray]: hasVariant($state, "styleType", "gray"),
          [sty.textboxstyleType_green]: hasVariant(
            $state,
            "styleType",
            "green"
          ),
          [sty.textboxstyleType_inverted]: hasVariant(
            $state,
            "styleType",
            "inverted"
          ),
          [sty.textboxstyleType_medium]: hasVariant(
            $state,
            "styleType",
            "medium"
          ),
          [sty.textboxstyleType_medium_withIcons_withPrefix]:
            hasVariant($state, "styleType", "medium") &&
            hasVariant($state, "withIcons", "withPrefix"),
          [sty.textboxstyleType_mono]: hasVariant($state, "styleType", "mono"),
          [sty.textboxstyleType_purple]: hasVariant(
            $state,
            "styleType",
            "purple"
          ),
          [sty.textboxstyleType_rectangular]: hasVariant(
            $state,
            "styleType",
            "rectangular"
          ),
          [sty.textboxstyleType_red]: hasVariant($state, "styleType", "red"),
          [sty.textboxstyleType_right]: hasVariant(
            $state,
            "styleType",
            "right"
          ),
          [sty.textboxstyleType_seamless]: hasVariant(
            $state,
            "styleType",
            "seamless"
          ),
          [sty.textboxstyleType_topLayout]: hasVariant(
            $state,
            "styleType",
            "topLayout"
          ),
          [sty.textboxstyleType_unset]: hasVariant(
            $state,
            "styleType",
            "unset"
          ),
          [sty.textboxstyleType_white]: hasVariant(
            $state,
            "styleType",
            "white"
          ),
          [sty.textboxwhiteBackground]: hasVariant(
            $state,
            "whiteBackground",
            "whiteBackground"
          ),
          [sty.textboxwithIcons_withPrefix]: hasVariant(
            $state,
            "withIcons",
            "withPrefix"
          ),
          [sty.textboxwithIcons_withSuffix]: hasVariant(
            $state,
            "withIcons",
            "withSuffix"
          ),
          [sty.textboxwithIcons_withSuffix_styleType_medium]:
            hasVariant($state, "withIcons", "withSuffix") &&
            hasVariant($state, "styleType", "medium"),
        })}
        placeholder={args.placeholder}
        ref={(ref) => {
          $refs["textbox"] = ref;
        }}
        size={1}
        type={"text"}
        value={args.value}
      />

      {(hasVariant($state, "withIcons", "withSuffix") ? true : false) ? (
        <div
          data-plasmic-name={"suffixContainer"}
          data-plasmic-override={overrides.suffixContainer}
          className={classNames(projectcss.all, sty.suffixContainer, {
            [sty.suffixContainerdisabled]: hasVariant(
              $state,
              "disabled",
              "disabled"
            ),
            [sty.suffixContainererror]: hasVariant($state, "error", "error"),
            [sty.suffixContainerfontSize_xlarge]: hasVariant(
              $state,
              "fontSize",
              "xlarge"
            ),
            [sty.suffixContainerstyleType_autoheight]: hasVariant(
              $state,
              "styleType",
              "autoheight"
            ),
            [sty.suffixContainerstyleType_blue]: hasVariant(
              $state,
              "styleType",
              "blue"
            ),
            [sty.suffixContainerstyleType_bordered]: hasVariant(
              $state,
              "styleType",
              "bordered"
            ),
            [sty.suffixContainerstyleType_gray]: hasVariant(
              $state,
              "styleType",
              "gray"
            ),
            [sty.suffixContainerstyleType_green]: hasVariant(
              $state,
              "styleType",
              "green"
            ),
            [sty.suffixContainerstyleType_purple]: hasVariant(
              $state,
              "styleType",
              "purple"
            ),
            [sty.suffixContainerstyleType_red]: hasVariant(
              $state,
              "styleType",
              "red"
            ),
            [sty.suffixContainerstyleType_right_fontSize_xlarge]:
              hasVariant($state, "fontSize", "xlarge") &&
              hasVariant($state, "styleType", "right"),
            [sty.suffixContainerstyleType_unset]: hasVariant(
              $state,
              "styleType",
              "unset"
            ),
            [sty.suffixContainerstyleType_white]: hasVariant(
              $state,
              "styleType",
              "white"
            ),
            [sty.suffixContainerwithIcons_withPrefix]: hasVariant(
              $state,
              "withIcons",
              "withPrefix"
            ),
            [sty.suffixContainerwithIcons_withSuffix]: hasVariant(
              $state,
              "withIcons",
              "withSuffix"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CloseSvgIcon
                className={classNames(projectcss.all, sty.svg__nNaeY)}
                role={"img"}
              />
            ),

            value: args.suffixIcon,
            className: classNames(sty.slotTargetSuffixIcon, {
              [sty.slotTargetSuffixIconstyleType_blue]: hasVariant(
                $state,
                "styleType",
                "blue"
              ),
              [sty.slotTargetSuffixIconstyleType_green]: hasVariant(
                $state,
                "styleType",
                "green"
              ),
              [sty.slotTargetSuffixIconstyleType_purple]: hasVariant(
                $state,
                "styleType",
                "purple"
              ),
              [sty.slotTargetSuffixIconstyleType_red]: hasVariant(
                $state,
                "styleType",
                "red"
              ),
              [sty.slotTargetSuffixIconwithIcons_withPrefix]: hasVariant(
                $state,
                "withIcons",
                "withPrefix"
              ),
              [sty.slotTargetSuffixIconwithIcons_withSuffix]: hasVariant(
                $state,
                "withIcons",
                "withSuffix"
              ),
              [sty.slotTargetSuffixIconwithIcons_withSuffix_styleType_medium]:
                hasVariant($state, "withIcons", "withSuffix") &&
                hasVariant($state, "styleType", "medium"),
              [sty.slotTargetSuffixIconwithIcons_withSuffix_withIcons_withPrefix]:
                hasVariant($state, "withIcons", "withSuffix") &&
                hasVariant($state, "withIcons", "withPrefix"),
            }),
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "prefixContainer", "textbox", "suffixContainer"],
  prefixContainer: ["prefixContainer"],
  textbox: ["textbox"],
  suffixContainer: ["suffixContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  prefixContainer: "div";
  textbox: "input";
  suffixContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextbox__VariantsArgs;
    args?: PlasmicTextbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTextbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextbox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTextbox__ArgProps,
          internalVariantPropNames: PlasmicTextbox__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicTextbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextbox";
  } else {
    func.displayName = `PlasmicTextbox.${nodeName}`;
  }
  return func;
}

export const PlasmicTextbox = Object.assign(
  // Top-level PlasmicTextbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    prefixContainer: makeNodeComponent("prefixContainer"),
    textbox: makeNodeComponent("textbox"),
    suffixContainer: makeNodeComponent("suffixContainer"),

    // Metadata about props expected for PlasmicTextbox
    internalVariantProps: PlasmicTextbox__VariantProps,
    internalArgProps: PlasmicTextbox__ArgProps,
  }
);

export default PlasmicTextbox;
/* prettier-ignore-end */
