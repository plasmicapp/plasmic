/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ooL7EhXDmFQWnW9sxtchhE
// Component: -k-p1OXXphn

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ProjectsFilter from "../../components/dashboard/ProjectsFilter"; // plasmic-import: mdX7wFJOmP/component
import ProjectListItem from "../../components/ProjectListItem"; // plasmic-import: 2FvZipCkyxl/component
import ProjectListSection from "../../components/ProjectListSection"; // plasmic-import: diKNfA_-roE/component
import StarterGroup from "../../components/StarterGroup"; // plasmic-import: u6dq5eydCj/component
import StarterProject from "../../components/StarterProject"; // plasmic-import: CCsDeqqYeoM/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import { useEnvironment } from "../plasmic_kit_pricing/PlasmicGlobalVariant__Environment"; // plasmic-import: hIjF9NLAUKG-/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_pricing_css from "../plasmic_kit_pricing/plasmic_plasmic_kit_pricing.module.css"; // plasmic-import: ehckhYnyDHgCBbV47m9bkf/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_dashboard.module.css"; // plasmic-import: ooL7EhXDmFQWnW9sxtchhE/projectcss
import plasmic_plasmic_kit_design_system_deprecated_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicProjectList.module.css"; // plasmic-import: -k-p1OXXphn/css

import ClockIcon from "../plasmic_kit_dashboard/icons/PlasmicIcon__Clock"; // plasmic-import: Y08w-xNMit/icon
import HatchIcon from "../plasmic_kit_dashboard/icons/PlasmicIcon__Hatch"; // plasmic-import: Hyn5Q6kuD9/icon
import JoystickIcon from "../plasmic_kit_dashboard/icons/PlasmicIcon__Joystick"; // plasmic-import: ApYMo5LVK0/icon
import eyeSvgZxKyHRa6Q6Pa from "../plasmic_kit_design_system/images/eyeSvg.svg"; // plasmic-import: Zx-kyHRa6Q6PA/picture
import image3YherfIxkolNxf from "../plasmic_kit_design_system/images/image3.svg"; // plasmic-import: yherfIxkolNXF/picture
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import BoltPlusIcon from "./PlasmicIcon__BoltPlus"; // plasmic-import: -RXQcn1QrTqlQ/icon
import CheckIcon from "./PlasmicIcon__Check"; // plasmic-import: pawp1H5YxB_3B/icon
import LightBulbIcon from "./PlasmicIcon__LightBulb"; // plasmic-import: L1GrIYxdm_MJL/icon
import PlusIcon from "./PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import TrashIcon from "./PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon

createPlasmicElementProxy;

export type PlasmicProjectList__VariantMembers = {
  mode: "demo";
  showNewProjectButton: "showNewProjectButton";
  noProjects: "noProjects";
  hideStarters: "hideStarters";
};
export type PlasmicProjectList__VariantsArgs = {
  mode?: SingleChoiceArg<"demo">;
  showNewProjectButton?: SingleBooleanChoiceArg<"showNewProjectButton">;
  noProjects?: SingleBooleanChoiceArg<"noProjects">;
  hideStarters?: SingleBooleanChoiceArg<"hideStarters">;
};
type VariantPropType = keyof PlasmicProjectList__VariantsArgs;
export const PlasmicProjectList__VariantProps = new Array<VariantPropType>(
  "mode",
  "showNewProjectButton",
  "noProjects",
  "hideStarters"
);

export type PlasmicProjectList__ArgsType = { noProjectsText?: React.ReactNode };
type ArgPropType = keyof PlasmicProjectList__ArgsType;
export const PlasmicProjectList__ArgProps = new Array<ArgPropType>(
  "noProjectsText"
);

export type PlasmicProjectList__OverridesType = {
  root?: Flex__<"div">;
  frame321?: Flex__<"div">;
  h1?: Flex__<"h1">;
  newProjectButton?: Flex__<typeof Button>;
  tutorials?: Flex__<typeof ProjectListSection>;
  preview22?: Flex__<"img">;
  preview223?: Flex__<"img">;
  preview222?: Flex__<"img">;
  preview34?: Flex__<"img">;
  preview32?: Flex__<"img">;
  preview33?: Flex__<"img">;
  preview352?: Flex__<"img">;
  preview3524?: Flex__<"img">;
  preview3525?: Flex__<"img">;
  filter?: Flex__<typeof ProjectsFilter>;
  uploadButton?: Flex__<typeof Button>;
  mainList?: Flex__<"div">;
  deleted?: Flex__<typeof ProjectListSection>;
  preview2?: Flex__<"img">;
  preview3?: Flex__<"img">;
};

export interface DefaultProjectListProps {
  noProjectsText?: React.ReactNode;
  mode?: SingleChoiceArg<"demo">;
  showNewProjectButton?: SingleBooleanChoiceArg<"showNewProjectButton">;
  noProjects?: SingleBooleanChoiceArg<"noProjects">;
  hideStarters?: SingleBooleanChoiceArg<"hideStarters">;
  className?: string;
}

const $$ = {};

function PlasmicProjectList__RenderFunc(props: {
  variants: PlasmicProjectList__VariantsArgs;
  args: PlasmicProjectList__ArgsType;
  overrides: PlasmicProjectList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mode,
      },
      {
        path: "showNewProjectButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showNewProjectButton,
      },
      {
        path: "noProjects",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noProjects,
      },
      {
        path: "hideStarters",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideStarters,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const globalVariants = ensureGlobalVariants({
    environment: useEnvironment(),
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_deprecated_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        plasmic_plasmic_kit_pricing_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [plasmic_plasmic_kit_pricing_css.global_environment_website]:
            hasVariant(globalVariants, "environment", "website"),
          [sty.rootmode_demo]: hasVariant($state, "mode", "demo"),
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame321"}
        data-plasmic-override={overrides.frame321}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame321, {
          [sty.frame321showNewProjectButton]: hasVariant(
            $state,
            "showNewProjectButton",
            "showNewProjectButton"
          ),
        })}
      >
        {(
          hasVariant($state, "showNewProjectButton", "showNewProjectButton")
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__b3Bi4, {
              [sty.freeBoxshowNewProjectButton__b3Bi4R7FzF]: hasVariant(
                $state,
                "showNewProjectButton",
                "showNewProjectButton"
              ),
            })}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1,
                {
                  [sty.h1showNewProjectButton]: hasVariant(
                    $state,
                    "showNewProjectButton",
                    "showNewProjectButton"
                  ),
                }
              )}
            >
              {"Projects"}
            </h1>
            <Button
              data-plasmic-name={"newProjectButton"}
              data-plasmic-override={overrides.newProjectButton}
              className={classNames("__wab_instance", sty.newProjectButton, {
                [sty.newProjectButtonshowNewProjectButton]: hasVariant(
                  $state,
                  "showNewProjectButton",
                  "showNewProjectButton"
                ),
              })}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__opS5Z)}
                  role={"img"}
                />
              }
              startIcon={
                <PlusIcon
                  className={classNames(projectcss.all, sty.svg__fDUq)}
                  role={"img"}
                />
              }
              type={["primary"]}
              withIcons={["startIcon"]}
            >
              {"New project"}
            </Button>
          </div>
        ) : null}
        <ProjectListSection
          data-plasmic-name={"tutorials"}
          data-plasmic-override={overrides.tutorials}
          className={classNames("__wab_instance", sty.tutorials, {
            [sty.tutorialshideStarters]: hasVariant(
              $state,
              "hideStarters",
              "hideStarters"
            ),
            [sty.tutorialsmode_demo]: hasVariant($state, "mode", "demo"),
            [sty.tutorialsshowNewProjectButton]: hasVariant(
              $state,
              "showNewProjectButton",
              "showNewProjectButton"
            ),
          })}
          container={
            <React.Fragment>
              <StarterGroup
                className={classNames(
                  "__wab_instance",
                  sty.starterGroup__mBsAc
                )}
                container={
                  <React.Fragment>
                    {false ? (
                      <StarterProject
                        image={"withImage"}
                        instruction={"Click to duplicate this project"}
                        name={'Play "Plasmic Levels"'}
                        preview={
                          <img
                            data-plasmic-name={"preview22"}
                            data-plasmic-override={overrides.preview22}
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.preview22
                            )}
                            src={image3YherfIxkolNxf}
                          />
                        }
                        previewIcon={
                          <img
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.img__gHpLe
                            )}
                            loading={"lazy"}
                            src={eyeSvgZxKyHRa6Q6Pa}
                          />
                        }
                      >
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__by7Ek)}
                          role={"img"}
                        />
                      </StarterProject>
                    ) : null}
                    {false ? (
                      <StarterProject
                        image={"withImage"}
                        instruction={"Click to duplicate this project"}
                        name={'Play "Plasmic Levels"'}
                        preview={
                          <img
                            data-plasmic-name={"preview223"}
                            data-plasmic-override={overrides.preview223}
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.preview223
                            )}
                            src={image3YherfIxkolNxf}
                          />
                        }
                        previewIcon={
                          <img
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.img__nWagV
                            )}
                            loading={"lazy"}
                            src={eyeSvgZxKyHRa6Q6Pa}
                          />
                        }
                      >
                        <CheckIcon
                          className={classNames(projectcss.all, sty.svg__mwqWs)}
                          role={"img"}
                        />
                      </StarterProject>
                    ) : null}
                    {false ? (
                      <StarterProject
                        image={"withImage"}
                        instruction={"Click to duplicate this project"}
                        name={'Play "Plasmic Levels"'}
                        preview={
                          <img
                            data-plasmic-name={"preview222"}
                            data-plasmic-override={overrides.preview222}
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.preview222
                            )}
                            src={image3YherfIxkolNxf}
                          />
                        }
                        previewIcon={
                          <img
                            alt={""}
                            className={classNames(
                              projectcss.all,
                              projectcss.img,
                              sty.img__owx0H
                            )}
                            loading={"lazy"}
                            src={eyeSvgZxKyHRa6Q6Pa}
                          />
                        }
                      >
                        <CheckIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8WEqf
                          )}
                          role={"img"}
                        />
                      </StarterProject>
                    ) : null}
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__kroAp
                      )}
                      icon={"withIcon"}
                      instruction={"Click to duplicate this project"}
                      name={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v4GJv
                            )}
                          >
                            {"Play"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c5V
                            )}
                          >
                            {"Plasmic Levels"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m8Chg
                            )}
                          >
                            {"(start here)"}
                          </div>
                        </React.Fragment>
                      }
                      preview={
                        <img
                          data-plasmic-name={"preview34"}
                          data-plasmic-override={overrides.preview34}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview34
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__qMBcL
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                      type={"first"}
                    >
                      <JoystickIcon
                        className={classNames(projectcss.all, sty.svg__hf1MI)}
                        role={"img"}
                      />
                    </StarterProject>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__wvtKw
                      )}
                      icon={"withIcon"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview32"}
                          data-plasmic-override={overrides.preview32}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview32
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__v8GHj
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                      type={"second"}
                    >
                      <ClockIcon
                        className={classNames(projectcss.all, sty.svg__laDb)}
                        role={"img"}
                      />
                    </StarterProject>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__mnUxm
                      )}
                      icon={"withIcon"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview33"}
                          data-plasmic-override={overrides.preview33}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview33
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img___4Azhf
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                      type={"third"}
                    >
                      <HatchIcon
                        className={classNames(projectcss.all, sty.svg__ekBhK)}
                        role={"img"}
                      />
                    </StarterProject>
                  </React.Fragment>
                }
                gridColumns={"_3"}
                type={"withoutHeader"}
              />

              <StarterGroup
                className={classNames(
                  "__wab_instance",
                  sty.starterGroup__xY8Xb
                )}
                container={
                  <React.Fragment>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__tRkXo
                      )}
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview352"}
                          data-plasmic-override={overrides.preview352}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview352
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__j6ORt
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__kTsVu)}
                        role={"img"}
                      />
                    </StarterProject>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject___1FA8
                      )}
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview3524"}
                          data-plasmic-override={overrides.preview3524}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview3524
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__mog7Q
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__bbSn5)}
                        role={"img"}
                      />
                    </StarterProject>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__hb6Rg
                      )}
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview3525"}
                          data-plasmic-override={overrides.preview3525}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview3525
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__rchQz
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__evM1Z)}
                        role={"img"}
                      />
                    </StarterProject>
                  </React.Fragment>
                }
                heading={"Subheading"}
              />
            </React.Fragment>
          }
          icon={
            <LightBulbIcon
              className={classNames(projectcss.all, sty.svg__vsz6K)}
              role={"img"}
            />
          }
          name={"Get Started"}
          type={"starters"}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__miuC3, {
            [sty.freeBoxhideStarters__miuC3T8RVy]: hasVariant(
              $state,
              "hideStarters",
              "hideStarters"
            ),
          })}
        >
          <ProjectsFilter
            data-plasmic-name={"filter"}
            data-plasmic-override={overrides.filter}
            className={classNames("__wab_instance", sty.filter)}
          />
        </div>
        {(hasVariant($state, "mode", "demo") ? true : false) ? (
          <Button
            data-plasmic-name={"uploadButton"}
            data-plasmic-override={overrides.uploadButton}
            className={classNames("__wab_instance", sty.uploadButton, {
              [sty.uploadButtonmode_demo]: hasVariant($state, "mode", "demo"),
            })}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__jK9HY)}
                role={"img"}
              />
            }
            startIcon={
              <BoltPlusIcon
                className={classNames(projectcss.all, sty.svg__bsji2)}
                role={"img"}
              />
            }
            type={["secondary"]}
            withIcons={["startIcon"]}
          >
            {"Upload"}
          </Button>
        ) : null}
        <Stack__
          as={"div"}
          data-plasmic-name={"mainList"}
          data-plasmic-override={overrides.mainList}
          hasGap={true}
          className={classNames(projectcss.all, sty.mainList, {
            [sty.mainListmode_demo]: hasVariant($state, "mode", "demo"),
            [sty.mainListnoProjects]: hasVariant(
              $state,
              "noProjects",
              "noProjects"
            ),
          })}
        >
          <ProjectListItem
            className={classNames(
              "__wab_instance",
              sty.projectListItem___8WVx,
              {
                [sty.projectListItemmode_demo___8WVxnCfx1]: hasVariant(
                  $state,
                  "mode",
                  "demo"
                ),
                [sty.projectListItemnoProjects___8WVx3Ci4]: hasVariant(
                  $state,
                  "noProjects",
                  "noProjects"
                ),
              }
            )}
            showWorkspace={true}
            timestamp={"updated 1h ago"}
          />

          <ProjectListItem
            className={classNames(
              "__wab_instance",
              sty.projectListItem__lo2Qn,
              {
                [sty.projectListItemmode_demo__lo2QnNCfx1]: hasVariant(
                  $state,
                  "mode",
                  "demo"
                ),
              }
            )}
            timestamp={"updated 1h ago"}
          />

          <ProjectListItem
            className={classNames(
              "__wab_instance",
              sty.projectListItem___4Pih3
            )}
            explorations={["moreInfoOnHover"]}
            timestamp={"updated 1h ago"}
          />
        </Stack__>
        {(hasVariant($state, "noProjects", "noProjects") ? true : false)
          ? renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aTmMe
                  )}
                >
                  {
                    'You have no projects. Create a new one by hitting "New project" in the top bar.'
                  }
                </div>
              ),
              value: args.noProjectsText,
            })
          : null}
        <ProjectListSection
          data-plasmic-name={"deleted"}
          data-plasmic-override={overrides.deleted}
          className={classNames("__wab_instance", sty.deleted)}
          container={
            <React.Fragment>
              <StarterGroup
                className={classNames(
                  "__wab_instance",
                  sty.starterGroup__sNjEj
                )}
                container={
                  <React.Fragment>
                    <StarterProject
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview2"}
                          data-plasmic-override={overrides.preview2}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview2
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__pP5S5
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__epZ7H)}
                        role={"img"}
                      />
                    </StarterProject>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__rz9Y6
                      )}
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          data-plasmic-name={"preview3"}
                          data-plasmic-override={overrides.preview3}
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.preview3
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img___8UU2Y
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__pEw7)}
                        role={"img"}
                      />
                    </StarterProject>
                  </React.Fragment>
                }
              />

              <StarterGroup
                className={classNames(
                  "__wab_instance",
                  sty.starterGroup__bKla6
                )}
                container={
                  <React.Fragment>
                    <StarterProject
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__qgkiq
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__olWvG
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__jHE)}
                        role={"img"}
                      />
                    </StarterProject>
                    <StarterProject
                      className={classNames(
                        "__wab_instance",
                        sty.starterProject__xgKzV
                      )}
                      image={"withImage"}
                      instruction={"Click to duplicate this project"}
                      name={'Play "Plasmic Levels"'}
                      preview={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img__acfiy
                          )}
                          src={image3YherfIxkolNxf}
                        />
                      }
                      previewIcon={
                        <img
                          alt={""}
                          className={classNames(
                            projectcss.all,
                            projectcss.img,
                            sty.img___60YkE
                          )}
                          loading={"lazy"}
                          src={eyeSvgZxKyHRa6Q6Pa}
                        />
                      }
                    >
                      <CheckIcon
                        className={classNames(projectcss.all, sty.svg__zwJRf)}
                        role={"img"}
                      />
                    </StarterProject>
                  </React.Fragment>
                }
              />
            </React.Fragment>
          }
          icon={
            <TrashIcon
              className={classNames(projectcss.all, sty.svg__xdg9O)}
              role={"img"}
            />
          }
          name={"Deleted"}
          states={"collapsed"}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame321",
    "h1",
    "newProjectButton",
    "tutorials",
    "preview22",
    "preview223",
    "preview222",
    "preview34",
    "preview32",
    "preview33",
    "preview352",
    "preview3524",
    "preview3525",
    "filter",
    "uploadButton",
    "mainList",
    "deleted",
    "preview2",
    "preview3",
  ],
  frame321: [
    "frame321",
    "h1",
    "newProjectButton",
    "tutorials",
    "preview22",
    "preview223",
    "preview222",
    "preview34",
    "preview32",
    "preview33",
    "preview352",
    "preview3524",
    "preview3525",
    "filter",
    "uploadButton",
    "mainList",
    "deleted",
    "preview2",
    "preview3",
  ],
  h1: ["h1"],
  newProjectButton: ["newProjectButton"],
  tutorials: [
    "tutorials",
    "preview22",
    "preview223",
    "preview222",
    "preview34",
    "preview32",
    "preview33",
    "preview352",
    "preview3524",
    "preview3525",
  ],
  preview22: ["preview22"],
  preview223: ["preview223"],
  preview222: ["preview222"],
  preview34: ["preview34"],
  preview32: ["preview32"],
  preview33: ["preview33"],
  preview352: ["preview352"],
  preview3524: ["preview3524"],
  preview3525: ["preview3525"],
  filter: ["filter"],
  uploadButton: ["uploadButton"],
  mainList: ["mainList"],
  deleted: ["deleted", "preview2", "preview3"],
  preview2: ["preview2"],
  preview3: ["preview3"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame321: "div";
  h1: "h1";
  newProjectButton: typeof Button;
  tutorials: typeof ProjectListSection;
  preview22: "img";
  preview223: "img";
  preview222: "img";
  preview34: "img";
  preview32: "img";
  preview33: "img";
  preview352: "img";
  preview3524: "img";
  preview3525: "img";
  filter: typeof ProjectsFilter;
  uploadButton: typeof Button;
  mainList: "div";
  deleted: typeof ProjectListSection;
  preview2: "img";
  preview3: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProjectList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProjectList__VariantsArgs;
    args?: PlasmicProjectList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProjectList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProjectList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProjectList__ArgProps,
          internalVariantPropNames: PlasmicProjectList__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicProjectList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectList";
  } else {
    func.displayName = `PlasmicProjectList.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectList = Object.assign(
  // Top-level PlasmicProjectList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame321: makeNodeComponent("frame321"),
    h1: makeNodeComponent("h1"),
    newProjectButton: makeNodeComponent("newProjectButton"),
    tutorials: makeNodeComponent("tutorials"),
    preview22: makeNodeComponent("preview22"),
    preview223: makeNodeComponent("preview223"),
    preview222: makeNodeComponent("preview222"),
    preview34: makeNodeComponent("preview34"),
    preview32: makeNodeComponent("preview32"),
    preview33: makeNodeComponent("preview33"),
    preview352: makeNodeComponent("preview352"),
    preview3524: makeNodeComponent("preview3524"),
    preview3525: makeNodeComponent("preview3525"),
    filter: makeNodeComponent("filter"),
    uploadButton: makeNodeComponent("uploadButton"),
    mainList: makeNodeComponent("mainList"),
    deleted: makeNodeComponent("deleted"),
    preview2: makeNodeComponent("preview2"),
    preview3: makeNodeComponent("preview3"),

    // Metadata about props expected for PlasmicProjectList
    internalVariantProps: PlasmicProjectList__VariantProps,
    internalArgProps: PlasmicProjectList__ArgProps,
  }
);

export default PlasmicProjectList;
/* prettier-ignore-end */
