/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: PTsdlYdahZ76

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentsHeader.module.css"; // plasmic-import: PTsdlYdahZ76/css

createPlasmicElementProxy;

export type PlasmicCommentsHeader__VariantMembers = {
  showCount: "showCount";
  nameOnly: "nameOnly";
};
export type PlasmicCommentsHeader__VariantsArgs = {
  showCount?: SingleBooleanChoiceArg<"showCount">;
  nameOnly?: SingleBooleanChoiceArg<"nameOnly">;
};
type VariantPropType = keyof PlasmicCommentsHeader__VariantsArgs;
export const PlasmicCommentsHeader__VariantProps = new Array<VariantPropType>(
  "showCount",
  "nameOnly"
);

export type PlasmicCommentsHeader__ArgsType = {
  name?: React.ReactNode;
  type?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCommentsHeader__ArgsType;
export const PlasmicCommentsHeader__ArgProps = new Array<ArgPropType>(
  "name",
  "type"
);

export type PlasmicCommentsHeader__OverridesType = {
  root?: Flex__<"div">;
  count?: Flex__<"div">;
};

export interface DefaultCommentsHeaderProps {
  name?: React.ReactNode;
  type?: React.ReactNode;
  showCount?: SingleBooleanChoiceArg<"showCount">;
  nameOnly?: SingleBooleanChoiceArg<"nameOnly">;
  className?: string;
}

const $$ = {};

function PlasmicCommentsHeader__RenderFunc(props: {
  variants: PlasmicCommentsHeader__VariantsArgs;
  args: PlasmicCommentsHeader__ArgsType;
  overrides: PlasmicCommentsHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showCount",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showCount,
      },
      {
        path: "nameOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.nameOnly,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootshowCount]: hasVariant($state, "showCount", "showCount") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wQlN)}>
        <div className={classNames(projectcss.all, sty.freeBox__hBgUl)}>
          {renderPlasmicSlot({
            defaultContents: "Name",
            value: args.name,
            className: classNames(sty.slotTargetName),
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___0PdRk)}>
          {(hasVariant($state, "nameOnly", "nameOnly") ? false : true)
            ? renderPlasmicSlot({
                defaultContents: "Type",
                value: args.type,
                className: classNames(sty.slotTargetType, {
                  [sty.slotTargetTypenameOnly]: hasVariant(
                    $state,
                    "nameOnly",
                    "nameOnly"
                  ),
                }),
              })
            : null}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__tSY, {
          [sty.freeBoxshowCount__tSYhm8I9]: hasVariant(
            $state,
            "showCount",
            "showCount"
          ),
        })}
      >
        <div
          data-plasmic-name={"count"}
          data-plasmic-override={overrides.count}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.count
          )}
        >
          {"4"}
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "count"],
  count: ["count"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  count: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentsHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentsHeader__VariantsArgs;
    args?: PlasmicCommentsHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentsHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommentsHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentsHeader__ArgProps,
          internalVariantPropNames: PlasmicCommentsHeader__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentsHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentsHeader";
  } else {
    func.displayName = `PlasmicCommentsHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentsHeader = Object.assign(
  // Top-level PlasmicCommentsHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    count: makeNodeComponent("count"),

    // Metadata about props expected for PlasmicCommentsHeader
    internalVariantProps: PlasmicCommentsHeader__VariantProps,
    internalArgProps: PlasmicCommentsHeader__ArgProps,
  }
);

export default PlasmicCommentsHeader;
/* prettier-ignore-end */
