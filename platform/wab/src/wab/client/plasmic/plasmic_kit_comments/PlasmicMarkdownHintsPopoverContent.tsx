/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: pTr2lSrGWq8O

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { MarkdownHintRow } from "../../components/comments/MarkdownHintRow"; // plasmic-import: T7mVQBFEWA-V/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicMarkdownHintsPopoverContent.module.css"; // plasmic-import: pTr2lSrGWq8O/css

import ArrowUpRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowUpRightSvg"; // plasmic-import: N_BtK6grX/icon

createPlasmicElementProxy;

export type PlasmicMarkdownHintsPopoverContent__VariantMembers = {};
export type PlasmicMarkdownHintsPopoverContent__VariantsArgs = {};
type VariantPropType = keyof PlasmicMarkdownHintsPopoverContent__VariantsArgs;
export const PlasmicMarkdownHintsPopoverContent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMarkdownHintsPopoverContent__ArgsType = {};
type ArgPropType = keyof PlasmicMarkdownHintsPopoverContent__ArgsType;
export const PlasmicMarkdownHintsPopoverContent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicMarkdownHintsPopoverContent__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  link?: Flex__<"a">;
  svg?: Flex__<"svg">;
  content?: Flex__<"div">;
};

export interface DefaultMarkdownHintsPopoverContentProps {
  className?: string;
}

const $$ = {};

function PlasmicMarkdownHintsPopoverContent__RenderFunc(props: {
  variants: PlasmicMarkdownHintsPopoverContent__VariantsArgs;
  args: PlasmicMarkdownHintsPopoverContent__ArgsType;
  overrides: PlasmicMarkdownHintsPopoverContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__o9Ye
          )}
        >
          {"Markdown hints"}
        </div>
        <Stack__
          as={PlasmicLink__}
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          href={"https://commonmark.org/help/"}
          platform={"react"}
          target={"_blank"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mEhd3
            )}
          >
            {"More"}
          </div>
          <ArrowUpRightSvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        hasGap={true}
        className={classNames(projectcss.all, sty.content)}
      >
        <MarkdownHintRow
          className={classNames("__wab_instance", sty.markdownHintRow__ofIdB)}
        />

        <MarkdownHintRow
          className={classNames("__wab_instance", sty.markdownHintRow__yl5A6)}
        />
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link", "svg", "content"],
  freeBox: ["freeBox", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"],
  content: ["content"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  link: "a";
  svg: "svg";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMarkdownHintsPopoverContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMarkdownHintsPopoverContent__VariantsArgs;
    args?: PlasmicMarkdownHintsPopoverContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<
    // Specify variants directly as props
    PlasmicMarkdownHintsPopoverContent__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicMarkdownHintsPopoverContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMarkdownHintsPopoverContent__ArgProps,
          internalVariantPropNames:
            PlasmicMarkdownHintsPopoverContent__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicMarkdownHintsPopoverContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMarkdownHintsPopoverContent";
  } else {
    func.displayName = `PlasmicMarkdownHintsPopoverContent.${nodeName}`;
  }
  return func;
}

export const PlasmicMarkdownHintsPopoverContent = Object.assign(
  // Top-level PlasmicMarkdownHintsPopoverContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicMarkdownHintsPopoverContent
    internalVariantProps: PlasmicMarkdownHintsPopoverContent__VariantProps,
    internalArgProps: PlasmicMarkdownHintsPopoverContent__ArgProps,
  }
);

export default PlasmicMarkdownHintsPopoverContent;
/* prettier-ignore-end */
