/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: l_AKXl2AAu

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CommentPostForm from "../../components/comments/CommentPostForm"; // plasmic-import: qi3Y1X2qZ7/component
import ReactionButton from "../../components/comments/ReactionButton"; // plasmic-import: FOzDmFDbWm/component
import { ThreadHistoryStatus } from "../../components/comments/ThreadHistoryStatus"; // plasmic-import: E0P_lFzVr70L/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicCommentPost.module.css"; // plasmic-import: l_AKXl2AAu/css

import EmojiPlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__EmojiPlusSvg"; // plasmic-import: rtrSZZiat/icon
import _69B43A437055B398Eff90A515Ed4F551Svg2AijDeIx4X from "./images/_69B43A437055B398Eff90A515Ed4F551Svg.svg"; // plasmic-import: 2aijDEIx4x/picture

createPlasmicElementProxy;

export type PlasmicCommentPost__VariantMembers = {
  thread: "thread";
  isEditing: "isEditing";
  isDeleted: "isDeleted";
  canUpdateHistory: "canUpdateHistory";
  hoverBox: "hoverBox";
};
export type PlasmicCommentPost__VariantsArgs = {
  thread?: SingleBooleanChoiceArg<"thread">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  isDeleted?: SingleBooleanChoiceArg<"isDeleted">;
  canUpdateHistory?: SingleBooleanChoiceArg<"canUpdateHistory">;
  hoverBox?: SingleBooleanChoiceArg<"hoverBox">;
};
type VariantPropType = keyof PlasmicCommentPost__VariantsArgs;
export const PlasmicCommentPost__VariantProps = new Array<VariantPropType>(
  "thread",
  "isEditing",
  "isDeleted",
  "canUpdateHistory",
  "hoverBox"
);

export type PlasmicCommentPost__ArgsType = {};
type ArgPropType = keyof PlasmicCommentPost__ArgsType;
export const PlasmicCommentPost__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentPost__OverridesType = {
  root?: Flex__<"div">;
  avatarContainer?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  userFullName?: Flex__<"span">;
  timestamp?: Flex__<"span">;
  actions?: Flex__<"div">;
  btnMore?: Flex__<typeof MenuButton>;
  threadHistoryStatus?: Flex__<typeof ThreadHistoryStatus>;
  subjectLabel?: Flex__<"div">;
  body?: Flex__<"div">;
  reactionsContainer?: Flex__<"div">;
  btnAddReaction?: Flex__<typeof IconButton>;
  svg?: Flex__<"svg">;
  commentPostForm?: Flex__<typeof CommentPostForm>;
  repliesLink?: Flex__<typeof Button>;
  text?: Flex__<"div">;
};

export interface DefaultCommentPostProps {
  thread?: SingleBooleanChoiceArg<"thread">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  isDeleted?: SingleBooleanChoiceArg<"isDeleted">;
  canUpdateHistory?: SingleBooleanChoiceArg<"canUpdateHistory">;
  hoverBox?: SingleBooleanChoiceArg<"hoverBox">;
  className?: string;
}

const $$ = {};

function PlasmicCommentPost__RenderFunc(props: {
  variants: PlasmicCommentPost__VariantsArgs;
  args: PlasmicCommentPost__ArgsType;
  overrides: PlasmicCommentPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "thread",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.thread,
      },
      {
        path: "isEditing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isEditing,
      },
      {
        path: "isDeleted",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDeleted,
      },
      {
        path: "canUpdateHistory",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.canUpdateHistory,
      },
      {
        path: "hoverBox",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hoverBox,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
          [sty.rootisEditing]: hasVariant($state, "isEditing", "isEditing"),
          [sty.rootthread]: hasVariant($state, "thread", "thread"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sfn9I, {
          [sty.freeBoxcanUpdateHistory__sfn9IsmvQ]: hasVariant(
            $state,
            "canUpdateHistory",
            "canUpdateHistory"
          ),
          [sty.freeBoxhoverBox__sfn9IbLDov]: hasVariant(
            $state,
            "hoverBox",
            "hoverBox"
          ),
          [sty.freeBoxisEditing__sfn9Iuz8Vl]: hasVariant(
            $state,
            "isEditing",
            "isEditing"
          ),
          [sty.freeBoxthread__sfn9IkhQ]: hasVariant($state, "thread", "thread"),
        })}
      >
        <div
          data-plasmic-name={"avatarContainer"}
          data-plasmic-override={overrides.avatarContainer}
          className={classNames(projectcss.all, sty.avatarContainer, {
            [sty.avatarContainerhoverBox]: hasVariant(
              $state,
              "hoverBox",
              "hoverBox"
            ),
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imghoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
              [sty.imgisEditing]: hasVariant($state, "isEditing", "isEditing"),
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: _69B43A437055B398Eff90A515Ed4F551Svg2AijDeIx4X,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1,
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___079IS)}>
          <span
            data-plasmic-name={"userFullName"}
            data-plasmic-override={overrides.userFullName}
            className={classNames(
              projectcss.all,
              projectcss.span,
              projectcss.__wab_text,
              sty.userFullName
            )}
          >
            {"User Name"}
          </span>
          <span
            data-plasmic-name={"timestamp"}
            data-plasmic-override={overrides.timestamp}
            className={classNames(
              projectcss.all,
              projectcss.span,
              projectcss.__wab_text,
              sty.timestamp,
              {
                [sty.timestampisDeleted]: hasVariant(
                  $state,
                  "isDeleted",
                  "isDeleted"
                ),
                [sty.timestampthread]: hasVariant($state, "thread", "thread"),
              }
            )}
          >
            {"3 hours ago"}
          </span>
        </div>
        <div
          data-plasmic-name={"actions"}
          data-plasmic-override={overrides.actions}
          className={classNames(projectcss.all, sty.actions, {
            [sty.actionscanUpdateHistory]: hasVariant(
              $state,
              "canUpdateHistory",
              "canUpdateHistory"
            ),
            [sty.actionshoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
            [sty.actionsisDeleted]: hasVariant(
              $state,
              "isDeleted",
              "isDeleted"
            ),
            [sty.actionsthread]: hasVariant($state, "thread", "thread"),
          })}
        >
          <MenuButton
            data-plasmic-name={"btnMore"}
            data-plasmic-override={overrides.btnMore}
            className={classNames("__wab_instance", sty.btnMore, {
              [sty.btnMorehoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
              [sty.btnMoreisDeleted]: hasVariant(
                $state,
                "isDeleted",
                "isDeleted"
              ),
              [sty.btnMorethread]: hasVariant($state, "thread", "thread"),
            })}
            size={"small"}
            withBackgroundHover={true}
          />

          <ThreadHistoryStatus
            data-plasmic-name={"threadHistoryStatus"}
            data-plasmic-override={overrides.threadHistoryStatus}
            className={classNames("__wab_instance", sty.threadHistoryStatus, {
              [sty.threadHistoryStatuscanUpdateHistory]: hasVariant(
                $state,
                "canUpdateHistory",
                "canUpdateHistory"
              ),
              [sty.threadHistoryStatusthread]: hasVariant(
                $state,
                "thread",
                "thread"
              ),
            })}
          />
        </div>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox___5UHnq, {
          [sty.freeBoxhoverBox___5UHnqbLDov]: hasVariant(
            $state,
            "hoverBox",
            "hoverBox"
          ),
          [sty.freeBoxisEditing___5UHnquz8Vl]: hasVariant(
            $state,
            "isEditing",
            "isEditing"
          ),
          [sty.freeBoxthread___5UHnqKhQ]: hasVariant(
            $state,
            "thread",
            "thread"
          ),
        })}
      >
        {(hasVariant($state, "thread", "thread") ? true : false) ? (
          <div
            data-plasmic-name={"subjectLabel"}
            data-plasmic-override={overrides.subjectLabel}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.subjectLabel,
              {
                [sty.subjectLabelisEditing]: hasVariant(
                  $state,
                  "isEditing",
                  "isEditing"
                ),
                [sty.subjectLabelthread]: hasVariant(
                  $state,
                  "thread",
                  "thread"
                ),
              }
            )}
          >
            {hasVariant($state, "thread", "thread")
              ? "Unnamed element in MyComponent"
              : "Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. "}
          </div>
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__dc1JV, {
            [sty.freeBoxhoverBox__dc1JVbLDov]: hasVariant(
              $state,
              "hoverBox",
              "hoverBox"
            ),
            [sty.freeBoxisEditing__dc1JVuz8Vl]: hasVariant(
              $state,
              "isEditing",
              "isEditing"
            ),
            [sty.freeBoxthread__dc1JVkhQ]: hasVariant(
              $state,
              "thread",
              "thread"
            ),
          })}
        >
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.body,
              {
                [sty.bodycanUpdateHistory]: hasVariant(
                  $state,
                  "canUpdateHistory",
                  "canUpdateHistory"
                ),
                [sty.bodyhoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
                [sty.bodyisDeleted]: hasVariant(
                  $state,
                  "isDeleted",
                  "isDeleted"
                ),
                [sty.bodyisEditing]: hasVariant(
                  $state,
                  "isEditing",
                  "isEditing"
                ),
                [sty.bodythread]: hasVariant($state, "thread", "thread"),
              }
            )}
          >
            {hasVariant($state, "isDeleted", "isDeleted")
              ? "Deleted comment"
              : "Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. Hello there! This comment is long. "}
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"reactionsContainer"}
          data-plasmic-override={overrides.reactionsContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.reactionsContainer, {
            [sty.reactionsContainerhoverBox]: hasVariant(
              $state,
              "hoverBox",
              "hoverBox"
            ),
            [sty.reactionsContainerisDeleted]: hasVariant(
              $state,
              "isDeleted",
              "isDeleted"
            ),
            [sty.reactionsContainerisEditing]: hasVariant(
              $state,
              "isEditing",
              "isEditing"
            ),
          })}
        >
          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__cMbVc)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__fahBu)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__oy7Cy)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__lNxki)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__yxwte)}
          />

          <ReactionButton
            className={classNames("__wab_instance", sty.reactionButton__nAY7)}
          />

          <IconButton
            data-plasmic-name={"btnAddReaction"}
            data-plasmic-override={overrides.btnAddReaction}
            className={classNames("__wab_instance", sty.btnAddReaction)}
            size={"small"}
            type={["round"]}
          >
            <EmojiPlusSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </IconButton>
        </Stack__>
        {(hasVariant($state, "isEditing", "isEditing") ? true : false) ? (
          <CommentPostForm
            data-plasmic-name={"commentPostForm"}
            data-plasmic-override={overrides.commentPostForm}
            className={classNames("__wab_instance", sty.commentPostForm, {
              [sty.commentPostFormisEditing]: hasVariant(
                $state,
                "isEditing",
                "isEditing"
              ),
            })}
            isEditing={true}
          />
        ) : null}
      </div>
      <Button
        data-plasmic-name={"repliesLink"}
        data-plasmic-override={overrides.repliesLink}
        className={classNames("__wab_instance", sty.repliesLink, {
          [sty.repliesLinkhoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
          [sty.repliesLinkthread]: hasVariant($state, "thread", "thread"),
        })}
        type={["link"]}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.texthoverBox]: hasVariant($state, "hoverBox", "hoverBox"),
              [sty.textthread]: hasVariant($state, "thread", "thread"),
            }
          )}
        >
          {"3 replies"}
        </div>
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatarContainer",
    "img",
    "userFullName",
    "timestamp",
    "actions",
    "btnMore",
    "threadHistoryStatus",
    "subjectLabel",
    "body",
    "reactionsContainer",
    "btnAddReaction",
    "svg",
    "commentPostForm",
    "repliesLink",
    "text",
  ],
  avatarContainer: ["avatarContainer", "img"],
  img: ["img"],
  userFullName: ["userFullName"],
  timestamp: ["timestamp"],
  actions: ["actions", "btnMore", "threadHistoryStatus"],
  btnMore: ["btnMore"],
  threadHistoryStatus: ["threadHistoryStatus"],
  subjectLabel: ["subjectLabel"],
  body: ["body"],
  reactionsContainer: ["reactionsContainer", "btnAddReaction", "svg"],
  btnAddReaction: ["btnAddReaction", "svg"],
  svg: ["svg"],
  commentPostForm: ["commentPostForm"],
  repliesLink: ["repliesLink", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatarContainer: "div";
  img: typeof PlasmicImg__;
  userFullName: "span";
  timestamp: "span";
  actions: "div";
  btnMore: typeof MenuButton;
  threadHistoryStatus: typeof ThreadHistoryStatus;
  subjectLabel: "div";
  body: "div";
  reactionsContainer: "div";
  btnAddReaction: typeof IconButton;
  svg: "svg";
  commentPostForm: typeof CommentPostForm;
  repliesLink: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentPost__VariantsArgs;
    args?: PlasmicCommentPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommentPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentPost__ArgProps,
          internalVariantPropNames: PlasmicCommentPost__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentPost";
  } else {
    func.displayName = `PlasmicCommentPost.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentPost = Object.assign(
  // Top-level PlasmicCommentPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatarContainer: makeNodeComponent("avatarContainer"),
    img: makeNodeComponent("img"),
    userFullName: makeNodeComponent("userFullName"),
    timestamp: makeNodeComponent("timestamp"),
    actions: makeNodeComponent("actions"),
    btnMore: makeNodeComponent("btnMore"),
    threadHistoryStatus: makeNodeComponent("threadHistoryStatus"),
    subjectLabel: makeNodeComponent("subjectLabel"),
    body: makeNodeComponent("body"),
    reactionsContainer: makeNodeComponent("reactionsContainer"),
    btnAddReaction: makeNodeComponent("btnAddReaction"),
    svg: makeNodeComponent("svg"),
    commentPostForm: makeNodeComponent("commentPostForm"),
    repliesLink: makeNodeComponent("repliesLink"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCommentPost
    internalVariantProps: PlasmicCommentPost__VariantProps,
    internalArgProps: PlasmicCommentPost__ArgProps,
  }
);

export default PlasmicCommentPost;
/* prettier-ignore-end */
