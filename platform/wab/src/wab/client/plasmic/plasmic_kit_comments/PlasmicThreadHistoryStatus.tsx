/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: E0P_lFzVr70L

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import { Tooltip } from "../../components/plexus/Tooltip"; // plasmic-import: EBbuUzYSewBk/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicThreadHistoryStatus.module.css"; // plasmic-import: E0P_lFzVr70L/css

import CheckedCheckboxSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CheckedCheckboxSvg"; // plasmic-import: FOJsdThB5rU-/icon

createPlasmicElementProxy;

export type PlasmicThreadHistoryStatus__VariantMembers = {
  resolved: "resolved";
  isLoading: "isLoading";
};
export type PlasmicThreadHistoryStatus__VariantsArgs = {
  resolved?: SingleBooleanChoiceArg<"resolved">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};
type VariantPropType = keyof PlasmicThreadHistoryStatus__VariantsArgs;
export const PlasmicThreadHistoryStatus__VariantProps =
  new Array<VariantPropType>("resolved", "isLoading");

export type PlasmicThreadHistoryStatus__ArgsType = {};
type ArgPropType = keyof PlasmicThreadHistoryStatus__ArgsType;
export const PlasmicThreadHistoryStatus__ArgProps = new Array<ArgPropType>();

export type PlasmicThreadHistoryStatus__OverridesType = {
  root?: Flex__<"div">;
  tooltip?: Flex__<typeof Tooltip>;
  status?: Flex__<typeof IconButton>;
  svg?: Flex__<"svg">;
};

export interface DefaultThreadHistoryStatusProps {
  resolved?: SingleBooleanChoiceArg<"resolved">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

const $$ = {};

function PlasmicThreadHistoryStatus__RenderFunc(props: {
  variants: PlasmicThreadHistoryStatus__VariantsArgs;
  args: PlasmicThreadHistoryStatus__ArgsType;
  overrides: PlasmicThreadHistoryStatus__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "resolved",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.resolved,
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLoading,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootresolved]: hasVariant($state, "resolved", "resolved") }
      )}
    >
      <Tooltip
        data-plasmic-name={"tooltip"}
        data-plasmic-override={overrides.tooltip}
        content={
          hasVariant($state, "resolved", "resolved") ? "Re-open" : "Resolve"
        }
        isDisabled={
          hasVariant($state, "isLoading", "isLoading") ? true : undefined
        }
        offset={20}
        trigger={
          <IconButton
            data-plasmic-name={"status"}
            data-plasmic-override={overrides.status}
            className={classNames("__wab_instance", sty.status, {
              [sty.statusisLoading]: hasVariant(
                $state,
                "isLoading",
                "isLoading"
              ),
              [sty.statusresolved]: hasVariant($state, "resolved", "resolved"),
            })}
            disabled={
              hasVariant($state, "isLoading", "isLoading") ? true : undefined
            }
            isActive={
              hasVariant($state, "isLoading", "isLoading") ? true : undefined
            }
            isLoading={
              hasVariant($state, "isLoading", "isLoading") ? true : undefined
            }
            size={"medium"}
            type={
              hasVariant($state, "resolved", "resolved") ? ["black"] : undefined
            }
            withBackgroundHover={true}
          >
            <CheckedCheckboxSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgisLoading]: hasVariant(
                  $state,
                  "isLoading",
                  "isLoading"
                ),
                [sty.svgresolved]: hasVariant($state, "resolved", "resolved"),
              })}
              role={"img"}
            />
          </IconButton>
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tooltip", "status", "svg"],
  tooltip: ["tooltip", "status", "svg"],
  status: ["status", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tooltip: typeof Tooltip;
  status: typeof IconButton;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThreadHistoryStatus__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThreadHistoryStatus__VariantsArgs;
    args?: PlasmicThreadHistoryStatus__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThreadHistoryStatus__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicThreadHistoryStatus__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicThreadHistoryStatus__ArgProps,
          internalVariantPropNames: PlasmicThreadHistoryStatus__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicThreadHistoryStatus__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThreadHistoryStatus";
  } else {
    func.displayName = `PlasmicThreadHistoryStatus.${nodeName}`;
  }
  return func;
}

export const PlasmicThreadHistoryStatus = Object.assign(
  // Top-level PlasmicThreadHistoryStatus renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tooltip: makeNodeComponent("tooltip"),
    status: makeNodeComponent("status"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicThreadHistoryStatus
    internalVariantProps: PlasmicThreadHistoryStatus__VariantProps,
    internalArgProps: PlasmicThreadHistoryStatus__ArgProps,
  }
);

export default PlasmicThreadHistoryStatus;
/* prettier-ignore-end */
