/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: nObxvgrqmfvo

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CommentPost from "../../components/comments/CommentPost"; // plasmic-import: l_AKXl2AAu/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicThreadList.module.css"; // plasmic-import: nObxvgrqmfvo/css

import SpeechBubblePlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SpeechBubblePlusSvg"; // plasmic-import: g2gTPsRaJ/icon

createPlasmicElementProxy;

export type PlasmicThreadList__VariantMembers = {
  noComments: "noComments";
};
export type PlasmicThreadList__VariantsArgs = {
  noComments?: SingleBooleanChoiceArg<"noComments">;
};
type VariantPropType = keyof PlasmicThreadList__VariantsArgs;
export const PlasmicThreadList__VariantProps = new Array<VariantPropType>(
  "noComments"
);

export type PlasmicThreadList__ArgsType = {};
type ArgPropType = keyof PlasmicThreadList__ArgsType;
export const PlasmicThreadList__ArgProps = new Array<ArgPropType>();

export type PlasmicThreadList__OverridesType = {
  root?: Flex__<"div">;
  threads?: Flex__<"div">;
  commentPost?: Flex__<typeof CommentPost>;
  noCommentsCard?: Flex__<"div">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultThreadListProps {
  noComments?: SingleBooleanChoiceArg<"noComments">;
  className?: string;
}

const $$ = {};

function PlasmicThreadList__RenderFunc(props: {
  variants: PlasmicThreadList__VariantsArgs;
  args: PlasmicThreadList__ArgsType;
  overrides: PlasmicThreadList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noComments",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noComments,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootnoComments]: hasVariant($state, "noComments", "noComments") }
      )}
    >
      <div
        data-plasmic-name={"threads"}
        data-plasmic-override={overrides.threads}
        className={classNames(projectcss.all, sty.threads, {
          [sty.threadsnoComments]: hasVariant(
            $state,
            "noComments",
            "noComments"
          ),
        })}
      >
        <CommentPost
          data-plasmic-name={"commentPost"}
          data-plasmic-override={overrides.commentPost}
          className={classNames("__wab_instance", sty.commentPost, {
            [sty.commentPostnoComments]: hasVariant(
              $state,
              "noComments",
              "noComments"
            ),
          })}
          thread={true}
        />
      </div>
      {(hasVariant($state, "noComments", "noComments") ? true : false) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"noCommentsCard"}
          data-plasmic-override={overrides.noCommentsCard}
          hasGap={true}
          className={classNames(projectcss.all, sty.noCommentsCard, {
            [sty.noCommentsCardnoComments]: hasVariant(
              $state,
              "noComments",
              "noComments"
            ),
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"No comments"}
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
            style={{ display: "inline-block" }}
          >
            <span
              className={classNames(
                projectcss.all,
                projectcss.span,
                projectcss.__wab_text,
                sty.span__uO4IR
              )}
            >
              {"Use"}
            </span>
            <SpeechBubblePlusSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
              style={{ display: "inline", "vertical-align": "middle" }}
            />

            <span
              className={classNames(
                projectcss.all,
                projectcss.span,
                projectcss.__wab_text,
                sty.span__bNrLu
              )}
            >
              {"to leave a comment on this selected element."}
            </span>
          </div>
        </Stack__>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "threads",
    "commentPost",
    "noCommentsCard",
    "text",
    "freeBox",
    "svg",
  ],
  threads: ["threads", "commentPost"],
  commentPost: ["commentPost"],
  noCommentsCard: ["noCommentsCard", "text", "freeBox", "svg"],
  text: ["text"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  threads: "div";
  commentPost: typeof CommentPost;
  noCommentsCard: "div";
  text: "div";
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThreadList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThreadList__VariantsArgs;
    args?: PlasmicThreadList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThreadList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicThreadList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicThreadList__ArgProps,
          internalVariantPropNames: PlasmicThreadList__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicThreadList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThreadList";
  } else {
    func.displayName = `PlasmicThreadList.${nodeName}`;
  }
  return func;
}

export const PlasmicThreadList = Object.assign(
  // Top-level PlasmicThreadList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    threads: makeNodeComponent("threads"),
    commentPost: makeNodeComponent("commentPost"),
    noCommentsCard: makeNodeComponent("noCommentsCard"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicThreadList
    internalVariantProps: PlasmicThreadList__VariantProps,
    internalArgProps: PlasmicThreadList__ArgProps,
  }
);

export default PlasmicThreadList;
/* prettier-ignore-end */
