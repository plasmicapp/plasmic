/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: bV6LLO0B3Y

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListSectionSeparator from "../../components/ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import { CommentsHeader } from "../../components/comments/CommentsHeader"; // plasmic-import: PTsdlYdahZ76/component
import { ThreadList } from "../../components/comments/ThreadList"; // plasmic-import: nObxvgrqmfvo/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCommentsTab.module.css"; // plasmic-import: bV6LLO0B3Y/css
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss

import BellSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__BellSvg"; // plasmic-import: eCJ0k221t/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicCommentsTab__VariantMembers = {};
export type PlasmicCommentsTab__VariantsArgs = {};
type VariantPropType = keyof PlasmicCommentsTab__VariantsArgs;
export const PlasmicCommentsTab__VariantProps = new Array<VariantPropType>();

export type PlasmicCommentsTab__ArgsType = {};
type ArgPropType = keyof PlasmicCommentsTab__ArgsType;
export const PlasmicCommentsTab__ArgProps = new Array<ArgPropType>();

export type PlasmicCommentsTab__OverridesType = {
  root?: Flex__<"div">;
  currentSelectionSection?: Flex__<"div">;
  filterButton?: Flex__<typeof Button>;
  notificationsButton?: Flex__<typeof Button>;
  currentHeader?: Flex__<typeof CommentsHeader>;
  currentThreads?: Flex__<typeof ThreadList>;
  restHeader?: Flex__<typeof CommentsHeader>;
  restThreads?: Flex__<typeof ThreadList>;
};

export interface DefaultCommentsTabProps {
  className?: string;
}

const $$ = {};

function PlasmicCommentsTab__RenderFunc(props: {
  variants: PlasmicCommentsTab__VariantsArgs;
  args: PlasmicCommentsTab__ArgsType;
  overrides: PlasmicCommentsTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"currentSelectionSection"}
        data-plasmic-override={overrides.currentSelectionSection}
        className={classNames(projectcss.all, sty.currentSelectionSection)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__uwLXj)}>
          <Button
            data-plasmic-name={"filterButton"}
            data-plasmic-override={overrides.filterButton}
            className={classNames("__wab_instance", sty.filterButton)}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__tbr0E)}
                role={"img"}
              />
            }
            pointerCursor={true}
            size={"compact"}
            type={["clear"]}
            withIcons={["endIcon"]}
          >
            {"All comments"}
          </Button>
          <Button
            data-plasmic-name={"notificationsButton"}
            data-plasmic-override={overrides.notificationsButton}
            className={classNames("__wab_instance", sty.notificationsButton)}
            pointerCursor={true}
            type={["clear"]}
          >
            <BellSvgIcon
              className={classNames(projectcss.all, sty.svg__vlq5B)}
              role={"img"}
            />
          </Button>
        </div>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator___22T7
          )}
        />

        <div className={classNames(projectcss.all, sty.freeBox__vqCBj)}>
          <CommentsHeader
            data-plasmic-name={"currentHeader"}
            data-plasmic-override={overrides.currentHeader}
            className={classNames("__wab_instance", sty.currentHeader)}
            showCount={true}
          />
        </div>
        <ThreadList
          data-plasmic-name={"currentThreads"}
          data-plasmic-override={overrides.currentThreads}
          className={classNames("__wab_instance", sty.currentThreads)}
        />
      </div>
      <ListSectionSeparator
        className={classNames(
          "__wab_instance",
          sty.listSectionSeparator__dYZeC
        )}
      />

      <div className={classNames(projectcss.all, sty.freeBox__kdUo2)}>
        <CommentsHeader
          data-plasmic-name={"restHeader"}
          data-plasmic-override={overrides.restHeader}
          className={classNames("__wab_instance", sty.restHeader)}
          name={"Other arenas"}
          nameOnly={true}
          showCount={true}
        />
      </div>
      <ThreadList
        data-plasmic-name={"restThreads"}
        data-plasmic-override={overrides.restThreads}
        className={classNames("__wab_instance", sty.restThreads)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "currentSelectionSection",
    "filterButton",
    "notificationsButton",
    "currentHeader",
    "currentThreads",
    "restHeader",
    "restThreads",
  ],
  currentSelectionSection: [
    "currentSelectionSection",
    "filterButton",
    "notificationsButton",
    "currentHeader",
    "currentThreads",
  ],
  filterButton: ["filterButton"],
  notificationsButton: ["notificationsButton"],
  currentHeader: ["currentHeader"],
  currentThreads: ["currentThreads"],
  restHeader: ["restHeader"],
  restThreads: ["restThreads"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  currentSelectionSection: "div";
  filterButton: typeof Button;
  notificationsButton: typeof Button;
  currentHeader: typeof CommentsHeader;
  currentThreads: typeof ThreadList;
  restHeader: typeof CommentsHeader;
  restThreads: typeof ThreadList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommentsTab__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommentsTab__VariantsArgs;
    args?: PlasmicCommentsTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCommentsTab__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommentsTab__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommentsTab__ArgProps,
          internalVariantPropNames: PlasmicCommentsTab__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCommentsTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentsTab";
  } else {
    func.displayName = `PlasmicCommentsTab.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentsTab = Object.assign(
  // Top-level PlasmicCommentsTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    currentSelectionSection: makeNodeComponent("currentSelectionSection"),
    filterButton: makeNodeComponent("filterButton"),
    notificationsButton: makeNodeComponent("notificationsButton"),
    currentHeader: makeNodeComponent("currentHeader"),
    currentThreads: makeNodeComponent("currentThreads"),
    restHeader: makeNodeComponent("restHeader"),
    restThreads: makeNodeComponent("restThreads"),

    // Metadata about props expected for PlasmicCommentsTab
    internalVariantProps: PlasmicCommentsTab__VariantProps,
    internalArgProps: PlasmicCommentsTab__ArgProps,
  }
);

export default PlasmicCommentsTab;
/* prettier-ignore-end */
