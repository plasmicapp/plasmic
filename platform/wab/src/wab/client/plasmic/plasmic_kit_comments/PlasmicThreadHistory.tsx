/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: qiIt-rIFSO0f

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicThreadHistory.module.css"; // plasmic-import: qiIt-rIFSO0f/css

import _69B43A437055B398Eff90A515Ed4F551Svg2AijDeIx4X from "./images/_69B43A437055B398Eff90A515Ed4F551Svg.svg"; // plasmic-import: 2aijDEIx4x/picture

createPlasmicElementProxy;

export type PlasmicThreadHistory__VariantMembers = {
  isResolved: "isResolved";
};
export type PlasmicThreadHistory__VariantsArgs = {
  isResolved?: SingleBooleanChoiceArg<"isResolved">;
};
type VariantPropType = keyof PlasmicThreadHistory__VariantsArgs;
export const PlasmicThreadHistory__VariantProps = new Array<VariantPropType>(
  "isResolved"
);

export type PlasmicThreadHistory__ArgsType = {};
type ArgPropType = keyof PlasmicThreadHistory__ArgsType;
export const PlasmicThreadHistory__ArgProps = new Array<ArgPropType>();

export type PlasmicThreadHistory__OverridesType = {
  root?: Flex__<"div">;
  avatarContainer?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
  userFullName?: Flex__<"span">;
  timestamp?: Flex__<"span">;
  body?: Flex__<"div">;
};

export interface DefaultThreadHistoryProps {
  isResolved?: SingleBooleanChoiceArg<"isResolved">;
  className?: string;
}

const $$ = {};

function PlasmicThreadHistory__RenderFunc(props: {
  variants: PlasmicThreadHistory__VariantsArgs;
  args: PlasmicThreadHistory__ArgsType;
  overrides: PlasmicThreadHistory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isResolved",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isResolved,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootisResolved]: hasVariant($state, "isResolved", "isResolved") }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sIx5P)}
      >
        <div
          data-plasmic-name={"avatarContainer"}
          data-plasmic-override={overrides.avatarContainer}
          className={classNames(projectcss.all, sty.avatarContainer)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: _69B43A437055B398Eff90A515Ed4F551Svg2AijDeIx4X,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1,
            }}
          />
        </div>
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            {
              <span
                data-plasmic-name={"userFullName"}
                data-plasmic-override={overrides.userFullName}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.userFullName
                )}
              >
                {"User Name"}
              </span>
            }
            <React.Fragment> </React.Fragment>
            {
              <span
                data-plasmic-name={"timestamp"}
                data-plasmic-override={overrides.timestamp}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  projectcss.plasmic_default__inline,
                  sty.timestamp
                )}
              >
                {"3 hours ago"}
              </span>
            }
            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__oEfDr)}>
        <div className={classNames(projectcss.all, sty.freeBox___8OEcy)}>
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.body,
              {
                [sty.bodyisResolved]: hasVariant(
                  $state,
                  "isResolved",
                  "isResolved"
                ),
              }
            )}
          >
            {hasVariant($state, "isResolved", "isResolved")
              ? "Comment thread resolved."
              : "Comment thread reopened."}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatarContainer",
    "img",
    "text",
    "userFullName",
    "timestamp",
    "body",
  ],
  avatarContainer: ["avatarContainer", "img"],
  img: ["img"],
  text: ["text", "userFullName", "timestamp"],
  userFullName: ["userFullName"],
  timestamp: ["timestamp"],
  body: ["body"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatarContainer: "div";
  img: typeof PlasmicImg__;
  text: "div";
  userFullName: "span";
  timestamp: "span";
  body: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThreadHistory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThreadHistory__VariantsArgs;
    args?: PlasmicThreadHistory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThreadHistory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicThreadHistory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicThreadHistory__ArgProps,
          internalVariantPropNames: PlasmicThreadHistory__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicThreadHistory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThreadHistory";
  } else {
    func.displayName = `PlasmicThreadHistory.${nodeName}`;
  }
  return func;
}

export const PlasmicThreadHistory = Object.assign(
  // Top-level PlasmicThreadHistory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatarContainer: makeNodeComponent("avatarContainer"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    userFullName: makeNodeComponent("userFullName"),
    timestamp: makeNodeComponent("timestamp"),
    body: makeNodeComponent("body"),

    // Metadata about props expected for PlasmicThreadHistory
    internalVariantProps: PlasmicThreadHistory__VariantProps,
    internalArgProps: PlasmicThreadHistory__ArgProps,
  }
);

export default PlasmicThreadHistory;
/* prettier-ignore-end */
