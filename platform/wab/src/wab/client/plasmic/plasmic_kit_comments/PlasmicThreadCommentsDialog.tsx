/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: BP7V3EkXPURJVwwMyWoHn
// Component: UhTNVxujj1gR

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CommentPost from "../../components/comments/CommentPost"; // plasmic-import: l_AKXl2AAu/component
import CommentPostForm from "../../components/comments/CommentPostForm"; // plasmic-import: qi3Y1X2qZ7/component
import { CommentsDialogHead } from "../../components/comments/CommentsDialogHead"; // plasmic-import: tccr1SFVw_AY/component
import ThreadComments from "../../components/comments/ThreadComments"; // plasmic-import: QY53tkpvLv/component
import { Dialog } from "../../components/widgets/Dialog"; // plasmic-import: en2IIw2C3_aI/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_kit_comments.module.css"; // plasmic-import: BP7V3EkXPURJVwwMyWoHn/projectcss
import sty from "./PlasmicThreadCommentsDialog.module.css"; // plasmic-import: UhTNVxujj1gR/css

createPlasmicElementProxy;

export type PlasmicThreadCommentsDialog__VariantMembers = {
  hover: "hover";
};
export type PlasmicThreadCommentsDialog__VariantsArgs = {
  hover?: SingleBooleanChoiceArg<"hover">;
};
type VariantPropType = keyof PlasmicThreadCommentsDialog__VariantsArgs;
export const PlasmicThreadCommentsDialog__VariantProps =
  new Array<VariantPropType>("hover");

export type PlasmicThreadCommentsDialog__ArgsType = {};
type ArgPropType = keyof PlasmicThreadCommentsDialog__ArgsType;
export const PlasmicThreadCommentsDialog__ArgProps = new Array<ArgPropType>();

export type PlasmicThreadCommentsDialog__OverridesType = {
  root?: Flex__<typeof Dialog>;
  commentsDialogHead?: Flex__<typeof CommentsDialogHead>;
  threadComments?: Flex__<typeof ThreadComments>;
  commentPost?: Flex__<typeof CommentPost>;
  freeBox?: Flex__<"div">;
  replyForm?: Flex__<typeof CommentPostForm>;
};

export interface DefaultThreadCommentsDialogProps {
  hover?: SingleBooleanChoiceArg<"hover">;
  className?: string;
}

const $$ = {};

function PlasmicThreadCommentsDialog__RenderFunc(props: {
  variants: PlasmicThreadCommentsDialog__VariantsArgs;
  args: PlasmicThreadCommentsDialog__ArgsType;
  overrides: PlasmicThreadCommentsDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hover",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hover,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Dialog
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      content={
        <React.Fragment>
          {(hasVariant($state, "hover", "hover") ? false : true) ? (
            <ThreadComments
              data-plasmic-name={"threadComments"}
              data-plasmic-override={overrides.threadComments}
              className={classNames("__wab_instance", sty.threadComments, {
                [sty.threadCommentshover]: hasVariant($state, "hover", "hover"),
              })}
            />
          ) : null}
          {(hasVariant($state, "hover", "hover") ? true : false) ? (
            <CommentPost
              data-plasmic-name={"commentPost"}
              data-plasmic-override={overrides.commentPost}
              className={classNames("__wab_instance", {
                [sty.commentPosthover]: hasVariant($state, "hover", "hover"),
              })}
            />
          ) : null}
        </React.Fragment>
      }
      footer={
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxhover]: hasVariant($state, "hover", "hover"),
          })}
        >
          <CommentPostForm
            data-plasmic-name={"replyForm"}
            data-plasmic-override={overrides.replyForm}
            className={classNames("__wab_instance", sty.replyForm, {
              [sty.replyFormhover]: hasVariant($state, "hover", "hover"),
            })}
          />
        </div>
      }
      heading={
        <CommentsDialogHead
          data-plasmic-name={"commentsDialogHead"}
          data-plasmic-override={overrides.commentsDialogHead}
          canUpdateHistory={true}
          className={classNames("__wab_instance", sty.commentsDialogHead, {
            [sty.commentsDialogHeadhover]: hasVariant($state, "hover", "hover"),
          })}
        />
      }
      showFooter={false}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "commentsDialogHead",
    "threadComments",
    "commentPost",
    "freeBox",
    "replyForm",
  ],
  commentsDialogHead: ["commentsDialogHead"],
  threadComments: ["threadComments"],
  commentPost: ["commentPost"],
  freeBox: ["freeBox", "replyForm"],
  replyForm: ["replyForm"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Dialog;
  commentsDialogHead: typeof CommentsDialogHead;
  threadComments: typeof ThreadComments;
  commentPost: typeof CommentPost;
  freeBox: "div";
  replyForm: typeof CommentPostForm;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThreadCommentsDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThreadCommentsDialog__VariantsArgs;
    args?: PlasmicThreadCommentsDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThreadCommentsDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicThreadCommentsDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicThreadCommentsDialog__ArgProps,
          internalVariantPropNames: PlasmicThreadCommentsDialog__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicThreadCommentsDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThreadCommentsDialog";
  } else {
    func.displayName = `PlasmicThreadCommentsDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicThreadCommentsDialog = Object.assign(
  // Top-level PlasmicThreadCommentsDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    commentsDialogHead: makeNodeComponent("commentsDialogHead"),
    threadComments: makeNodeComponent("threadComments"),
    commentPost: makeNodeComponent("commentPost"),
    freeBox: makeNodeComponent("freeBox"),
    replyForm: makeNodeComponent("replyForm"),

    // Metadata about props expected for PlasmicThreadCommentsDialog
    internalVariantProps: PlasmicThreadCommentsDialog__VariantProps,
    internalArgProps: PlasmicThreadCommentsDialog__ArgProps,
  }
);

export default PlasmicThreadCommentsDialog;
/* prettier-ignore-end */
