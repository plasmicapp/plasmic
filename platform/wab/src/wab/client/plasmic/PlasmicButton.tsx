/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXkSR39sgCDWSitZxC5xFV
// Component: SEF-sRmSoqV5c

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "./plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: SEF-sRmSoqV5c/css
import projectcss from "./PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss

import ArrowRightSvgIcon from "./plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "./plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  type:
    | "primary"
    | "link"
    | "secondary"
    | "backlitError"
    | "backlitInfo"
    | "toggleOn"
    | "toggleOff"
    | "clear"
    | "clearPrimary"
    | "seamless"
    | "chip"
    | "hasCaption"
    | "switchOn"
    | "noPressed"
    | "bordered"
    | "leftAligned";
  withIcons: "startIcon" | "endIcon" | "endIconOnHover";
  font: "bold" | "dim";
  size: "small" | "stretch" | "wide" | "compact" | "medium";
  disabled: "disabled";
  pointerCursor: "pointerCursor";
  color: "blue" | "green" | "red" | "purple" | "darkRed";
};
export type PlasmicButton__VariantsArgs = {
  type?: MultiChoiceArg<
    | "primary"
    | "link"
    | "secondary"
    | "backlitError"
    | "backlitInfo"
    | "toggleOn"
    | "toggleOff"
    | "clear"
    | "clearPrimary"
    | "seamless"
    | "chip"
    | "hasCaption"
    | "switchOn"
    | "noPressed"
    | "bordered"
    | "leftAligned"
  >;
  withIcons?: MultiChoiceArg<"startIcon" | "endIcon" | "endIconOnHover">;
  font?: SingleChoiceArg<"bold" | "dim">;
  size?: SingleChoiceArg<"small" | "stretch" | "wide" | "compact" | "medium">;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  pointerCursor?: SingleBooleanChoiceArg<"pointerCursor">;
  color?: SingleChoiceArg<"blue" | "green" | "red" | "purple" | "darkRed">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "type",
  "withIcons",
  "font",
  "size",
  "disabled",
  "pointerCursor",
  "color"
);

export type PlasmicButton__ArgsType = {
  isSubmit?: boolean;
  onClick?: (event: any) => void;
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  caption?: React.ReactNode;
  endIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "isSubmit",
  "onClick",
  "startIcon",
  "children",
  "caption",
  "endIcon"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<"button">;
  startIconContainer?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  endIconContainer?: Flex__<"div">;
};

export interface DefaultButtonProps {
  isSubmit?: boolean;
  onClick?: (event: any) => void;
  startIcon?: React.ReactNode;
  children?: React.ReactNode;
  caption?: React.ReactNode;
  endIcon?: React.ReactNode;
  type?: MultiChoiceArg<
    | "primary"
    | "link"
    | "secondary"
    | "backlitError"
    | "backlitInfo"
    | "toggleOn"
    | "toggleOff"
    | "clear"
    | "clearPrimary"
    | "seamless"
    | "chip"
    | "hasCaption"
    | "switchOn"
    | "noPressed"
    | "bordered"
    | "leftAligned"
  >;
  withIcons?: MultiChoiceArg<"startIcon" | "endIcon" | "endIconOnHover">;
  font?: SingleChoiceArg<"bold" | "dim">;
  size?: SingleChoiceArg<"small" | "stretch" | "wide" | "compact" | "medium">;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  pointerCursor?: SingleBooleanChoiceArg<"pointerCursor">;
  color?: SingleChoiceArg<"blue" | "green" | "red" | "purple" | "darkRed">;
  className?: string;
}

const $$ = {};

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "withIcons",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withIcons,
      },
      {
        path: "font",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.font,
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size,
      },
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled,
      },
      {
        path: "pointerCursor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pointerCursor,
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <Stack__
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_blue]: hasVariant($state, "color", "blue"),
          [sty.rootcolor_darkRed]: hasVariant($state, "color", "darkRed"),
          [sty.rootcolor_green]: hasVariant($state, "color", "green"),
          [sty.rootcolor_purple]: hasVariant($state, "color", "purple"),
          [sty.rootcolor_red]: hasVariant($state, "color", "red"),
          [sty.rootdisabled]: hasVariant($state, "disabled", "disabled"),
          [sty.rootdisabled_withIcons_endIconOnHover]:
            hasVariant($state, "disabled", "disabled") &&
            hasVariant($state, "withIcons", "endIconOnHover"),
          [sty.rootdisabled_withIcons_endIcon]:
            hasVariant($state, "disabled", "disabled") &&
            hasVariant($state, "withIcons", "endIcon"),
          [sty.rootdisabled_withIcons_startIcon]:
            hasVariant($state, "disabled", "disabled") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.rootfont_bold]: hasVariant($state, "font", "bold"),
          [sty.rootfont_dim]: hasVariant($state, "font", "dim"),
          [sty.rootpointerCursor]: hasVariant(
            $state,
            "pointerCursor",
            "pointerCursor"
          ),
          [sty.rootsize_compact]: hasVariant($state, "size", "compact"),
          [sty.rootsize_compact_withIcons_startIcon]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.rootsize_medium]: hasVariant($state, "size", "medium"),
          [sty.rootsize_medium_withIcons_endIconOnHover]:
            hasVariant($state, "withIcons", "endIconOnHover") &&
            hasVariant($state, "size", "medium"),
          [sty.rootsize_medium_withIcons_endIcon]:
            hasVariant($state, "withIcons", "endIcon") &&
            hasVariant($state, "size", "medium"),
          [sty.rootsize_medium_withIcons_startIcon]:
            hasVariant($state, "size", "medium") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.rootsize_small_type_chip_withIcons_startIcon]:
            hasVariant($state, "size", "small") &&
            hasVariant($state, "withIcons", "startIcon") &&
            hasVariant($state, "type", "chip"),
          [sty.rootsize_small_withIcons_endIcon]:
            hasVariant($state, "size", "small") &&
            hasVariant($state, "withIcons", "endIcon"),
          [sty.rootsize_small_withIcons_startIcon]:
            hasVariant($state, "size", "small") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.rootsize_stretch]: hasVariant($state, "size", "stretch"),
          [sty.rootsize_wide]: hasVariant($state, "size", "wide"),
          [sty.rootsize_wide_withIcons_startIcon]:
            hasVariant($state, "size", "wide") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.roottype_backlitError]: hasVariant(
            $state,
            "type",
            "backlitError"
          ),
          [sty.roottype_backlitError_withIcons_startIcon]:
            hasVariant($state, "withIcons", "startIcon") &&
            hasVariant($state, "type", "backlitError"),
          [sty.roottype_backlitInfo]: hasVariant($state, "type", "backlitInfo"),
          [sty.roottype_bordered]: hasVariant($state, "type", "bordered"),
          [sty.roottype_bordered_color_green]:
            hasVariant($state, "type", "bordered") &&
            hasVariant($state, "color", "green"),
          [sty.roottype_bordered_color_red]:
            hasVariant($state, "color", "red") &&
            hasVariant($state, "type", "bordered"),
          [sty.roottype_chip]: hasVariant($state, "type", "chip"),
          [sty.roottype_chip_withIcons_startIcon]:
            hasVariant($state, "withIcons", "startIcon") &&
            hasVariant($state, "type", "chip"),
          [sty.roottype_clearPrimary]: hasVariant(
            $state,
            "type",
            "clearPrimary"
          ),
          [sty.roottype_clearPrimary_withIcons_startIcon]:
            hasVariant($state, "type", "clearPrimary") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.roottype_clear]: hasVariant($state, "type", "clear"),
          [sty.roottype_hasCaption]: hasVariant($state, "type", "hasCaption"),
          [sty.roottype_link]: hasVariant($state, "type", "link"),
          [sty.roottype_noPressed]: hasVariant($state, "type", "noPressed"),
          [sty.roottype_primary]: hasVariant($state, "type", "primary"),
          [sty.roottype_primary_withIcons_startIcon]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.roottype_seamless]: hasVariant($state, "type", "seamless"),
          [sty.roottype_secondary]: hasVariant($state, "type", "secondary"),
          [sty.roottype_switchOn]: hasVariant($state, "type", "switchOn"),
          [sty.roottype_toggleOff]: hasVariant($state, "type", "toggleOff"),
          [sty.roottype_toggleOn]: hasVariant($state, "type", "toggleOn"),
          [sty.roottype_toggleOn_withIcons_startIcon]:
            hasVariant($state, "type", "toggleOn") &&
            hasVariant($state, "withIcons", "startIcon"),
          [sty.rootwithIcons_endIconOnHover]: hasVariant(
            $state,
            "withIcons",
            "endIconOnHover"
          ),
          [sty.rootwithIcons_endIconOnHover_size_compact]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "withIcons", "endIconOnHover"),
          [sty.rootwithIcons_endIconOnHover_size_small]:
            hasVariant($state, "size", "small") &&
            hasVariant($state, "withIcons", "endIconOnHover"),
          [sty.rootwithIcons_endIconOnHover_size_wide]:
            hasVariant($state, "size", "wide") &&
            hasVariant($state, "withIcons", "endIconOnHover"),
          [sty.rootwithIcons_endIconOnHover_withIcons_startIcon]:
            hasVariant($state, "withIcons", "startIcon") &&
            hasVariant($state, "withIcons", "endIconOnHover"),
          [sty.rootwithIcons_endIcon]: hasVariant(
            $state,
            "withIcons",
            "endIcon"
          ),
          [sty.rootwithIcons_endIcon_size_compact]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "withIcons", "endIcon"),
          [sty.rootwithIcons_endIcon_size_wide]:
            hasVariant($state, "size", "wide") &&
            hasVariant($state, "withIcons", "endIcon"),
          [sty.rootwithIcons_endIcon_type_hasCaption]:
            hasVariant($state, "type", "hasCaption") &&
            hasVariant($state, "withIcons", "endIcon"),
          [sty.rootwithIcons_startIcon]: hasVariant(
            $state,
            "withIcons",
            "startIcon"
          ),
        }
      )}
      disabled={hasVariant($state, "disabled", "disabled") ? true : undefined}
      onClick={args.onClick}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(hasVariant($state, "withIcons", "startIcon") ? true : false) ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer, {
            [sty.startIconContainercolor_purple]: hasVariant(
              $state,
              "color",
              "purple"
            ),
            [sty.startIconContainercolor_red]: hasVariant(
              $state,
              "color",
              "red"
            ),
            [sty.startIconContainersize_compact_withIcons_startIcon]:
              hasVariant($state, "size", "compact") &&
              hasVariant($state, "withIcons", "startIcon"),
            [sty.startIconContainersize_medium]: hasVariant(
              $state,
              "size",
              "medium"
            ),
            [sty.startIconContainersize_medium_withIcons_startIcon]:
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withIcons", "startIcon"),
            [sty.startIconContainersize_small_withIcons_startIcon]:
              hasVariant($state, "size", "small") &&
              hasVariant($state, "withIcons", "startIcon"),
            [sty.startIconContainertype_backlitError]: hasVariant(
              $state,
              "type",
              "backlitError"
            ),
            [sty.startIconContainertype_primary_withIcons_startIcon]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "withIcons", "startIcon"),
            [sty.startIconContainerwithIcons_endIconOnHover]: hasVariant(
              $state,
              "withIcons",
              "endIconOnHover"
            ),
            [sty.startIconContainerwithIcons_endIconOnHover_withIcons_startIcon]:
              hasVariant($state, "withIcons", "startIcon") &&
              hasVariant($state, "withIcons", "endIconOnHover"),
            [sty.startIconContainerwithIcons_endIcon]: hasVariant(
              $state,
              "withIcons",
              "endIcon"
            ),
            [sty.startIconContainerwithIcons_startIcon]: hasVariant(
              $state,
              "withIcons",
              "startIcon"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__lWcVt)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconcolor_blue]: hasVariant(
                $state,
                "color",
                "blue"
              ),
              [sty.slotTargetStartIconcolor_green]: hasVariant(
                $state,
                "color",
                "green"
              ),
              [sty.slotTargetStartIconcolor_purple]: hasVariant(
                $state,
                "color",
                "purple"
              ),
              [sty.slotTargetStartIconcolor_red]: hasVariant(
                $state,
                "color",
                "red"
              ),
              [sty.slotTargetStartIcondisabled_withIcons_endIconOnHover]:
                hasVariant($state, "disabled", "disabled") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetStartIcondisabled_withIcons_endIcon]:
                hasVariant($state, "disabled", "disabled") &&
                hasVariant($state, "withIcons", "endIcon"),
              [sty.slotTargetStartIcondisabled_withIcons_startIcon]:
                hasVariant($state, "disabled", "disabled") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIconfont_bold]: hasVariant(
                $state,
                "font",
                "bold"
              ),
              [sty.slotTargetStartIconfont_dim]: hasVariant(
                $state,
                "font",
                "dim"
              ),
              [sty.slotTargetStartIconsize_medium]: hasVariant(
                $state,
                "size",
                "medium"
              ),
              [sty.slotTargetStartIconsize_medium_withIcons_startIcon]:
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIconsize_small_withIcons_startIcon]:
                hasVariant($state, "size", "small") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_backlitError]: hasVariant(
                $state,
                "type",
                "backlitError"
              ),
              [sty.slotTargetStartIcontype_backlitError_withIcons_startIcon]:
                hasVariant($state, "type", "backlitError") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_backlitInfo]: hasVariant(
                $state,
                "type",
                "backlitInfo"
              ),
              [sty.slotTargetStartIcontype_backlitInfo_withIcons_startIcon]:
                hasVariant($state, "type", "backlitInfo") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_chip]: hasVariant(
                $state,
                "type",
                "chip"
              ),
              [sty.slotTargetStartIcontype_clearPrimary]: hasVariant(
                $state,
                "type",
                "clearPrimary"
              ),
              [sty.slotTargetStartIcontype_clearPrimary_withIcons_endIconOnHover]:
                hasVariant($state, "type", "clearPrimary") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetStartIcontype_clearPrimary_withIcons_endIcon]:
                hasVariant($state, "type", "clearPrimary") &&
                hasVariant($state, "withIcons", "endIcon"),
              [sty.slotTargetStartIcontype_clearPrimary_withIcons_startIcon]:
                hasVariant($state, "type", "clearPrimary") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_clear]: hasVariant(
                $state,
                "type",
                "clear"
              ),
              [sty.slotTargetStartIcontype_clear_withIcons_startIcon]:
                hasVariant($state, "type", "clear") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_link]: hasVariant(
                $state,
                "type",
                "link"
              ),
              [sty.slotTargetStartIcontype_link_withIcons_endIconOnHover]:
                hasVariant($state, "withIcons", "endIconOnHover") &&
                hasVariant($state, "type", "link"),
              [sty.slotTargetStartIcontype_link_withIcons_endIcon]:
                hasVariant($state, "withIcons", "endIcon") &&
                hasVariant($state, "type", "link"),
              [sty.slotTargetStartIcontype_link_withIcons_startIcon]:
                hasVariant($state, "withIcons", "startIcon") &&
                hasVariant($state, "type", "link"),
              [sty.slotTargetStartIcontype_primary]: hasVariant(
                $state,
                "type",
                "primary"
              ),
              [sty.slotTargetStartIcontype_primary_withIcons_startIcon]:
                hasVariant($state, "type", "primary") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_seamless]: hasVariant(
                $state,
                "type",
                "seamless"
              ),
              [sty.slotTargetStartIcontype_seamless_withIcons_endIconOnHover]:
                hasVariant($state, "type", "seamless") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetStartIcontype_seamless_withIcons_endIcon]:
                hasVariant($state, "type", "seamless") &&
                hasVariant($state, "withIcons", "endIcon"),
              [sty.slotTargetStartIcontype_seamless_withIcons_startIcon]:
                hasVariant($state, "type", "seamless") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_secondary]: hasVariant(
                $state,
                "type",
                "secondary"
              ),
              [sty.slotTargetStartIcontype_secondary_withIcons_startIcon]:
                hasVariant($state, "type", "secondary") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_toggleOff]: hasVariant(
                $state,
                "type",
                "toggleOff"
              ),
              [sty.slotTargetStartIcontype_toggleOff_withIcons_startIcon]:
                hasVariant($state, "type", "toggleOff") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIcontype_toggleOn]: hasVariant(
                $state,
                "type",
                "toggleOn"
              ),
              [sty.slotTargetStartIcontype_toggleOn_withIcons_startIcon]:
                hasVariant($state, "type", "toggleOn") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetStartIconwithIcons_endIconOnHover]: hasVariant(
                $state,
                "withIcons",
                "endIconOnHover"
              ),
              [sty.slotTargetStartIconwithIcons_endIconOnHover_type_primary]:
                hasVariant($state, "withIcons", "endIconOnHover") &&
                hasVariant($state, "type", "primary"),
              [sty.slotTargetStartIconwithIcons_endIconOnHover_withIcons_startIcon]:
                hasVariant($state, "withIcons", "startIcon") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetStartIconwithIcons_endIcon]: hasVariant(
                $state,
                "withIcons",
                "endIcon"
              ),
              [sty.slotTargetStartIconwithIcons_endIcon_type_primary]:
                hasVariant($state, "withIcons", "endIcon") &&
                hasVariant($state, "type", "primary"),
              [sty.slotTargetStartIconwithIcons_startIcon]: hasVariant(
                $state,
                "withIcons",
                "startIcon"
              ),
            }),
          })}
        </div>
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxcolor_blue]: hasVariant($state, "color", "blue"),
          [sty.freeBoxcolor_green]: hasVariant($state, "color", "green"),
          [sty.freeBoxcolor_purple]: hasVariant($state, "color", "purple"),
          [sty.freeBoxcolor_red]: hasVariant($state, "color", "red"),
          [sty.freeBoxsize_stretch]: hasVariant($state, "size", "stretch"),
          [sty.freeBoxtype_hasCaption]: hasVariant(
            $state,
            "type",
            "hasCaption"
          ),
          [sty.freeBoxtype_leftAligned]: hasVariant(
            $state,
            "type",
            "leftAligned"
          ),
          [sty.freeBoxwithIcons_endIconOnHover_withIcons_startIcon]:
            hasVariant($state, "withIcons", "startIcon") &&
            hasVariant($state, "withIcons", "endIconOnHover"),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Button",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_blue]: hasVariant(
              $state,
              "color",
              "blue"
            ),
            [sty.slotTargetChildrencolor_darkRed]: hasVariant(
              $state,
              "color",
              "darkRed"
            ),
            [sty.slotTargetChildrencolor_green]: hasVariant(
              $state,
              "color",
              "green"
            ),
            [sty.slotTargetChildrencolor_purple]: hasVariant(
              $state,
              "color",
              "purple"
            ),
            [sty.slotTargetChildrencolor_red]: hasVariant(
              $state,
              "color",
              "red"
            ),
            [sty.slotTargetChildrendisabled]: hasVariant(
              $state,
              "disabled",
              "disabled"
            ),
            [sty.slotTargetChildrenfont_bold]: hasVariant(
              $state,
              "font",
              "bold"
            ),
            [sty.slotTargetChildrenfont_dim]: hasVariant($state, "font", "dim"),
            [sty.slotTargetChildrenpointerCursor]: hasVariant(
              $state,
              "pointerCursor",
              "pointerCursor"
            ),
            [sty.slotTargetChildrensize_compact]: hasVariant(
              $state,
              "size",
              "compact"
            ),
            [sty.slotTargetChildrensize_medium]: hasVariant(
              $state,
              "size",
              "medium"
            ),
            [sty.slotTargetChildrensize_medium_withIcons_startIcon]:
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withIcons", "startIcon"),
            [sty.slotTargetChildrensize_small]: hasVariant(
              $state,
              "size",
              "small"
            ),
            [sty.slotTargetChildrensize_stretch]: hasVariant(
              $state,
              "size",
              "stretch"
            ),
            [sty.slotTargetChildrensize_wide]: hasVariant(
              $state,
              "size",
              "wide"
            ),
            [sty.slotTargetChildrentype_backlitError]: hasVariant(
              $state,
              "type",
              "backlitError"
            ),
            [sty.slotTargetChildrentype_backlitError_withIcons_startIcon]:
              hasVariant($state, "type", "backlitError") &&
              hasVariant($state, "withIcons", "startIcon"),
            [sty.slotTargetChildrentype_backlitInfo]: hasVariant(
              $state,
              "type",
              "backlitInfo"
            ),
            [sty.slotTargetChildrentype_chip]: hasVariant(
              $state,
              "type",
              "chip"
            ),
            [sty.slotTargetChildrentype_clearPrimary]: hasVariant(
              $state,
              "type",
              "clearPrimary"
            ),
            [sty.slotTargetChildrentype_clear]: hasVariant(
              $state,
              "type",
              "clear"
            ),
            [sty.slotTargetChildrentype_hasCaption]: hasVariant(
              $state,
              "type",
              "hasCaption"
            ),
            [sty.slotTargetChildrentype_leftAligned]: hasVariant(
              $state,
              "type",
              "leftAligned"
            ),
            [sty.slotTargetChildrentype_link]: hasVariant(
              $state,
              "type",
              "link"
            ),
            [sty.slotTargetChildrentype_link_withIcons_startIcon]:
              hasVariant($state, "withIcons", "startIcon") &&
              hasVariant($state, "type", "link"),
            [sty.slotTargetChildrentype_primary]: hasVariant(
              $state,
              "type",
              "primary"
            ),
            [sty.slotTargetChildrentype_primary_withIcons_startIcon]:
              hasVariant($state, "withIcons", "startIcon") &&
              hasVariant($state, "type", "primary"),
            [sty.slotTargetChildrentype_seamless]: hasVariant(
              $state,
              "type",
              "seamless"
            ),
            [sty.slotTargetChildrentype_secondary]: hasVariant(
              $state,
              "type",
              "secondary"
            ),
            [sty.slotTargetChildrentype_toggleOff]: hasVariant(
              $state,
              "type",
              "toggleOff"
            ),
            [sty.slotTargetChildrentype_toggleOn]: hasVariant(
              $state,
              "type",
              "toggleOn"
            ),
            [sty.slotTargetChildrenwithIcons_endIconOnHover]: hasVariant(
              $state,
              "withIcons",
              "endIconOnHover"
            ),
            [sty.slotTargetChildrenwithIcons_endIconOnHover_size_compact]:
              hasVariant($state, "size", "compact") &&
              hasVariant($state, "withIcons", "endIconOnHover"),
            [sty.slotTargetChildrenwithIcons_endIconOnHover_withIcons_startIcon]:
              hasVariant($state, "withIcons", "startIcon") &&
              hasVariant($state, "withIcons", "endIconOnHover"),
            [sty.slotTargetChildrenwithIcons_endIcon]: hasVariant(
              $state,
              "withIcons",
              "endIcon"
            ),
            [sty.slotTargetChildrenwithIcons_endIcon_size_compact]:
              hasVariant($state, "size", "compact") &&
              hasVariant($state, "withIcons", "endIcon"),
            [sty.slotTargetChildrenwithIcons_endIcon_type_hasCaption]:
              hasVariant($state, "type", "hasCaption") &&
              hasVariant($state, "withIcons", "endIcon"),
            [sty.slotTargetChildrenwithIcons_startIcon]: hasVariant(
              $state,
              "withIcons",
              "startIcon"
            ),
          }),
        })}
        {(hasVariant($state, "type", "hasCaption") ? true : false)
          ? renderPlasmicSlot({
              defaultContents: "Caption",
              value: args.caption,
              className: classNames(sty.slotTargetCaption, {
                [sty.slotTargetCaptioncolor_blue]: hasVariant(
                  $state,
                  "color",
                  "blue"
                ),
                [sty.slotTargetCaptioncolor_green]: hasVariant(
                  $state,
                  "color",
                  "green"
                ),
                [sty.slotTargetCaptioncolor_purple]: hasVariant(
                  $state,
                  "color",
                  "purple"
                ),
                [sty.slotTargetCaptioncolor_red]: hasVariant(
                  $state,
                  "color",
                  "red"
                ),
                [sty.slotTargetCaptiondisabled]: hasVariant(
                  $state,
                  "disabled",
                  "disabled"
                ),
                [sty.slotTargetCaptionfont_bold]: hasVariant(
                  $state,
                  "font",
                  "bold"
                ),
                [sty.slotTargetCaptionfont_dim]: hasVariant(
                  $state,
                  "font",
                  "dim"
                ),
                [sty.slotTargetCaptionpointerCursor]: hasVariant(
                  $state,
                  "pointerCursor",
                  "pointerCursor"
                ),
                [sty.slotTargetCaptionsize_compact]: hasVariant(
                  $state,
                  "size",
                  "compact"
                ),
                [sty.slotTargetCaptionsize_medium]: hasVariant(
                  $state,
                  "size",
                  "medium"
                ),
                [sty.slotTargetCaptionsize_medium_withIcons_startIcon]:
                  hasVariant($state, "size", "medium") &&
                  hasVariant($state, "withIcons", "startIcon"),
                [sty.slotTargetCaptionsize_small]: hasVariant(
                  $state,
                  "size",
                  "small"
                ),
                [sty.slotTargetCaptionsize_stretch]: hasVariant(
                  $state,
                  "size",
                  "stretch"
                ),
                [sty.slotTargetCaptionsize_wide]: hasVariant(
                  $state,
                  "size",
                  "wide"
                ),
                [sty.slotTargetCaptiontype_backlitError]: hasVariant(
                  $state,
                  "type",
                  "backlitError"
                ),
                [sty.slotTargetCaptiontype_backlitError_withIcons_startIcon]:
                  hasVariant($state, "type", "backlitError") &&
                  hasVariant($state, "withIcons", "startIcon"),
                [sty.slotTargetCaptiontype_backlitInfo]: hasVariant(
                  $state,
                  "type",
                  "backlitInfo"
                ),
                [sty.slotTargetCaptiontype_chip]: hasVariant(
                  $state,
                  "type",
                  "chip"
                ),
                [sty.slotTargetCaptiontype_clearPrimary]: hasVariant(
                  $state,
                  "type",
                  "clearPrimary"
                ),
                [sty.slotTargetCaptiontype_clear]: hasVariant(
                  $state,
                  "type",
                  "clear"
                ),
                [sty.slotTargetCaptiontype_hasCaption]: hasVariant(
                  $state,
                  "type",
                  "hasCaption"
                ),
                [sty.slotTargetCaptiontype_link]: hasVariant(
                  $state,
                  "type",
                  "link"
                ),
                [sty.slotTargetCaptiontype_link_withIcons_startIcon]:
                  hasVariant($state, "withIcons", "startIcon") &&
                  hasVariant($state, "type", "link"),
                [sty.slotTargetCaptiontype_primary]: hasVariant(
                  $state,
                  "type",
                  "primary"
                ),
                [sty.slotTargetCaptiontype_primary_withIcons_startIcon]:
                  hasVariant($state, "withIcons", "startIcon") &&
                  hasVariant($state, "type", "primary"),
                [sty.slotTargetCaptiontype_seamless]: hasVariant(
                  $state,
                  "type",
                  "seamless"
                ),
                [sty.slotTargetCaptiontype_secondary]: hasVariant(
                  $state,
                  "type",
                  "secondary"
                ),
                [sty.slotTargetCaptiontype_toggleOff]: hasVariant(
                  $state,
                  "type",
                  "toggleOff"
                ),
                [sty.slotTargetCaptiontype_toggleOn]: hasVariant(
                  $state,
                  "type",
                  "toggleOn"
                ),
                [sty.slotTargetCaptionwithIcons_endIconOnHover]: hasVariant(
                  $state,
                  "withIcons",
                  "endIconOnHover"
                ),
                [sty.slotTargetCaptionwithIcons_endIconOnHover_size_compact]:
                  hasVariant($state, "size", "compact") &&
                  hasVariant($state, "withIcons", "endIconOnHover"),
                [sty.slotTargetCaptionwithIcons_endIcon]: hasVariant(
                  $state,
                  "withIcons",
                  "endIcon"
                ),
                [sty.slotTargetCaptionwithIcons_endIcon_size_compact]:
                  hasVariant($state, "size", "compact") &&
                  hasVariant($state, "withIcons", "endIcon"),
                [sty.slotTargetCaptionwithIcons_startIcon]: hasVariant(
                  $state,
                  "withIcons",
                  "startIcon"
                ),
              }),
            })
          : null}
      </div>
      {(
        hasVariant($state, "withIcons", "endIconOnHover") && triggers.hover_root
          ? true
          : hasVariant($state, "withIcons", "endIconOnHover")
          ? true
          : hasVariant($state, "withIcons", "endIcon")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer, {
            [sty.endIconContainercolor_blue]: hasVariant(
              $state,
              "color",
              "blue"
            ),
            [sty.endIconContainercolor_green]: hasVariant(
              $state,
              "color",
              "green"
            ),
            [sty.endIconContainercolor_purple]: hasVariant(
              $state,
              "color",
              "purple"
            ),
            [sty.endIconContainercolor_red]: hasVariant($state, "color", "red"),
            [sty.endIconContainerwithIcons_endIconOnHover]: hasVariant(
              $state,
              "withIcons",
              "endIconOnHover"
            ),
            [sty.endIconContainerwithIcons_endIcon]: hasVariant(
              $state,
              "withIcons",
              "endIcon"
            ),
            [sty.endIconContainerwithIcons_startIcon]: hasVariant(
              $state,
              "withIcons",
              "startIcon"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__jsRJx)}
                role={"img"}
              />
            ),

            value: args.endIcon,
            className: classNames(sty.slotTargetEndIcon, {
              [sty.slotTargetEndIconcolor_blue]: hasVariant(
                $state,
                "color",
                "blue"
              ),
              [sty.slotTargetEndIconcolor_green]: hasVariant(
                $state,
                "color",
                "green"
              ),
              [sty.slotTargetEndIconcolor_purple]: hasVariant(
                $state,
                "color",
                "purple"
              ),
              [sty.slotTargetEndIconcolor_red]: hasVariant(
                $state,
                "color",
                "red"
              ),
              [sty.slotTargetEndIcondisabled]: hasVariant(
                $state,
                "disabled",
                "disabled"
              ),
              [sty.slotTargetEndIcondisabled_type_primary]:
                hasVariant($state, "type", "primary") &&
                hasVariant($state, "disabled", "disabled"),
              [sty.slotTargetEndIcondisabled_type_secondary]:
                hasVariant($state, "disabled", "disabled") &&
                hasVariant($state, "type", "secondary"),
              [sty.slotTargetEndIcondisabled_withIcons_endIconOnHover]:
                hasVariant($state, "disabled", "disabled") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetEndIcondisabled_withIcons_endIcon]:
                hasVariant($state, "disabled", "disabled") &&
                hasVariant($state, "withIcons", "endIcon"),
              [sty.slotTargetEndIconfont_bold]: hasVariant(
                $state,
                "font",
                "bold"
              ),
              [sty.slotTargetEndIconfont_dim]: hasVariant(
                $state,
                "font",
                "dim"
              ),
              [sty.slotTargetEndIconsize_medium_withIcons_endIconOnHover]:
                hasVariant($state, "withIcons", "endIconOnHover") &&
                hasVariant($state, "size", "medium"),
              [sty.slotTargetEndIconsize_medium_withIcons_endIcon]:
                hasVariant($state, "withIcons", "endIcon") &&
                hasVariant($state, "size", "medium"),
              [sty.slotTargetEndIcontype_backlitError]: hasVariant(
                $state,
                "type",
                "backlitError"
              ),
              [sty.slotTargetEndIcontype_backlitInfo]: hasVariant(
                $state,
                "type",
                "backlitInfo"
              ),
              [sty.slotTargetEndIcontype_backlitInfo_withIcons_startIcon]:
                hasVariant($state, "type", "backlitInfo") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetEndIcontype_chip]: hasVariant(
                $state,
                "type",
                "chip"
              ),
              [sty.slotTargetEndIcontype_clearPrimary]: hasVariant(
                $state,
                "type",
                "clearPrimary"
              ),
              [sty.slotTargetEndIcontype_clearPrimary_withIcons_endIconOnHover]:
                hasVariant($state, "type", "clearPrimary") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetEndIcontype_clearPrimary_withIcons_endIcon]:
                hasVariant($state, "type", "clearPrimary") &&
                hasVariant($state, "withIcons", "endIcon"),
              [sty.slotTargetEndIcontype_clear]: hasVariant(
                $state,
                "type",
                "clear"
              ),
              [sty.slotTargetEndIcontype_link]: hasVariant(
                $state,
                "type",
                "link"
              ),
              [sty.slotTargetEndIcontype_link_withIcons_endIconOnHover]:
                hasVariant($state, "withIcons", "endIconOnHover") &&
                hasVariant($state, "type", "link"),
              [sty.slotTargetEndIcontype_link_withIcons_endIcon]:
                hasVariant($state, "withIcons", "endIcon") &&
                hasVariant($state, "type", "link"),
              [sty.slotTargetEndIcontype_primary]: hasVariant(
                $state,
                "type",
                "primary"
              ),
              [sty.slotTargetEndIcontype_seamless]: hasVariant(
                $state,
                "type",
                "seamless"
              ),
              [sty.slotTargetEndIcontype_secondary]: hasVariant(
                $state,
                "type",
                "secondary"
              ),
              [sty.slotTargetEndIcontype_toggleOff]: hasVariant(
                $state,
                "type",
                "toggleOff"
              ),
              [sty.slotTargetEndIcontype_toggleOn]: hasVariant(
                $state,
                "type",
                "toggleOn"
              ),
              [sty.slotTargetEndIcontype_toggleOn_withIcons_startIcon]:
                hasVariant($state, "type", "toggleOn") &&
                hasVariant($state, "withIcons", "startIcon"),
              [sty.slotTargetEndIconwithIcons_endIconOnHover]: hasVariant(
                $state,
                "withIcons",
                "endIconOnHover"
              ),
              [sty.slotTargetEndIconwithIcons_endIconOnHover_type_backlitInfo]:
                hasVariant($state, "type", "backlitInfo") &&
                hasVariant($state, "withIcons", "endIconOnHover"),
              [sty.slotTargetEndIconwithIcons_endIcon]: hasVariant(
                $state,
                "withIcons",
                "endIcon"
              ),
              [sty.slotTargetEndIconwithIcons_endIcon_type_backlitInfo]:
                hasVariant($state, "type", "backlitInfo") &&
                hasVariant($state, "withIcons", "endIcon"),
              [sty.slotTargetEndIconwithIcons_startIcon]: hasVariant(
                $state,
                "withIcons",
                "startIcon"
              ),
            }),
          })}
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "startIconContainer", "freeBox", "endIconContainer"],
  startIconContainer: ["startIconContainer"],
  freeBox: ["freeBox"],
  endIconContainer: ["endIconContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  startIconContainer: "div";
  freeBox: "div";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    freeBox: makeNodeComponent("freeBox"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
