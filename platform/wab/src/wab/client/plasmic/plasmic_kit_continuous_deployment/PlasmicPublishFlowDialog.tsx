/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpbcKyXdMTvY59T4C5fjcC
// Component: aXXfRDkhD-

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import SubsectionPlasmicHosting from "../../components/TopFrame/TopBar/SubsectionPlasmicHosting"; // plasmic-import: aeDQsBfp-eA/component
import SubsectionPushDeploy from "../../components/TopFrame/TopBar/SubsectionPushDeploy"; // plasmic-import: 0HHLsxeAqF8/component
import SubsectionSaveVersion from "../../components/TopFrame/TopBar/SubsectionSaveVersion"; // plasmic-import: 74wUdEnJhwr/component
import SubsectionWebhooks from "../../components/TopFrame/TopBar/SubsectionWebhooks"; // plasmic-import: 9EUA-QZFp69/component
import WebhookEvent from "../../components/webhooks/WebhookEvent"; // plasmic-import: MtBpr4iNob/component
import WebhooksHistory from "../../components/webhooks/WebhooksHistory"; // plasmic-import: Ynwp30ZgYk/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../../components/modals/plasmic/plasmic_kit_project_settings/plasmic_plasmic_kit_project_settings.module.css"; // plasmic-import: fpbcKyXdMTvY59T4C5fjcC/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicPublishFlowDialog.module.css"; // plasmic-import: aXXfRDkhD-/css

import PlusIcon from "../plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import CloseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon

createPlasmicElementProxy;

export type PlasmicPublishFlowDialog__VariantMembers = {
  publishState: "failure" | "success" | "publishing";
  view: "status" | "reviewChanges" | "webhooksHistory";
};
export type PlasmicPublishFlowDialog__VariantsArgs = {
  publishState?: SingleChoiceArg<"failure" | "success" | "publishing">;
  view?: SingleChoiceArg<"status" | "reviewChanges" | "webhooksHistory">;
};
type VariantPropType = keyof PlasmicPublishFlowDialog__VariantsArgs;
export const PlasmicPublishFlowDialog__VariantProps =
  new Array<VariantPropType>("publishState", "view");

export type PlasmicPublishFlowDialog__ArgsType = {
  projectName?: React.ReactNode;
  currentVersionNumber?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPublishFlowDialog__ArgsType;
export const PlasmicPublishFlowDialog__ArgProps = new Array<ArgPropType>(
  "projectName",
  "currentVersionNumber"
);

export type PlasmicPublishFlowDialog__OverridesType = {
  root?: Flex__<"div">;
  dismissButton?: Flex__<typeof IconButton>;
  statusBar?: Flex__<"div">;
  destinationSection?: Flex__<"div">;
  destination?: Flex__<"a">;
  backPanel?: Flex__<"div">;
  backButton?: Flex__<typeof Button>;
  subsectionSaveVersion?: Flex__<typeof SubsectionSaveVersion>;
  subsectionPlasmicHosting?: Flex__<typeof SubsectionPlasmicHosting>;
  subsectionPushDeploy?: Flex__<typeof SubsectionPushDeploy>;
  subsectionWebhooks?: Flex__<typeof SubsectionWebhooks>;
  addActionsContainer?: Flex__<"div">;
  addWebsitePanel?: Flex__<"div">;
  addWebsiteButton?: Flex__<typeof Button>;
  addGithubPanel?: Flex__<"div">;
  addGithubButton?: Flex__<typeof Button>;
  addWebhooksPanel?: Flex__<"div">;
  addWebhooksButton?: Flex__<typeof Button>;
  webhooksDescription?: Flex__<"div">;
  container?: Flex__<"div">;
  webhooksHistory?: Flex__<typeof WebhooksHistory>;
  publishButton?: Flex__<typeof Button>;
  startOverButton?: Flex__<typeof Button>;
  cancelButton?: Flex__<typeof Button>;
  statusButton?: Flex__<typeof Button>;
};

export interface DefaultPublishFlowDialogProps {
  projectName?: React.ReactNode;
  currentVersionNumber?: React.ReactNode;
  publishState?: SingleChoiceArg<"failure" | "success" | "publishing">;
  view?: SingleChoiceArg<"status" | "reviewChanges" | "webhooksHistory">;
  className?: string;
}

const $$ = {};

function PlasmicPublishFlowDialog__RenderFunc(props: {
  variants: PlasmicPublishFlowDialog__VariantsArgs;
  args: PlasmicPublishFlowDialog__ArgsType;
  overrides: PlasmicPublishFlowDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "publishState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.publishState,
      },
      {
        path: "view",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.view,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootpublishState_publishing]: hasVariant(
            $state,
            "publishState",
            "publishing"
          ),
          [sty.rootpublishState_success]: hasVariant(
            $state,
            "publishState",
            "success"
          ),
          [sty.rootview_reviewChanges]: hasVariant(
            $state,
            "view",
            "reviewChanges"
          ),
          [sty.rootview_status]: hasVariant($state, "view", "status"),
          [sty.rootview_webhooksHistory]: hasVariant(
            $state,
            "view",
            "webhooksHistory"
          ),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__zkh4Q, {
          [sty.freeBoxview_status__zkh4QZjfL6]: hasVariant(
            $state,
            "view",
            "status"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__muZqm, {
            [sty.freeBoxview_status__muZqmZjfL6]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___36Jc0)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pIqHc
              )}
            >
              {"Publish"}
            </div>
            {renderPlasmicSlot({
              defaultContents: "Project Acme",
              value: args.projectName,
            })}
          </Stack__>
          <IconButton
            data-plasmic-name={"dismissButton"}
            data-plasmic-override={overrides.dismissButton}
            children2={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__chnKm)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.dismissButton, {
              [sty.dismissButtonpublishState_publishing]: hasVariant(
                $state,
                "publishState",
                "publishing"
              ),
            })}
            size={"small"}
            withBackgroundHover={true}
          >
            <CloseSvgIcon
              className={classNames(projectcss.all, sty.svg__r0DpM, {
                [sty.svgpublishState_publishing__r0DpMPGdW]: hasVariant(
                  $state,
                  "publishState",
                  "publishing"
                ),
              })}
              role={"img"}
            />
          </IconButton>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__oaZo, {
            [sty.freeBoxpublishState_publishing__oaZoPGdW]: hasVariant(
              $state,
              "publishState",
              "publishing"
            ),
            [sty.freeBoxview_status__oaZoZjfL6]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"statusBar"}
            data-plasmic-override={overrides.statusBar}
            hasGap={true}
            className={classNames(projectcss.all, sty.statusBar, {
              [sty.statusBarview_status]: hasVariant($state, "view", "status"),
              [sty.statusBarview_webhooksHistory]: hasVariant(
                $state,
                "view",
                "webhooksHistory"
              ),
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fbpu6)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h4HnN
                    )}
                  >
                    {"0.0.1"}
                  </div>
                ),
                value: args.currentVersionNumber,
                className: classNames(sty.slotTargetCurrentVersionNumber),
              })}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hL72Z
                )}
              >
                {"Version"}
              </div>
            </div>
            <div
              data-plasmic-name={"destinationSection"}
              data-plasmic-override={overrides.destinationSection}
              className={classNames(projectcss.all, sty.destinationSection)}
            >
              <PlasmicLink__
                data-plasmic-name={"destination"}
                data-plasmic-override={overrides.destination}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.destination,
                  {
                    [sty.destinationpublishState_publishing]: hasVariant(
                      $state,
                      "publishState",
                      "publishing"
                    ),
                    [sty.destinationpublishState_success]: hasVariant(
                      $state,
                      "publishState",
                      "success"
                    ),
                    [sty.destinationpublishState_success_view_status]:
                      hasVariant($state, "publishState", "success") &&
                      hasVariant($state, "view", "status"),
                  }
                )}
                platform={"react"}
              >
                {"n/a"}
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ecN0
                )}
              >
                {"Destination"}
              </div>
            </div>
          </Stack__>
        </div>
      </div>
      {(
        hasVariant($state, "view", "webhooksHistory")
          ? true
          : hasVariant($state, "view", "reviewChanges")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"backPanel"}
          data-plasmic-override={overrides.backPanel}
          className={classNames(projectcss.all, sty.backPanel, {
            [sty.backPanelview_reviewChanges]: hasVariant(
              $state,
              "view",
              "reviewChanges"
            ),
            [sty.backPanelview_webhooksHistory]: hasVariant(
              $state,
              "view",
              "webhooksHistory"
            ),
          })}
        >
          <Button
            data-plasmic-name={"backButton"}
            data-plasmic-override={overrides.backButton}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__iBnCa)}
                role={"img"}
              />
            }
            font={"bold"}
            startIcon={
              <ArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__ofSxb)}
                role={"img"}
              />
            }
            type={["clear"]}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yzoNt,
                {
                  [sty.textview_reviewChanges__yzoNtG8ZSd]: hasVariant(
                    $state,
                    "view",
                    "reviewChanges"
                  ),
                  [sty.textview_webhooksHistory__yzoNtPC2C]: hasVariant(
                    $state,
                    "view",
                    "webhooksHistory"
                  ),
                }
              )}
            >
              {"<- Back"}
            </div>
          </Button>
        </div>
      ) : null}
      {(
        hasVariant($state, "view", "webhooksHistory")
          ? false
          : hasVariant($state, "view", "reviewChanges")
          ? false
          : true
      ) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__h4IIk, {
            [sty.freeBoxpublishState_publishing__h4IIkPGdW]: hasVariant(
              $state,
              "publishState",
              "publishing"
            ),
            [sty.freeBoxview_reviewChanges__h4IIkg8ZSd]: hasVariant(
              $state,
              "view",
              "reviewChanges"
            ),
            [sty.freeBoxview_status__h4IIkZjfL6]: hasVariant(
              $state,
              "view",
              "status"
            ),
            [sty.freeBoxview_webhooksHistory__h4IIkPC2C]: hasVariant(
              $state,
              "view",
              "webhooksHistory"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lYmaq,
              {
                [sty.textview_status__lYmaqZjfL6]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
                [sty.textview_webhooksHistory__lYmaqPC2C]: hasVariant(
                  $state,
                  "view",
                  "webhooksHistory"
                ),
              }
            )}
          >
            {"Publishing pipeline"}
          </div>
          <SubsectionSaveVersion
            data-plasmic-name={"subsectionSaveVersion"}
            data-plasmic-override={overrides.subsectionSaveVersion}
            changesSummary={""}
            className={classNames("__wab_instance", sty.subsectionSaveVersion, {
              [sty.subsectionSaveVersionpublishState_failure]: hasVariant(
                $state,
                "publishState",
                "failure"
              ),
              [sty.subsectionSaveVersionpublishState_success]: hasVariant(
                $state,
                "publishState",
                "success"
              ),
              [sty.subsectionSaveVersionview_status]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
            view={hasVariant($state, "view", "status") ? "status" : undefined}
          />

          <SubsectionPlasmicHosting
            data-plasmic-name={"subsectionPlasmicHosting"}
            data-plasmic-override={overrides.subsectionPlasmicHosting}
            className={classNames(
              "__wab_instance",
              sty.subsectionPlasmicHosting,
              {
                [sty.subsectionPlasmicHostingview_status]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
              }
            )}
            view={hasVariant($state, "view", "status") ? "status" : undefined}
          />

          <SubsectionPushDeploy
            data-plasmic-name={"subsectionPushDeploy"}
            data-plasmic-override={overrides.subsectionPushDeploy}
            className={classNames("__wab_instance", sty.subsectionPushDeploy, {
              [sty.subsectionPushDeploypublishState_publishing]: hasVariant(
                $state,
                "publishState",
                "publishing"
              ),
              [sty.subsectionPushDeployview_status]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
            view={hasVariant($state, "view", "status") ? "status" : undefined}
          />

          <SubsectionWebhooks
            data-plasmic-name={"subsectionWebhooks"}
            data-plasmic-override={overrides.subsectionWebhooks}
            className={classNames("__wab_instance", sty.subsectionWebhooks, {
              [sty.subsectionWebhooksview_status]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
            view={hasVariant($state, "view", "status") ? "status" : undefined}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"addActionsContainer"}
            data-plasmic-override={overrides.addActionsContainer}
            hasGap={true}
            className={classNames(projectcss.all, sty.addActionsContainer, {
              [sty.addActionsContainerview_status]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uIv1)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__shiks
              )}
            >
              {"Add publish actions"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t1Hp1)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"addWebsitePanel"}
                data-plasmic-override={overrides.addWebsitePanel}
                hasGap={true}
                className={classNames(projectcss.all, sty.addWebsitePanel)}
              >
                <Button
                  data-plasmic-name={"addWebsiteButton"}
                  data-plasmic-override={overrides.addWebsiteButton}
                  className={classNames("__wab_instance", sty.addWebsiteButton)}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__inCrR)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <PlusIcon
                      className={classNames(projectcss.all, sty.svg__aYWtk)}
                      role={"img"}
                    />
                  }
                  type={["secondary"]}
                  withIcons={["startIcon"]}
                >
                  {"Plasmic Hosting"}
                </Button>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lh5N
                  )}
                >
                  {
                    "Just publish an app or site. Use a custom domain for free. No coding required."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"addGithubPanel"}
                data-plasmic-override={overrides.addGithubPanel}
                hasGap={true}
                className={classNames(projectcss.all, sty.addGithubPanel)}
              >
                <Button
                  data-plasmic-name={"addGithubButton"}
                  data-plasmic-override={overrides.addGithubButton}
                  className={classNames("__wab_instance", sty.addGithubButton)}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__mUYi7)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <PlusIcon
                      className={classNames(projectcss.all, sty.svg__yvw3T)}
                      role={"img"}
                    />
                  }
                  type={["secondary"]}
                  withIcons={["startIcon"]}
                >
                  {"Push to GitHub"}
                </Button>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j4Rcl
                  )}
                >
                  {"Generate a new Next.js / Gatsby / React repo."}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"addWebhooksPanel"}
                data-plasmic-override={overrides.addWebhooksPanel}
                hasGap={true}
                className={classNames(projectcss.all, sty.addWebhooksPanel)}
              >
                <Button
                  data-plasmic-name={"addWebhooksButton"}
                  data-plasmic-override={overrides.addWebhooksButton}
                  className={classNames(
                    "__wab_instance",
                    sty.addWebhooksButton
                  )}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__q5RO)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <PlusIcon
                      className={classNames(projectcss.all, sty.svg__fSqXx)}
                      role={"img"}
                    />
                  }
                  type={["secondary"]}
                  withIcons={["startIcon"]}
                >
                  {"Call webhooks"}
                </Button>
                <div
                  data-plasmic-name={"webhooksDescription"}
                  data-plasmic-override={overrides.webhooksDescription}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.webhooksDescription
                  )}
                >
                  {
                    "Trigger a build in Vercel, Netlify, Jenkins, or any other CI/CD pipeline. You should first [add Plasmic to your codebase]."
                  }
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      ) : null}
      {(hasVariant($state, "view", "reviewChanges") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__ztMz5, {
            [sty.freeBoxview_reviewChanges__ztMz5G8ZSd]: hasVariant(
              $state,
              "view",
              "reviewChanges"
            ),
          })}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container, {
              [sty.containerview_reviewChanges]: hasVariant(
                $state,
                "view",
                "reviewChanges"
              ),
            })}
          />
        </div>
      ) : null}
      {(hasVariant($state, "view", "webhooksHistory") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___5Et5U, {
            [sty.freeBoxview_webhooksHistory___5Et5UPC2C]: hasVariant(
              $state,
              "view",
              "webhooksHistory"
            ),
          })}
        >
          <WebhooksHistory
            data-plasmic-name={"webhooksHistory"}
            data-plasmic-override={overrides.webhooksHistory}
            events={
              <React.Fragment>
                <WebhookEvent
                  className={classNames(
                    "__wab_instance",
                    sty.webhookEvent__hm3Cn,
                    {
                      [sty.webhookEventview_webhooksHistory__hm3CnPC2C]:
                        hasVariant($state, "view", "webhooksHistory"),
                    }
                  )}
                  method={"GET"}
                  url={"https://plasmic.app/"}
                />

                <WebhookEvent
                  className={classNames(
                    "__wab_instance",
                    sty.webhookEvent__lLp8M,
                    {
                      [sty.webhookEventview_webhooksHistory__lLp8MPC2C]:
                        hasVariant($state, "view", "webhooksHistory"),
                    }
                  )}
                  status={"404"}
                  url={
                    "https://plasmic.app/this-is-a-really/long/url/to-see-what-happens-when-a-url-needs-to-wrap"
                  }
                />

                <WebhookEvent
                  className={classNames(
                    "__wab_instance",
                    sty.webhookEvent__rxX1O
                  )}
                  expanded={true}
                  method={"OPTIONS"}
                  status={"500"}
                  url={"https://plasmic.app/options/"}
                />

                <WebhookEvent
                  className={classNames(
                    "__wab_instance",
                    sty.webhookEvent___5UpJ7
                  )}
                  method={"GET"}
                  url={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qKafS
                      )}
                    >
                      {"https://plasmic.app/"}
                    </div>
                  }
                />
              </React.Fragment>
            }
          />
        </div>
      ) : null}
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___11T7Q, {
          [sty.freeBoxpublishState_failure___11T7QSpbXn]: hasVariant(
            $state,
            "publishState",
            "failure"
          ),
          [sty.freeBoxpublishState_publishing___11T7QPGdW]: hasVariant(
            $state,
            "publishState",
            "publishing"
          ),
          [sty.freeBoxpublishState_success___11T7Q5PRIj]: hasVariant(
            $state,
            "publishState",
            "success"
          ),
          [sty.freeBoxview_status___11T7QZjfL6]: hasVariant(
            $state,
            "view",
            "status"
          ),
          [sty.freeBoxview_webhooksHistory___11T7QPC2C]: hasVariant(
            $state,
            "view",
            "webhooksHistory"
          ),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__koqOo, {
            [sty.freeBoxview_reviewChanges__koqOoG8ZSd]: hasVariant(
              $state,
              "view",
              "reviewChanges"
            ),
            [sty.freeBoxview_status__koqOoZjfL6]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          {(
            hasVariant($state, "view", "webhooksHistory")
              ? false
              : hasVariant($state, "view", "reviewChanges")
              ? false
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__wcPuC, {
                [sty.freeBoxview_reviewChanges__wcPuCg8ZSd]: hasVariant(
                  $state,
                  "view",
                  "reviewChanges"
                ),
                [sty.freeBoxview_status__wcPuCZjfL6]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
                [sty.freeBoxview_webhooksHistory__wcPuCPC2C]: hasVariant(
                  $state,
                  "view",
                  "webhooksHistory"
                ),
              })}
            >
              {(
                hasVariant($state, "view", "webhooksHistory")
                  ? false
                  : hasVariant($state, "view", "reviewChanges")
                  ? false
                  : hasVariant($state, "view", "status")
                  ? false
                  : true
              ) ? (
                <Button
                  data-plasmic-name={"publishButton"}
                  data-plasmic-override={overrides.publishButton}
                  className={classNames("__wab_instance", sty.publishButton, {
                    [sty.publishButtonview_reviewChanges]: hasVariant(
                      $state,
                      "view",
                      "reviewChanges"
                    ),
                    [sty.publishButtonview_status]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                    [sty.publishButtonview_webhooksHistory]: hasVariant(
                      $state,
                      "view",
                      "webhooksHistory"
                    ),
                  })}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg___5EtrM)}
                      role={"img"}
                    />
                  }
                  size={"wide"}
                  startIcon={
                    <ArrowRightSvgIcon
                      className={classNames(projectcss.all, sty.svg__mf5Q)}
                      role={"img"}
                    />
                  }
                  type={["primary"]}
                >
                  {"Publish"}
                </Button>
              ) : null}
              {(hasVariant($state, "view", "status") ? true : false) ? (
                <Button
                  data-plasmic-name={"startOverButton"}
                  data-plasmic-override={overrides.startOverButton}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__aj6Wj)}
                      role={"img"}
                    />
                  }
                  size={"wide"}
                  startIcon={
                    <ArrowRightSvgIcon
                      className={classNames(projectcss.all, sty.svg__aRgPt)}
                      role={"img"}
                    />
                  }
                  type={["primary"]}
                >
                  {"Start over"}
                </Button>
              ) : null}
            </div>
          ) : null}
          {(hasVariant($state, "view", "status") ? true : false) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__syfAu,
                {
                  [sty.textview_status__syfAuZjfL6]: hasVariant(
                    $state,
                    "view",
                    "status"
                  ),
                }
              )}
            >
              {hasVariant($state, "view", "status")
                ? "You may close this popup without interrupting your deployment."
                : "You may close this popup without interrupting publishing."}
            </div>
          ) : null}
          {(hasVariant($state, "view", "status") ? false : true) ? (
            <Button
              data-plasmic-name={"cancelButton"}
              data-plasmic-override={overrides.cancelButton}
              className={classNames("__wab_instance", sty.cancelButton, {
                [sty.cancelButtonview_status]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
                [sty.cancelButtonview_webhooksHistory]: hasVariant(
                  $state,
                  "view",
                  "webhooksHistory"
                ),
              })}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__qtdR)}
                  role={"img"}
                />
              }
              size={"wide"}
              startIcon={
                <ArrowRightSvgIcon
                  className={classNames(projectcss.all, sty.svg__m6WwF)}
                  role={"img"}
                />
              }
              type={["secondary"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r1Waq,
                  {
                    [sty.textview_status__r1WaqZjfL6]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                  }
                )}
              >
                {"Cancel"}
              </div>
            </Button>
          ) : null}
        </Stack__>
        {(
          hasVariant($state, "view", "webhooksHistory")
            ? false
            : hasVariant($state, "view", "reviewChanges")
            ? false
            : hasVariant($state, "view", "status")
            ? false
            : hasVariant($state, "publishState", "publishing")
            ? true
            : hasVariant($state, "publishState", "success")
            ? true
            : hasVariant($state, "publishState", "failure")
            ? true
            : false
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0MvLu, {
              [sty.freeBoxpublishState_failure___0MvLuSpbXn]: hasVariant(
                $state,
                "publishState",
                "failure"
              ),
              [sty.freeBoxpublishState_publishing___0MvLuPGdW]: hasVariant(
                $state,
                "publishState",
                "publishing"
              ),
              [sty.freeBoxpublishState_success___0MvLu5PRIj]: hasVariant(
                $state,
                "publishState",
                "success"
              ),
              [sty.freeBoxview_reviewChanges___0MvLuG8ZSd]: hasVariant(
                $state,
                "view",
                "reviewChanges"
              ),
              [sty.freeBoxview_status___0MvLuZjfL6]: hasVariant(
                $state,
                "view",
                "status"
              ),
              [sty.freeBoxview_webhooksHistory___0MvLuPC2C]: hasVariant(
                $state,
                "view",
                "webhooksHistory"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__emIaM,
                {
                  [sty.textpublishState_failure__emIaMSpbXn]: hasVariant(
                    $state,
                    "publishState",
                    "failure"
                  ),
                  [sty.textpublishState_publishing__emIaMPGdW]: hasVariant(
                    $state,
                    "publishState",
                    "publishing"
                  ),
                  [sty.textpublishState_success__emIaM5PRIj]: hasVariant(
                    $state,
                    "publishState",
                    "success"
                  ),
                }
              )}
            >
              {hasVariant($state, "publishState", "publishing")
                ? "The project is being published at the moment..."
                : hasVariant($state, "publishState", "failure")
                ? "The latest publish failed."
                : "The latest publish was successful."}
            </div>
            <Button
              data-plasmic-name={"statusButton"}
              data-plasmic-override={overrides.statusButton}
              className={classNames("__wab_instance", sty.statusButton, {
                [sty.statusButtonpublishState_failure]: hasVariant(
                  $state,
                  "publishState",
                  "failure"
                ),
                [sty.statusButtonpublishState_publishing]: hasVariant(
                  $state,
                  "publishState",
                  "publishing"
                ),
                [sty.statusButtonpublishState_success]: hasVariant(
                  $state,
                  "publishState",
                  "success"
                ),
                [sty.statusButtonview_status]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
              })}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__bJqjq)}
                  role={"img"}
                />
              }
              font={"bold"}
              startIcon={
                <ArrowRightSvgIcon
                  className={classNames(projectcss.all, sty.svg___9UcPo)}
                  role={"img"}
                />
              }
              type={["seamless"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3RbCs,
                  {
                    [sty.textpublishState_failure___3RbCsSpbXn]: hasVariant(
                      $state,
                      "publishState",
                      "failure"
                    ),
                  }
                )}
              >
                {"See more ->"}
              </div>
            </Button>
          </Stack__>
        ) : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dismissButton",
    "statusBar",
    "destinationSection",
    "destination",
    "backPanel",
    "backButton",
    "subsectionSaveVersion",
    "subsectionPlasmicHosting",
    "subsectionPushDeploy",
    "subsectionWebhooks",
    "addActionsContainer",
    "addWebsitePanel",
    "addWebsiteButton",
    "addGithubPanel",
    "addGithubButton",
    "addWebhooksPanel",
    "addWebhooksButton",
    "webhooksDescription",
    "container",
    "webhooksHistory",
    "publishButton",
    "startOverButton",
    "cancelButton",
    "statusButton",
  ],
  dismissButton: ["dismissButton"],
  statusBar: ["statusBar", "destinationSection", "destination"],
  destinationSection: ["destinationSection", "destination"],
  destination: ["destination"],
  backPanel: ["backPanel", "backButton"],
  backButton: ["backButton"],
  subsectionSaveVersion: ["subsectionSaveVersion"],
  subsectionPlasmicHosting: ["subsectionPlasmicHosting"],
  subsectionPushDeploy: ["subsectionPushDeploy"],
  subsectionWebhooks: ["subsectionWebhooks"],
  addActionsContainer: [
    "addActionsContainer",
    "addWebsitePanel",
    "addWebsiteButton",
    "addGithubPanel",
    "addGithubButton",
    "addWebhooksPanel",
    "addWebhooksButton",
    "webhooksDescription",
  ],
  addWebsitePanel: ["addWebsitePanel", "addWebsiteButton"],
  addWebsiteButton: ["addWebsiteButton"],
  addGithubPanel: ["addGithubPanel", "addGithubButton"],
  addGithubButton: ["addGithubButton"],
  addWebhooksPanel: [
    "addWebhooksPanel",
    "addWebhooksButton",
    "webhooksDescription",
  ],
  addWebhooksButton: ["addWebhooksButton"],
  webhooksDescription: ["webhooksDescription"],
  container: ["container"],
  webhooksHistory: ["webhooksHistory"],
  publishButton: ["publishButton"],
  startOverButton: ["startOverButton"],
  cancelButton: ["cancelButton"],
  statusButton: ["statusButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dismissButton: typeof IconButton;
  statusBar: "div";
  destinationSection: "div";
  destination: "a";
  backPanel: "div";
  backButton: typeof Button;
  subsectionSaveVersion: typeof SubsectionSaveVersion;
  subsectionPlasmicHosting: typeof SubsectionPlasmicHosting;
  subsectionPushDeploy: typeof SubsectionPushDeploy;
  subsectionWebhooks: typeof SubsectionWebhooks;
  addActionsContainer: "div";
  addWebsitePanel: "div";
  addWebsiteButton: typeof Button;
  addGithubPanel: "div";
  addGithubButton: typeof Button;
  addWebhooksPanel: "div";
  addWebhooksButton: typeof Button;
  webhooksDescription: "div";
  container: "div";
  webhooksHistory: typeof WebhooksHistory;
  publishButton: typeof Button;
  startOverButton: typeof Button;
  cancelButton: typeof Button;
  statusButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPublishFlowDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPublishFlowDialog__VariantsArgs;
    args?: PlasmicPublishFlowDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPublishFlowDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPublishFlowDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPublishFlowDialog__ArgProps,
          internalVariantPropNames: PlasmicPublishFlowDialog__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPublishFlowDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPublishFlowDialog";
  } else {
    func.displayName = `PlasmicPublishFlowDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicPublishFlowDialog = Object.assign(
  // Top-level PlasmicPublishFlowDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dismissButton: makeNodeComponent("dismissButton"),
    statusBar: makeNodeComponent("statusBar"),
    destinationSection: makeNodeComponent("destinationSection"),
    destination: makeNodeComponent("destination"),
    backPanel: makeNodeComponent("backPanel"),
    backButton: makeNodeComponent("backButton"),
    subsectionSaveVersion: makeNodeComponent("subsectionSaveVersion"),
    subsectionPlasmicHosting: makeNodeComponent("subsectionPlasmicHosting"),
    subsectionPushDeploy: makeNodeComponent("subsectionPushDeploy"),
    subsectionWebhooks: makeNodeComponent("subsectionWebhooks"),
    addActionsContainer: makeNodeComponent("addActionsContainer"),
    addWebsitePanel: makeNodeComponent("addWebsitePanel"),
    addWebsiteButton: makeNodeComponent("addWebsiteButton"),
    addGithubPanel: makeNodeComponent("addGithubPanel"),
    addGithubButton: makeNodeComponent("addGithubButton"),
    addWebhooksPanel: makeNodeComponent("addWebhooksPanel"),
    addWebhooksButton: makeNodeComponent("addWebhooksButton"),
    webhooksDescription: makeNodeComponent("webhooksDescription"),
    container: makeNodeComponent("container"),
    webhooksHistory: makeNodeComponent("webhooksHistory"),
    publishButton: makeNodeComponent("publishButton"),
    startOverButton: makeNodeComponent("startOverButton"),
    cancelButton: makeNodeComponent("cancelButton"),
    statusButton: makeNodeComponent("statusButton"),

    // Metadata about props expected for PlasmicPublishFlowDialog
    internalVariantProps: PlasmicPublishFlowDialog__VariantProps,
    internalArgProps: PlasmicPublishFlowDialog__ArgProps,
  }
);

export default PlasmicPublishFlowDialog;
/* prettier-ignore-end */
