/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpbcKyXdMTvY59T4C5fjcC
// Component: 0HHLsxeAqF8

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Checkbox from "../../components/widgets/Checkbox"; // plasmic-import: W-rO7NZqPjZ/component
import ExpandButton from "../../components/widgets/ExpandButton"; // plasmic-import: JJhv0MV9DH/component
import GitJobStep from "../../components/widgets/GitJobStep"; // plasmic-import: JzpEJAQTjPX/component
import Select from "../../components/widgets/Select"; // plasmic-import: j_4IQyOWK2b/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../../components/modals/plasmic/plasmic_kit_project_settings/plasmic_plasmic_kit_project_settings.module.css"; // plasmic-import: fpbcKyXdMTvY59T4C5fjcC/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicSubsectionPushDeploy.module.css"; // plasmic-import: 0HHLsxeAqF8/css

import CheckCircleIcon from "../plasmic_kit/PlasmicIcon__CheckCircle"; // plasmic-import: gU-8UYs9RllyJ/icon
import CloseIcon from "../plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import OpenIcon from "../plasmic_kit/PlasmicIcon__Open"; // plasmic-import: 7D0GDLdF72udM/icon
import TriangleBottomIcon from "../plasmic_kit/PlasmicIcon__TriangleBottom"; // plasmic-import: A8NQUZ7Lg1OHO/icon
import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import WarningTriangleSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__WarningTriangleSvg"; // plasmic-import: S0L-xosWD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vvFDLf-9Nl/icon
import image2DAmIiITwd from "./images/image2.svg"; // plasmic-import: dAMIiI_twd/picture

createPlasmicElementProxy;

export type PlasmicSubsectionPushDeploy__VariantMembers = {
  collapse: "collapse";
  view: "setup" | "status" | "unnamedVariant";
  connection: "loading" | "connected" | "error";
  collapseOptions: "collapseOptions";
  repoState: "newRepo" | "existingLoader";
  result: "success" | "failure" | "publishing";
};
export type PlasmicSubsectionPushDeploy__VariantsArgs = {
  collapse?: SingleBooleanChoiceArg<"collapse">;
  view?: SingleChoiceArg<"setup" | "status" | "unnamedVariant">;
  connection?: SingleChoiceArg<"loading" | "connected" | "error">;
  collapseOptions?: SingleBooleanChoiceArg<"collapseOptions">;
  repoState?: SingleChoiceArg<"newRepo" | "existingLoader">;
  result?: SingleChoiceArg<"success" | "failure" | "publishing">;
};
type VariantPropType = keyof PlasmicSubsectionPushDeploy__VariantsArgs;
export const PlasmicSubsectionPushDeploy__VariantProps =
  new Array<VariantPropType>(
    "collapse",
    "view",
    "connection",
    "collapseOptions",
    "repoState",
    "result"
  );

export type PlasmicSubsectionPushDeploy__ArgsType = {};
type ArgPropType = keyof PlasmicSubsectionPushDeploy__ArgsType;
export const PlasmicSubsectionPushDeploy__ArgProps = new Array<ArgPropType>();

export type PlasmicSubsectionPushDeploy__OverridesType = {
  root?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  img?: Flex__<typeof PlasmicImg__>;
  removeButton?: Flex__<typeof Button>;
  viewGithubButton?: Flex__<typeof Button>;
  learnMoreLink?: Flex__<"a">;
  repoName?: Flex__<"a">;
  retryButton?: Flex__<typeof Button>;
  removeGithubButton?: Flex__<typeof Button>;
  connectGithubButton?: Flex__<typeof Button>;
  showOptionsButton?: Flex__<typeof Button>;
  showOptionsIconButton?: Flex__<typeof ExpandButton>;
  pushAs?: Flex__<typeof Select>;
  title?: Flex__<"input">;
  description?: Flex__<"textarea">;
  steps?: Flex__<"ul">;
  githubPagesDelayNotice?: Flex__<"div">;
};

export interface DefaultSubsectionPushDeployProps {
  collapse?: SingleBooleanChoiceArg<"collapse">;
  view?: SingleChoiceArg<"setup" | "status" | "unnamedVariant">;
  connection?: SingleChoiceArg<"loading" | "connected" | "error">;
  collapseOptions?: SingleBooleanChoiceArg<"collapseOptions">;
  repoState?: SingleChoiceArg<"newRepo" | "existingLoader">;
  result?: SingleChoiceArg<"success" | "failure" | "publishing">;
  className?: string;
}

const $$ = {};

function PlasmicSubsectionPushDeploy__RenderFunc(props: {
  variants: PlasmicSubsectionPushDeploy__VariantsArgs;
  args: PlasmicSubsectionPushDeploy__ArgsType;
  overrides: PlasmicSubsectionPushDeploy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapse,
      },
      {
        path: "view",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.view,
      },
      {
        path: "connection",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.connection,
      },
      {
        path: "collapseOptions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.collapseOptions,
      },
      {
        path: "repoState",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.repoState,
      },
      {
        path: "result",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.result,
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: "pushAs.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcollapse]: hasVariant($state, "collapse", "collapse"),
          [sty.rootview_status]: hasVariant($state, "view", "status"),
          [sty.rootview_status_result_success]:
            hasVariant($state, "view", "status") &&
            hasVariant($state, "result", "success"),
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___3XSbn)} />

      <div
        className={classNames(projectcss.all, sty.freeBox__lnWi5, {
          [sty.freeBoxview_setup__lnWi5SMuCj]: hasVariant(
            $state,
            "view",
            "setup"
          ),
          [sty.freeBoxview_status__lnWi5WsXz9]: hasVariant(
            $state,
            "view",
            "status"
          ),
          [sty.freeBoxview_status_result_failure__lnWi5WsXz9XcibJ]:
            hasVariant($state, "view", "status") &&
            hasVariant($state, "result", "failure"),
          [sty.freeBoxview_status_result_publishing__lnWi5WsXz9ZYtqX]:
            hasVariant($state, "view", "status") &&
            hasVariant($state, "result", "publishing"),
          [sty.freeBoxview_status_result_success__lnWi5WsXz9YnSik]:
            hasVariant($state, "view", "status") &&
            hasVariant($state, "result", "success"),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jgbTr, {
            [sty.freeBoxcollapse__jgbTr3BfnV]: hasVariant(
              $state,
              "collapse",
              "collapse"
            ),
            [sty.freeBoxview_status__jgbTrWsXz9]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__hdOhB, {
              [sty.freeBoxview_status__hdOhBwsXz9]: hasVariant(
                $state,
                "view",
                "status"
              ),
              [sty.freeBoxview_status_result_failure__hdOhBwsXz9XcibJ]:
                hasVariant($state, "view", "status") &&
                hasVariant($state, "result", "failure"),
              [sty.freeBoxview_status_result_success__hdOhBwsXz9YnSik]:
                hasVariant($state, "view", "status") &&
                hasVariant($state, "result", "success"),
            })}
          >
            {(hasVariant($state, "view", "status") ? false : true) ? (
              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                children={null}
                className={classNames("__wab_instance", sty.checkbox, {
                  [sty.checkboxview_status]: hasVariant(
                    $state,
                    "view",
                    "status"
                  ),
                })}
                isChecked={
                  generateStateValueProp($state, ["checkbox", "isChecked"]) ??
                  false
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox",
                      "isChecked",
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />
            ) : null}
            {(hasVariant($state, "view", "status") ? true : false) ? (
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img, {
                  [sty.imgview_status]: hasVariant($state, "view", "status"),
                })}
                displayHeight={"20px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20px"}
                src={{
                  src: image2DAmIiITwd,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1,
                }}
              />
            ) : null}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o4IEu,
              {
                [sty.textcollapse__o4IEu3BfnV]: hasVariant(
                  $state,
                  "collapse",
                  "collapse"
                ),
                [sty.textview_status__o4IEuwsXz9]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
                [sty.textview_status_result_failure__o4IEuwsXz9XcibJ]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "failure"),
                [sty.textview_status_result_publishing__o4IEuwsXz9ZYtqX]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "publishing"),
                [sty.textview_status_result_success__o4IEuwsXz9YnSik]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "success"),
              }
            )}
          >
            {"Push to GitHub"}
          </div>
          {(
            hasVariant($state, "view", "status") &&
            hasVariant($state, "result", "failure")
              ? true
              : hasVariant($state, "view", "status") &&
                hasVariant($state, "result", "success")
              ? true
              : false
          ) ? (
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "view", "status") &&
                hasVariant($state, "result", "failure")
                  ? WarningTriangleSvgIcon
                  : hasVariant($state, "view", "status") &&
                    hasVariant($state, "result", "success")
                  ? CheckCircleIcon
                  : "div"
              }
              className={classNames(projectcss.all, sty.svg___6DFCg, {
                [sty.svgview_status_result_failure___6DFCgWsXz9XcibJ]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "failure"),
                [sty.svgview_status_result_success___6DFCgWsXz9YnSik]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "success"),
              })}
              role={"img"}
            />
          ) : null}
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pgu3B, {
            [sty.freeBoxview_status__pgu3BWsXz9]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          {(hasVariant($state, "view", "status") ? false : true) ? (
            <Button
              data-plasmic-name={"removeButton"}
              data-plasmic-override={overrides.removeButton}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__yFjH5)}
                  role={"img"}
                />
              }
              size={"small"}
              startIcon={
                <ArrowRightSvgIcon
                  className={classNames(projectcss.all, sty.svg__lmys9)}
                  role={"img"}
                />
              }
              type={["clear"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__thhNj,
                  {
                    [sty.textcollapse__thhNj3BfnV]: hasVariant(
                      $state,
                      "collapse",
                      "collapse"
                    ),
                  }
                )}
              >
                {hasVariant($state, "collapse", "collapse") ? "Show" : "Remove"}
              </div>
            </Button>
          ) : null}
          {(hasVariant($state, "view", "status") ? true : false) ? (
            <Button
              data-plasmic-name={"viewGithubButton"}
              data-plasmic-override={overrides.viewGithubButton}
              className={classNames("__wab_instance", sty.viewGithubButton, {
                [sty.viewGithubButtonresult_success]: hasVariant(
                  $state,
                  "result",
                  "success"
                ),
                [sty.viewGithubButtonview_status]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
                [sty.viewGithubButtonview_status_result_success]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "success"),
              })}
              endIcon={
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "view", "status")
                      ? OpenIcon
                      : TriangleBottomIcon
                  }
                  className={classNames(projectcss.all, sty.svg___1Omka, {
                    [sty.svgview_status___1OmkawsXz9]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                    [sty.svgview_status_result_success___1OmkawsXz9YnSik]:
                      hasVariant($state, "view", "status") &&
                      hasVariant($state, "result", "success"),
                  })}
                  role={"img"}
                />
              }
              size={hasVariant($state, "view", "status") ? "wide" : undefined}
              startIcon={
                <ArrowRightSvgIcon
                  className={classNames(projectcss.all, sty.svg___5EXnj)}
                  role={"img"}
                />
              }
              type={
                hasVariant($state, "view", "status") ? ["secondary"] : undefined
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9VjHy,
                  {
                    [sty.textview_status___9VjHyWsXz9]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                    [sty.textview_status_result_success___9VjHyWsXz9YnSik]:
                      hasVariant($state, "view", "status") &&
                      hasVariant($state, "result", "success"),
                  }
                )}
              >
                {hasVariant($state, "view", "status")
                  ? "View on GitHub"
                  : "Button"}
              </div>
            </Button>
          ) : null}
        </Stack__>
      </div>
      {(
        hasVariant($state, "view", "status")
          ? false
          : hasVariant($state, "collapse", "collapse")
          ? false
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__juaWs, {
            [sty.freeBoxcollapse__juaWs3BfnV]: hasVariant(
              $state,
              "collapse",
              "collapse"
            ),
            [sty.freeBoxview_status__juaWsWsXz9]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__o9AxH, {
              [sty.freeBoxview_setup__o9AxHsMuCj]: hasVariant(
                $state,
                "view",
                "setup"
              ),
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cEom,
                {
                  [sty.textconnection_connected__cEomX7Cr]: hasVariant(
                    $state,
                    "connection",
                    "connected"
                  ),
                }
              )}
            >
              {"Publish to a new or existing GitHub repo."}
            </div>
            <PlasmicLink__
              data-plasmic-name={"learnMoreLink"}
              data-plasmic-override={overrides.learnMoreLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.learnMoreLink
              )}
              href={
                "https://docs.plasmic.app/learn/publishing/#github-integration"
              }
              platform={"react"}
              target={"_blank"}
            >
              {"Learn more."}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___6XpMr, {
              [sty.freeBoxrepoState_existingLoader___6XpMrBuuMb]: hasVariant(
                $state,
                "repoState",
                "existingLoader"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mwi6W, {
                [sty.freeBoxconnection_connected__mwi6WX7Cr]: hasVariant(
                  $state,
                  "connection",
                  "connected"
                ),
                [sty.freeBoxconnection_error__mwi6Wkj8F1]: hasVariant(
                  $state,
                  "connection",
                  "error"
                ),
                [sty.freeBoxconnection_loading__mwi6WIvD7]: hasVariant(
                  $state,
                  "connection",
                  "loading"
                ),
                [sty.freeBoxresult_success__mwi6WYnSik]: hasVariant(
                  $state,
                  "result",
                  "success"
                ),
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cVqn, {
                  [sty.freeBoxconnection_error__cVqnkj8F1]: hasVariant(
                    $state,
                    "connection",
                    "error"
                  ),
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "connection", "error")
                      ? WarningTriangleSvgIcon
                      : IconIcon
                  }
                  className={classNames(projectcss.all, sty.svg__ab0X, {
                    [sty.svgconnection_connected__ab0XX7Cr]: hasVariant(
                      $state,
                      "connection",
                      "connected"
                    ),
                    [sty.svgconnection_error__ab0Xkj8F1]: hasVariant(
                      $state,
                      "connection",
                      "error"
                    ),
                  })}
                  role={"img"}
                />

                <PlasmicLink__
                  data-plasmic-name={"repoName"}
                  data-plasmic-override={overrides.repoName}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.repoName,
                    {
                      [sty.repoNamecollapse]: hasVariant(
                        $state,
                        "collapse",
                        "collapse"
                      ),
                      [sty.repoNameconnection_connected]: hasVariant(
                        $state,
                        "connection",
                        "connected"
                      ),
                      [sty.repoNameconnection_error]: hasVariant(
                        $state,
                        "connection",
                        "error"
                      ),
                      [sty.repoNameconnection_loading]: hasVariant(
                        $state,
                        "connection",
                        "loading"
                      ),
                      [sty.repoNamerepoState_newRepo]: hasVariant(
                        $state,
                        "repoState",
                        "newRepo"
                      ),
                    }
                  )}
                  platform={"react"}
                >
                  {hasVariant($state, "connection", "error")
                    ? "Error loading repository information."
                    : hasVariant($state, "connection", "connected")
                    ? "<repository name>"
                    : hasVariant($state, "connection", "loading")
                    ? "Loading..."
                    : "Not connected"}
                </PlasmicLink__>
              </Stack__>
              {(hasVariant($state, "connection", "error") ? true : false) ? (
                <Button
                  data-plasmic-name={"retryButton"}
                  data-plasmic-override={overrides.retryButton}
                  className={classNames("__wab_instance", sty.retryButton, {
                    [sty.retryButtonconnection_error]: hasVariant(
                      $state,
                      "connection",
                      "error"
                    ),
                  })}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__mbTsu)}
                      role={"img"}
                    />
                  }
                  size={"wide"}
                  startIcon={
                    <ArrowRightSvgIcon
                      className={classNames(projectcss.all, sty.svg__pxPO)}
                      role={"img"}
                    />
                  }
                  type={["secondary"]}
                  withIcons={["startIcon"]}
                >
                  {hasVariant($state, "connection", "error")
                    ? "Retry"
                    : "Button"}
                </Button>
              ) : null}
              {(
                hasVariant($state, "connection", "connected") ? true : false
              ) ? (
                <Button
                  data-plasmic-name={"removeGithubButton"}
                  data-plasmic-override={overrides.removeGithubButton}
                  className={classNames(
                    "__wab_instance",
                    sty.removeGithubButton,
                    {
                      [sty.removeGithubButtonconnection_connected]: hasVariant(
                        $state,
                        "connection",
                        "connected"
                      ),
                    }
                  )}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__bhlx2)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <CloseIcon
                      className={classNames(projectcss.all, sty.svg__abY3)}
                      role={"img"}
                    />
                  }
                  type={["seamless"]}
                  withIcons={["startIcon"]}
                >
                  {"Remove"}
                </Button>
              ) : null}
              {(
                hasVariant($state, "connection", "error")
                  ? false
                  : hasVariant($state, "connection", "connected")
                  ? false
                  : hasVariant($state, "connection", "loading")
                  ? false
                  : true
              ) ? (
                <Button
                  data-plasmic-name={"connectGithubButton"}
                  data-plasmic-override={overrides.connectGithubButton}
                  className={classNames(
                    "__wab_instance",
                    sty.connectGithubButton,
                    {
                      [sty.connectGithubButtonconnection_connected]: hasVariant(
                        $state,
                        "connection",
                        "connected"
                      ),
                      [sty.connectGithubButtonconnection_error]: hasVariant(
                        $state,
                        "connection",
                        "error"
                      ),
                      [sty.connectGithubButtonconnection_loading]: hasVariant(
                        $state,
                        "connection",
                        "loading"
                      ),
                    }
                  )}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__jy95V)}
                      role={"img"}
                    />
                  }
                  size={"wide"}
                  startIcon={
                    <OpenIcon
                      className={classNames(projectcss.all, sty.svg___7VlNz)}
                      role={"img"}
                    />
                  }
                  type={["primary"]}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3T8E1,
                      {
                        [sty.textconnection_error___3T8E1Kj8F1]: hasVariant(
                          $state,
                          "connection",
                          "error"
                        ),
                        [sty.textconnection_loading___3T8E1IvD7]: hasVariant(
                          $state,
                          "connection",
                          "loading"
                        ),
                      }
                    )}
                  >
                    {"Connect to GitHub"}
                  </div>
                </Button>
              ) : null}
            </Stack__>
            {(
              hasVariant($state, "connection", "connected") &&
              hasVariant($state, "repoState", "existingLoader")
                ? true
                : hasVariant($state, "repoState", "existingLoader")
                ? false
                : hasVariant($state, "connection", "connected")
                ? true
                : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__cDl4U, {
                  [sty.freeBoxconnection_connected__cDl4UX7Cr]: hasVariant(
                    $state,
                    "connection",
                    "connected"
                  ),
                  [sty.freeBoxrepoState_existingLoader__cDl4UBuuMb]: hasVariant(
                    $state,
                    "repoState",
                    "existingLoader"
                  ),
                  [sty.freeBoxrepoState_existingLoader_connection_connected__cDl4UBuuMbX7Cr]:
                    hasVariant($state, "connection", "connected") &&
                    hasVariant($state, "repoState", "existingLoader"),
                })}
              >
                {(
                  hasVariant($state, "repoState", "existingLoader")
                    ? false
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vcnnM, {
                      [sty.freeBoxcollapseOptions__vcnnMvyO8S]: hasVariant(
                        $state,
                        "collapseOptions",
                        "collapseOptions"
                      ),
                      [sty.freeBoxrepoState_existingLoader__vcnnMBuuMb]:
                        hasVariant($state, "repoState", "existingLoader"),
                      [sty.freeBoxrepoState_existingLoader_connection_connected__vcnnMBuuMbX7Cr]:
                        hasVariant($state, "repoState", "existingLoader") &&
                        hasVariant($state, "connection", "connected"),
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qOcy,
                        {
                          [sty.textrepoState_existingLoader__qOcyBuuMb]:
                            hasVariant($state, "repoState", "existingLoader"),
                        }
                      )}
                    >
                      {"Push options"}
                    </div>
                    {(
                      hasVariant($state, "repoState", "existingLoader")
                        ? false
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5W1XO,
                          {
                            [sty.freeBoxrepoState_existingLoader___5W1XOBuuMb]:
                              hasVariant($state, "repoState", "existingLoader"),
                            [sty.freeBoxrepoState_newRepo_connection_connected___5W1XOimcQtX7Cr]:
                              hasVariant($state, "repoState", "newRepo") &&
                              hasVariant($state, "connection", "connected"),
                          }
                        )}
                      >
                        <Button
                          data-plasmic-name={"showOptionsButton"}
                          data-plasmic-override={overrides.showOptionsButton}
                          endIcon={
                            <ChevronDownSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9W1Yg
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ArrowRightSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ptDuP
                              )}
                              role={"img"}
                            />
                          }
                          type={["clear"]}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zdFC,
                              {
                                [sty.textcollapseOptions__zdFCvyO8S]:
                                  hasVariant(
                                    $state,
                                    "collapseOptions",
                                    "collapseOptions"
                                  ),
                              }
                            )}
                          >
                            {hasVariant(
                              $state,
                              "collapseOptions",
                              "collapseOptions"
                            )
                              ? "More options"
                              : "Fewer options"}
                          </div>
                        </Button>
                        <ExpandButton
                          data-plasmic-name={"showOptionsIconButton"}
                          data-plasmic-override={
                            overrides.showOptionsIconButton
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.showOptionsIconButton,
                            {
                              [sty.showOptionsIconButtoncollapseOptions]:
                                hasVariant(
                                  $state,
                                  "collapseOptions",
                                  "collapseOptions"
                                ),
                              [sty.showOptionsIconButtonrepoState_existingLoader]:
                                hasVariant(
                                  $state,
                                  "repoState",
                                  "existingLoader"
                                ),
                            }
                          )}
                          isExpanded={
                            hasVariant(
                              $state,
                              "collapseOptions",
                              "collapseOptions"
                            )
                              ? undefined
                              : true
                          }
                        />
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3TC, {
                    [sty.freeBoxrepoState_existingLoader___3TCBuuMb]:
                      hasVariant($state, "repoState", "existingLoader"),
                    [sty.freeBoxrepoState_existingLoader_connection_connected___3TCBuuMbX7Cr]:
                      hasVariant($state, "connection", "connected") &&
                      hasVariant($state, "repoState", "existingLoader"),
                  })}
                >
                  {(
                    hasVariant($state, "repoState", "newRepo") ? false : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pY6F, {
                        [sty.freeBoxconnection_connected__pY6FX7Cr]: hasVariant(
                          $state,
                          "connection",
                          "connected"
                        ),
                        [sty.freeBoxrepoState_existingLoader__pY6FBuuMb]:
                          hasVariant($state, "repoState", "existingLoader"),
                        [sty.freeBoxrepoState_existingLoader_connection_connected__pY6FBuuMbX7Cr]:
                          hasVariant($state, "repoState", "existingLoader") &&
                          hasVariant($state, "connection", "connected"),
                        [sty.freeBoxrepoState_newRepo__pY6FimcQt]: hasVariant(
                          $state,
                          "repoState",
                          "newRepo"
                        ),
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vbjsr,
                          {
                            [sty.textrepoState_existingLoader_connection_connected__vbjsrBuuMbX7Cr]:
                              hasVariant($state, "connection", "connected") &&
                              hasVariant($state, "repoState", "existingLoader"),
                          }
                        )}
                      >
                        {"Push as"}
                      </div>
                      <Select
                        data-plasmic-name={"pushAs"}
                        data-plasmic-override={overrides.pushAs}
                        className={classNames("__wab_instance", sty.pushAs)}
                        icon={
                          <PlusSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gJa2F
                            )}
                            role={"img"}
                          />
                        }
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "pushAs",
                              "value",
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        type={"bordered"}
                        value={generateStateValueProp($state, [
                          "pushAs",
                          "value",
                        ])}
                      />
                    </Stack__>
                  ) : null}
                  {(
                    hasVariant($state, "repoState", "existingLoader")
                      ? false
                      : hasVariant($state, "collapseOptions", "collapseOptions")
                      ? false
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nrItu,
                        {
                          [sty.freeBoxcollapseOptions__nrItuvyO8S]: hasVariant(
                            $state,
                            "collapseOptions",
                            "collapseOptions"
                          ),
                          [sty.freeBoxconnection_connected__nrItuX7Cr]:
                            hasVariant($state, "connection", "connected"),
                          [sty.freeBoxrepoState_existingLoader__nrItuBuuMb]:
                            hasVariant($state, "repoState", "existingLoader"),
                          [sty.freeBoxrepoState_existingLoader_connection_connected__nrItuBuuMbX7Cr]:
                            hasVariant($state, "connection", "connected") &&
                            hasVariant($state, "repoState", "existingLoader"),
                          [sty.freeBoxrepoState_newRepo__nrItuImcQt]:
                            hasVariant($state, "repoState", "newRepo"),
                        }
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vUo8Z,
                          {
                            [sty.freeBoxconnection_connected__vUo8ZX7Cr]:
                              hasVariant($state, "connection", "connected"),
                            [sty.freeBoxconnection_connected_collapseOptions__vUo8ZX7CrVyO8S]:
                              hasVariant($state, "connection", "connected") &&
                              hasVariant(
                                $state,
                                "collapseOptions",
                                "collapseOptions"
                              ),
                            [sty.freeBoxrepoState_newRepo__vUo8ZimcQt]:
                              hasVariant($state, "repoState", "newRepo"),
                            [sty.freeBoxrepoState_newRepo_connection_connected__vUo8ZimcQtX7Cr]:
                              hasVariant($state, "connection", "connected") &&
                              hasVariant($state, "repoState", "newRepo"),
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zUeWf
                          )}
                        >
                          {"Title (optional)"}
                        </div>
                        <input
                          data-plasmic-name={"title"}
                          data-plasmic-override={overrides.title}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.title,
                            {
                              [sty.titleconnection_connected]: hasVariant(
                                $state,
                                "connection",
                                "connected"
                              ),
                            }
                          )}
                          placeholder={"Title (optional)"}
                          ref={(ref) => {
                            $refs["title"] = ref;
                          }}
                          size={1}
                          type={"text"}
                          value={""}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__futMf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ug7Xy
                          )}
                        >
                          {"Description (optional)"}
                        </div>
                        <textarea
                          data-plasmic-name={"description"}
                          data-plasmic-override={overrides.description}
                          className={classNames(
                            projectcss.all,
                            projectcss.textarea,
                            sty.description
                          )}
                          placeholder={"Description (optional)"}
                          ref={(ref) => {
                            $refs["description"] = ref;
                          }}
                          rows={3}
                          value={""}
                        />
                      </Stack__>
                    </Stack__>
                  ) : null}
                </Stack__>
              </div>
            ) : null}
          </Stack__>
        </div>
      ) : null}
      {(hasVariant($state, "view", "status") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__s2NHx, {
            [sty.freeBoxview_status__s2NHxWsXz9]: hasVariant(
              $state,
              "view",
              "status"
            ),
            [sty.freeBoxview_status_result_failure__s2NHxWsXz9XcibJ]:
              hasVariant($state, "view", "status") &&
              hasVariant($state, "result", "failure"),
            [sty.freeBoxview_status_result_success__s2NHxWsXz9YnSik]:
              hasVariant($state, "view", "status") &&
              hasVariant($state, "result", "success"),
          })}
        >
          <Stack__
            as={"ul"}
            data-plasmic-name={"steps"}
            data-plasmic-override={overrides.steps}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.ul, sty.steps, {
              [sty.stepsview_status]: hasVariant($state, "view", "status"),
            })}
          >
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__iFbAm, {
                [sty.gitJobStepview_status__iFbAmwsXz9]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
                [sty.gitJobStepview_status_result_success__iFbAmwsXz9YnSik]:
                  hasVariant($state, "view", "status") &&
                  hasVariant($state, "result", "success"),
              })}
              status={"finished"}
            >
              {"Check repository state"}
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__pvL5)}
              status={"finished"}
            >
              {"Fetch GitHub access token"}
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__crXgO, {
                [sty.gitJobStepview_status__crXgOwsXz9]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
              })}
              status={"finished"}
            >
              {"Fetch Plasmic access token"}
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__inJas, {
                [sty.gitJobStepview_status__inJaswsXz9]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
              })}
              status={"started"}
            >
              {"Clone repository"}
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__lw6Bz)}
            >
              {"Sync project"}
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__vWw1D)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aqa8U
                )}
              >
                {"Commit changes"}
              </div>
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep__s2ONg)}
            >
              {"Push changes"}
            </GitJobStep>
            <GitJobStep
              className={classNames("__wab_instance", sty.gitJobStep___0IbFw, {
                [sty.gitJobStepview_status___0IbFwwsXz9]: hasVariant(
                  $state,
                  "view",
                  "status"
                ),
              })}
            >
              {"Make pull request"}
            </GitJobStep>
          </Stack__>
        </div>
      ) : null}
      {(
        hasVariant($state, "view", "status") &&
        hasVariant($state, "result", "success")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"githubPagesDelayNotice"}
          data-plasmic-override={overrides.githubPagesDelayNotice}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.githubPagesDelayNotice,
            {
              [sty.githubPagesDelayNoticeview_status]: hasVariant(
                $state,
                "view",
                "status"
              ),
              [sty.githubPagesDelayNoticeview_status_result_success]:
                hasVariant($state, "view", "status") &&
                hasVariant($state, "result", "success"),
            }
          )}
        >
          {hasVariant($state, "view", "status") &&
          hasVariant($state, "result", "success")
            ? "GitHub Pages may take a minute or two for your changes to show up."
            : "Enter some text"}
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "img",
    "removeButton",
    "viewGithubButton",
    "learnMoreLink",
    "repoName",
    "retryButton",
    "removeGithubButton",
    "connectGithubButton",
    "showOptionsButton",
    "showOptionsIconButton",
    "pushAs",
    "title",
    "description",
    "steps",
    "githubPagesDelayNotice",
  ],
  checkbox: ["checkbox"],
  img: ["img"],
  removeButton: ["removeButton"],
  viewGithubButton: ["viewGithubButton"],
  learnMoreLink: ["learnMoreLink"],
  repoName: ["repoName"],
  retryButton: ["retryButton"],
  removeGithubButton: ["removeGithubButton"],
  connectGithubButton: ["connectGithubButton"],
  showOptionsButton: ["showOptionsButton"],
  showOptionsIconButton: ["showOptionsIconButton"],
  pushAs: ["pushAs"],
  title: ["title"],
  description: ["description"],
  steps: ["steps"],
  githubPagesDelayNotice: ["githubPagesDelayNotice"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  img: typeof PlasmicImg__;
  removeButton: typeof Button;
  viewGithubButton: typeof Button;
  learnMoreLink: "a";
  repoName: "a";
  retryButton: typeof Button;
  removeGithubButton: typeof Button;
  connectGithubButton: typeof Button;
  showOptionsButton: typeof Button;
  showOptionsIconButton: typeof ExpandButton;
  pushAs: typeof Select;
  title: "input";
  description: "textarea";
  steps: "ul";
  githubPagesDelayNotice: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubsectionPushDeploy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubsectionPushDeploy__VariantsArgs;
    args?: PlasmicSubsectionPushDeploy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubsectionPushDeploy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubsectionPushDeploy__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubsectionPushDeploy__ArgProps,
          internalVariantPropNames: PlasmicSubsectionPushDeploy__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicSubsectionPushDeploy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubsectionPushDeploy";
  } else {
    func.displayName = `PlasmicSubsectionPushDeploy.${nodeName}`;
  }
  return func;
}

export const PlasmicSubsectionPushDeploy = Object.assign(
  // Top-level PlasmicSubsectionPushDeploy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    img: makeNodeComponent("img"),
    removeButton: makeNodeComponent("removeButton"),
    viewGithubButton: makeNodeComponent("viewGithubButton"),
    learnMoreLink: makeNodeComponent("learnMoreLink"),
    repoName: makeNodeComponent("repoName"),
    retryButton: makeNodeComponent("retryButton"),
    removeGithubButton: makeNodeComponent("removeGithubButton"),
    connectGithubButton: makeNodeComponent("connectGithubButton"),
    showOptionsButton: makeNodeComponent("showOptionsButton"),
    showOptionsIconButton: makeNodeComponent("showOptionsIconButton"),
    pushAs: makeNodeComponent("pushAs"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    steps: makeNodeComponent("steps"),
    githubPagesDelayNotice: makeNodeComponent("githubPagesDelayNotice"),

    // Metadata about props expected for PlasmicSubsectionPushDeploy
    internalVariantProps: PlasmicSubsectionPushDeploy__VariantProps,
    internalArgProps: PlasmicSubsectionPushDeploy__ArgProps,
  }
);

export default PlasmicSubsectionPushDeploy;
/* prettier-ignore-end */
