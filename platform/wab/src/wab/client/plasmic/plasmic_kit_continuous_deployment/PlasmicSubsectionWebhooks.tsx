/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpbcKyXdMTvY59T4C5fjcC
// Component: 9EUA-QZFp69

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import WebhookEvent from "../../components/webhooks/WebhookEvent"; // plasmic-import: MtBpr4iNob/component
import WebhooksHistory from "../../components/webhooks/WebhooksHistory"; // plasmic-import: Ynwp30ZgYk/component
import WebhooksItem from "../../components/webhooks/WebhooksItem"; // plasmic-import: mSgnlB96I5A/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Checkbox from "../../components/widgets/Checkbox"; // plasmic-import: W-rO7NZqPjZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../../components/modals/plasmic/plasmic_kit_project_settings/plasmic_plasmic_kit_project_settings.module.css"; // plasmic-import: fpbcKyXdMTvY59T4C5fjcC/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicSubsectionWebhooks.module.css"; // plasmic-import: 9EUA-QZFp69/css

import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ICm0kU5OI3/icon

createPlasmicElementProxy;

export type PlasmicSubsectionWebhooks__VariantMembers = {
  collapse: "collapse";
  view: "setup" | "status";
};
export type PlasmicSubsectionWebhooks__VariantsArgs = {
  collapse?: SingleBooleanChoiceArg<"collapse">;
  view?: SingleChoiceArg<"setup" | "status">;
};
type VariantPropType = keyof PlasmicSubsectionWebhooks__VariantsArgs;
export const PlasmicSubsectionWebhooks__VariantProps =
  new Array<VariantPropType>("collapse", "view");

export type PlasmicSubsectionWebhooks__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSubsectionWebhooks__ArgsType;
export const PlasmicSubsectionWebhooks__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicSubsectionWebhooks__OverridesType = {
  root?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  removeButton?: Flex__<typeof Button>;
  description?: Flex__<"div">;
  learnMoreLink?: Flex__<"a">;
  viewHistoryButton?: Flex__<typeof Button>;
  addButton?: Flex__<typeof Button>;
  history?: Flex__<typeof WebhooksHistory>;
};

export interface DefaultSubsectionWebhooksProps {
  children?: React.ReactNode;
  collapse?: SingleBooleanChoiceArg<"collapse">;
  view?: SingleChoiceArg<"setup" | "status">;
  className?: string;
}

const $$ = {};

function PlasmicSubsectionWebhooks__RenderFunc(props: {
  variants: PlasmicSubsectionWebhooks__VariantsArgs;
  args: PlasmicSubsectionWebhooks__ArgsType;
  overrides: PlasmicSubsectionWebhooks__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapse,
      },
      {
        path: "view",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.view,
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcollapse]: hasVariant($state, "collapse", "collapse"),
          [sty.rootview_status]: hasVariant($state, "view", "status"),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__qQdPq, {
          [sty.freeBoxcollapse_view_status__qQdPqJe1PNVFkKr]:
            hasVariant($state, "view", "status") &&
            hasVariant($state, "collapse", "collapse"),
        })}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__xOmFn, {
          [sty.freeBoxcollapse_view_status__xOmFnJe1PNVFkKr]:
            hasVariant($state, "view", "status") &&
            hasVariant($state, "collapse", "collapse"),
          [sty.freeBoxview_status__xOmFnVFkKr]: hasVariant(
            $state,
            "view",
            "status"
          ),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__iatl5, {
            [sty.freeBoxcollapse_view_status__iatl5Je1PNVFkKr]:
              hasVariant($state, "view", "status") &&
              hasVariant($state, "collapse", "collapse"),
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ybU34)}>
            {(hasVariant($state, "view", "status") ? false : true) ? (
              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                children={null}
                className={classNames("__wab_instance", sty.checkbox, {
                  [sty.checkboxview_status]: hasVariant(
                    $state,
                    "view",
                    "status"
                  ),
                })}
                isChecked={
                  generateStateValueProp($state, ["checkbox", "isChecked"]) ??
                  false
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox",
                      "isChecked",
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />
            ) : null}
            {(hasVariant($state, "view", "status") ? true : false) ? (
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__nyfUi, {
                  [sty.svgview_status__nyfUivFkKr]: hasVariant(
                    $state,
                    "view",
                    "status"
                  ),
                })}
                role={"img"}
              />
            ) : null}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oIlvd
            )}
          >
            {"Call webhooks"}
          </div>
        </Stack__>
        <div
          className={classNames(projectcss.all, sty.freeBox__aumpN, {
            [sty.freeBoxview_status__aumpNvFkKr]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          {(hasVariant($state, "view", "status") ? false : true) ? (
            <Button
              data-plasmic-name={"removeButton"}
              data-plasmic-override={overrides.removeButton}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__jp1Mp)}
                  role={"img"}
                />
              }
              size={"small"}
              startIcon={
                <ArrowRightSvgIcon
                  className={classNames(projectcss.all, sty.svg__wgXwS)}
                  role={"img"}
                />
              }
              type={["clear"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l77Qe,
                  {
                    [sty.textcollapse__l77QeJe1PN]: hasVariant(
                      $state,
                      "collapse",
                      "collapse"
                    ),
                    [sty.textview_status__l77QeVFkKr]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                  }
                )}
              >
                {hasVariant($state, "collapse", "collapse") ? "Show" : "Remove"}
              </div>
            </Button>
          ) : null}
        </div>
      </div>
      {(
        hasVariant($state, "view", "status")
          ? false
          : hasVariant($state, "collapse", "collapse")
          ? false
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__jxYbj, {
            [sty.freeBoxcollapse__jxYbjJe1PN]: hasVariant(
              $state,
              "collapse",
              "collapse"
            ),
            [sty.freeBoxview_status__jxYbjvFkKr]: hasVariant(
              $state,
              "view",
              "status"
            ),
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hd5L, {
              [sty.freeBoxview_status__hd5LVFkKr]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
          >
            <div
              data-plasmic-name={"description"}
              data-plasmic-override={overrides.description}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.description
              )}
            >
              {
                "Trigger a build in Vercel, Netlify, Jenkins, or any other CI/CD pipeline. You should first [add Plasmic to your codebase]."
              }
            </div>
            <PlasmicLink__
              data-plasmic-name={"learnMoreLink"}
              data-plasmic-override={overrides.learnMoreLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.learnMoreLink
              )}
              href={"https://docs.plasmic.app/learn/publishing/#call-webhooks"}
              platform={"react"}
              target={"_blank"}
            >
              {"Learn more."}
            </PlasmicLink__>
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__qQqjQ, {
              [sty.freeBoxview_status__qQqjQvFkKr]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <WebhooksItem
                    className={classNames(
                      "__wab_instance",
                      sty.webhooksItem__ib1Nt
                    )}
                  />

                  <WebhooksItem
                    className={classNames(
                      "__wab_instance",
                      sty.webhooksItem__pyXs
                    )}
                  />
                </React.Fragment>
              ),
              value: args.children,
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___3TmyY, {
              [sty.freeBoxview_status___3TmyYvFkKr]: hasVariant(
                $state,
                "view",
                "status"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gzP9)}
            >
              <Button
                data-plasmic-name={"viewHistoryButton"}
                data-plasmic-override={overrides.viewHistoryButton}
                className={classNames("__wab_instance", sty.viewHistoryButton)}
                endIcon={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg__eQsdn)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightSvgIcon
                    className={classNames(projectcss.all, sty.svg__aPvi5)}
                    role={"img"}
                  />
                }
                type={["clear"]}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7CxUe
                  )}
                >
                  {"View history ->"}
                </div>
              </Button>
              <Button
                data-plasmic-name={"addButton"}
                data-plasmic-override={overrides.addButton}
                className={classNames("__wab_instance", sty.addButton)}
                endIcon={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg___2JJuo)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightSvgIcon
                    className={classNames(projectcss.all, sty.svg__yoP2)}
                    role={"img"}
                  />
                }
                type={["primary"]}
              >
                {"New webhook"}
              </Button>
            </Stack__>
          </div>
        </div>
      ) : null}
      {(
        hasVariant($state, "view", "status") &&
        hasVariant($state, "collapse", "collapse")
          ? false
          : hasVariant($state, "view", "status")
          ? true
          : false
      ) ? (
        <WebhooksHistory
          data-plasmic-name={"history"}
          data-plasmic-override={overrides.history}
          className={classNames("__wab_instance", sty.history, {
            [sty.historycollapse_view_status]:
              hasVariant($state, "view", "status") &&
              hasVariant($state, "collapse", "collapse"),
            [sty.historyview_status]: hasVariant($state, "view", "status"),
          })}
          events={
            <React.Fragment>
              <WebhookEvent
                className={classNames(
                  "__wab_instance",
                  sty.webhookEvent___87TWz,
                  {
                    [sty.webhookEventcollapse_view_status___87TWzJe1PNVFkKr]:
                      hasVariant($state, "view", "status") &&
                      hasVariant($state, "collapse", "collapse"),
                    [sty.webhookEventview_status___87TWzVFkKr]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                  }
                )}
                method={"GET"}
                url={"https://plasmic.app/"}
              />

              <WebhookEvent
                className={classNames(
                  "__wab_instance",
                  sty.webhookEvent__kmv0A,
                  {
                    [sty.webhookEventview_status__kmv0AvFkKr]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                  }
                )}
                status={"404"}
                url={
                  "https://plasmic.app/this-is-a-really/long/url/to-see-what-happens-when-a-url-needs-to-wrap"
                }
              />

              <WebhookEvent
                className={classNames(
                  "__wab_instance",
                  sty.webhookEvent__fPe7K,
                  {
                    [sty.webhookEventview_status__fPe7KVFkKr]: hasVariant(
                      $state,
                      "view",
                      "status"
                    ),
                  }
                )}
                expanded={true}
                method={"OPTIONS"}
                status={"500"}
                url={"https://plasmic.app/options/"}
              />

              <WebhookEvent
                className={classNames("__wab_instance", sty.webhookEvent__kzK)}
                method={"GET"}
                url={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gZLqy
                    )}
                  >
                    {"https://plasmic.app/"}
                  </div>
                }
              />
            </React.Fragment>
          }
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "removeButton",
    "description",
    "learnMoreLink",
    "viewHistoryButton",
    "addButton",
    "history",
  ],
  checkbox: ["checkbox"],
  removeButton: ["removeButton"],
  description: ["description"],
  learnMoreLink: ["learnMoreLink"],
  viewHistoryButton: ["viewHistoryButton"],
  addButton: ["addButton"],
  history: ["history"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  removeButton: typeof Button;
  description: "div";
  learnMoreLink: "a";
  viewHistoryButton: typeof Button;
  addButton: typeof Button;
  history: typeof WebhooksHistory;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubsectionWebhooks__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubsectionWebhooks__VariantsArgs;
    args?: PlasmicSubsectionWebhooks__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubsectionWebhooks__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubsectionWebhooks__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubsectionWebhooks__ArgProps,
          internalVariantPropNames: PlasmicSubsectionWebhooks__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicSubsectionWebhooks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubsectionWebhooks";
  } else {
    func.displayName = `PlasmicSubsectionWebhooks.${nodeName}`;
  }
  return func;
}

export const PlasmicSubsectionWebhooks = Object.assign(
  // Top-level PlasmicSubsectionWebhooks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    removeButton: makeNodeComponent("removeButton"),
    description: makeNodeComponent("description"),
    learnMoreLink: makeNodeComponent("learnMoreLink"),
    viewHistoryButton: makeNodeComponent("viewHistoryButton"),
    addButton: makeNodeComponent("addButton"),
    history: makeNodeComponent("history"),

    // Metadata about props expected for PlasmicSubsectionWebhooks
    internalVariantProps: PlasmicSubsectionWebhooks__VariantProps,
    internalArgProps: PlasmicSubsectionWebhooks__ArgProps,
  }
);

export default PlasmicSubsectionWebhooks;
/* prettier-ignore-end */
