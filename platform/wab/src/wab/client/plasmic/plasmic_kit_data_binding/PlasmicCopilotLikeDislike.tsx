/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: -LDNJojbDZD

import * as React from "react";

import {
  Flex as Flex__,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicCopilotLikeDislike.module.css"; // plasmic-import: -LDNJojbDZD/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: ZTW8iKylgI/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: mPucsZbX6V/icon

createPlasmicElementProxy;

export type PlasmicCopilotLikeDislike__VariantMembers = {
  state: "like" | "dislike";
};
export type PlasmicCopilotLikeDislike__VariantsArgs = {
  state?: SingleChoiceArg<"like" | "dislike">;
};
type VariantPropType = keyof PlasmicCopilotLikeDislike__VariantsArgs;
export const PlasmicCopilotLikeDislike__VariantProps =
  new Array<VariantPropType>("state");

export type PlasmicCopilotLikeDislike__ArgsType = {};
type ArgPropType = keyof PlasmicCopilotLikeDislike__ArgsType;
export const PlasmicCopilotLikeDislike__ArgProps = new Array<ArgPropType>();

export type PlasmicCopilotLikeDislike__OverridesType = {
  root?: Flex__<"div">;
  likeBtn?: Flex__<typeof IconButton>;
  dislikeBtn?: Flex__<typeof IconButton>;
};

export interface DefaultCopilotLikeDislikeProps {
  state?: SingleChoiceArg<"like" | "dislike">;
  className?: string;
}

const $$ = {};

function PlasmicCopilotLikeDislike__RenderFunc(props: {
  variants: PlasmicCopilotLikeDislike__VariantsArgs;
  args: PlasmicCopilotLikeDislike__ArgsType;
  overrides: PlasmicCopilotLikeDislike__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        { [sty.rootstate_dislike]: hasVariant($state, "state", "dislike") }
      )}
    >
      <IconButton
        data-plasmic-name={"likeBtn"}
        data-plasmic-override={overrides.likeBtn}
        className={classNames("__wab_instance", sty.likeBtn, {
          [sty.likeBtnstate_dislike]: hasVariant($state, "state", "dislike"),
          [sty.likeBtnstate_like]: hasVariant($state, "state", "like"),
        })}
        disabled={hasVariant($state, "state", "dislike") ? true : undefined}
        size={"small"}
      >
        <Icon4Icon
          className={classNames(projectcss.all, sty.svg__tYoHl, {
            [sty.svgstate_dislike__tYoHl5IumH]: hasVariant(
              $state,
              "state",
              "dislike"
            ),
            [sty.svgstate_like__tYoHlYkBI]: hasVariant($state, "state", "like"),
          })}
          role={"img"}
        />
      </IconButton>
      <IconButton
        data-plasmic-name={"dislikeBtn"}
        data-plasmic-override={overrides.dislikeBtn}
        className={classNames("__wab_instance", sty.dislikeBtn, {
          [sty.dislikeBtnstate_dislike]: hasVariant($state, "state", "dislike"),
          [sty.dislikeBtnstate_like]: hasVariant($state, "state", "like"),
        })}
        disabled={hasVariant($state, "state", "like") ? true : undefined}
        size={"small"}
      >
        <Icon5Icon
          className={classNames(projectcss.all, sty.svg__uQuhx, {
            [sty.svgstate_dislike__uQuhx5IumH]: hasVariant(
              $state,
              "state",
              "dislike"
            ),
            [sty.svgstate_like__uQuhxYkBI]: hasVariant($state, "state", "like"),
          })}
          role={"img"}
        />
      </IconButton>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "likeBtn", "dislikeBtn"],
  likeBtn: ["likeBtn"],
  dislikeBtn: ["dislikeBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  likeBtn: typeof IconButton;
  dislikeBtn: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopilotLikeDislike__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopilotLikeDislike__VariantsArgs;
    args?: PlasmicCopilotLikeDislike__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopilotLikeDislike__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopilotLikeDislike__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCopilotLikeDislike__ArgProps,
          internalVariantPropNames: PlasmicCopilotLikeDislike__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCopilotLikeDislike__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopilotLikeDislike";
  } else {
    func.displayName = `PlasmicCopilotLikeDislike.${nodeName}`;
  }
  return func;
}

export const PlasmicCopilotLikeDislike = Object.assign(
  // Top-level PlasmicCopilotLikeDislike renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    likeBtn: makeNodeComponent("likeBtn"),
    dislikeBtn: makeNodeComponent("dislikeBtn"),

    // Metadata about props expected for PlasmicCopilotLikeDislike
    internalVariantProps: PlasmicCopilotLikeDislike__VariantProps,
    internalArgProps: PlasmicCopilotLikeDislike__ArgProps,
  }
);

export default PlasmicCopilotLikeDislike;
/* prettier-ignore-end */
