/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: QcDtYmEqee

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicWrapRepeatedElementOption.module.css"; // plasmic-import: QcDtYmEqee/css

createPlasmicElementProxy;

export type PlasmicWrapRepeatedElementOption__VariantMembers = {};
export type PlasmicWrapRepeatedElementOption__VariantsArgs = {};
type VariantPropType = keyof PlasmicWrapRepeatedElementOption__VariantsArgs;
export const PlasmicWrapRepeatedElementOption__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWrapRepeatedElementOption__ArgsType = {
  wrapRepeatedContainer?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWrapRepeatedElementOption__ArgsType;
export const PlasmicWrapRepeatedElementOption__ArgProps =
  new Array<ArgPropType>("wrapRepeatedContainer", "children", "slot");

export type PlasmicWrapRepeatedElementOption__OverridesType = {
  root?: Flex__<"div">;
  wrapRepeatedContainer?: Flex__<"div">;
  frame31?: Flex__<"div">;
  wrapAllItems?: Flex__<"div">;
  wrapAllTheRepeatedElementsInASingleWrapper?: Flex__<"div">;
};

export interface DefaultWrapRepeatedElementOptionProps {
  wrapRepeatedContainer?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicWrapRepeatedElementOption__RenderFunc(props: {
  variants: PlasmicWrapRepeatedElementOption__VariantsArgs;
  args: PlasmicWrapRepeatedElementOption__ArgsType;
  overrides: PlasmicWrapRepeatedElementOption__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"wrapRepeatedContainer"}
        data-plasmic-override={overrides.wrapRepeatedContainer}
        className={classNames(projectcss.all, sty.wrapRepeatedContainer)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qa3Bj)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2BBgb)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__zhBrH)}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lOdVl)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__osDk3)}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jaWBc)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__byr9R)}
                />
              </Stack__>
            </Stack__>
          ),
          value: args.wrapRepeatedContainer,
        })}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"frame31"}
        data-plasmic-override={overrides.frame31}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame31)}
      >
        <div
          data-plasmic-name={"wrapAllItems"}
          data-plasmic-override={overrides.wrapAllItems}
          className={classNames(projectcss.all, sty.wrapAllItems)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eorQg)}>
            {renderPlasmicSlot({
              defaultContents: "Wrap and Repeat",
              value: args.children,
              className: classNames(sty.slotTargetChildren),
            })}
          </div>
        </div>
        <div
          data-plasmic-name={"wrapAllTheRepeatedElementsInASingleWrapper"}
          data-plasmic-override={
            overrides.wrapAllTheRepeatedElementsInASingleWrapper
          }
          className={classNames(
            projectcss.all,
            sty.wrapAllTheRepeatedElementsInASingleWrapper
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___0DSaK)}>
            {renderPlasmicSlot({
              defaultContents: "Wrap each element individually and repeat them",
              value: args.slot,
              className: classNames(sty.slotTargetSlot),
            })}
          </div>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "wrapRepeatedContainer",
    "frame31",
    "wrapAllItems",
    "wrapAllTheRepeatedElementsInASingleWrapper",
  ],
  wrapRepeatedContainer: ["wrapRepeatedContainer"],
  frame31: [
    "frame31",
    "wrapAllItems",
    "wrapAllTheRepeatedElementsInASingleWrapper",
  ],
  wrapAllItems: ["wrapAllItems"],
  wrapAllTheRepeatedElementsInASingleWrapper: [
    "wrapAllTheRepeatedElementsInASingleWrapper",
  ],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  wrapRepeatedContainer: "div";
  frame31: "div";
  wrapAllItems: "div";
  wrapAllTheRepeatedElementsInASingleWrapper: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWrapRepeatedElementOption__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWrapRepeatedElementOption__VariantsArgs;
    args?: PlasmicWrapRepeatedElementOption__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWrapRepeatedElementOption__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWrapRepeatedElementOption__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWrapRepeatedElementOption__ArgProps,
          internalVariantPropNames:
            PlasmicWrapRepeatedElementOption__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicWrapRepeatedElementOption__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWrapRepeatedElementOption";
  } else {
    func.displayName = `PlasmicWrapRepeatedElementOption.${nodeName}`;
  }
  return func;
}

export const PlasmicWrapRepeatedElementOption = Object.assign(
  // Top-level PlasmicWrapRepeatedElementOption renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wrapRepeatedContainer: makeNodeComponent("wrapRepeatedContainer"),
    frame31: makeNodeComponent("frame31"),
    wrapAllItems: makeNodeComponent("wrapAllItems"),
    wrapAllTheRepeatedElementsInASingleWrapper: makeNodeComponent(
      "wrapAllTheRepeatedElementsInASingleWrapper"
    ),

    // Metadata about props expected for PlasmicWrapRepeatedElementOption
    internalVariantProps: PlasmicWrapRepeatedElementOption__VariantProps,
    internalArgProps: PlasmicWrapRepeatedElementOption__ArgProps,
  }
);

export default PlasmicWrapRepeatedElementOption;
/* prettier-ignore-end */
