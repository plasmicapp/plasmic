/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: xmF37LmWYE

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import DataPickerColumnItem from "../../components/sidebar-tabs/DataBinding/DataPickerColumnItem"; // plasmic-import: fa3uzsyXr0/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicDataPickerColumn.module.css"; // plasmic-import: xmF37LmWYE/css

import PlaySvgIcon from "../plasmic_kit/PlasmicIcon__PlaySvg"; // plasmic-import: j39GoLwZnf7-v/icon

createPlasmicElementProxy;

export type PlasmicDataPickerColumn__VariantMembers = {
  isWide: "isWide";
  previewSteps: "previewSteps";
};
export type PlasmicDataPickerColumn__VariantsArgs = {
  isWide?: SingleBooleanChoiceArg<"isWide">;
  previewSteps?: SingleBooleanChoiceArg<"previewSteps">;
};
type VariantPropType = keyof PlasmicDataPickerColumn__VariantsArgs;
export const PlasmicDataPickerColumn__VariantProps = new Array<VariantPropType>(
  "isWide",
  "previewSteps"
);

export type PlasmicDataPickerColumn__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicDataPickerColumn__ArgsType;
export const PlasmicDataPickerColumn__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicDataPickerColumn__OverridesType = {
  root?: Flex__<"div">;
  runAllSteps?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultDataPickerColumnProps {
  children?: React.ReactNode;
  isWide?: SingleBooleanChoiceArg<"isWide">;
  previewSteps?: SingleBooleanChoiceArg<"previewSteps">;
  className?: string;
}

const $$ = {};

function PlasmicDataPickerColumn__RenderFunc(props: {
  variants: PlasmicDataPickerColumn__VariantsArgs;
  args: PlasmicDataPickerColumn__ArgsType;
  overrides: PlasmicDataPickerColumn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isWide",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isWide,
      },
      {
        path: "previewSteps",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.previewSteps,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisWide]: hasVariant($state, "isWide", "isWide"),
          [sty.rootpreviewSteps]: hasVariant(
            $state,
            "previewSteps",
            "previewSteps"
          ),
        }
      )}
    >
      <Button
        data-plasmic-name={"runAllSteps"}
        data-plasmic-override={overrides.runAllSteps}
        className={classNames("__wab_instance", sty.runAllSteps, {
          [sty.runAllStepspreviewSteps]: hasVariant(
            $state,
            "previewSteps",
            "previewSteps"
          ),
        })}
        startIcon={
          <PlaySvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        type={[]}
        withIcons={["startIcon"]}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"Run all previous steps"}
        </div>
      </Button>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxisWide]: hasVariant($state, "isWide", "isWide"),
          [sty.freeBoxpreviewSteps]: hasVariant(
            $state,
            "previewSteps",
            "previewSteps"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <DataPickerColumnItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerColumnItem__mnPLv
                )}
                variableType={"string"}
              />

              <DataPickerColumnItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerColumnItem__cKtme
                )}
                variableType={"number"}
              />

              <DataPickerColumnItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerColumnItem__jyz3V
                )}
                variableType={"boolean"}
              />

              <DataPickerColumnItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerColumnItem__dPje
                )}
                variableType={"object"}
              />

              <DataPickerColumnItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerColumnItem__x25Vl
                )}
                variableType={"array"}
              />
            </React.Fragment>
          ),
          value: args.children,
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "runAllSteps", "svg", "text", "freeBox"],
  runAllSteps: ["runAllSteps", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  runAllSteps: typeof Button;
  svg: "svg";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataPickerColumn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataPickerColumn__VariantsArgs;
    args?: PlasmicDataPickerColumn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataPickerColumn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDataPickerColumn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataPickerColumn__ArgProps,
          internalVariantPropNames: PlasmicDataPickerColumn__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDataPickerColumn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataPickerColumn";
  } else {
    func.displayName = `PlasmicDataPickerColumn.${nodeName}`;
  }
  return func;
}

export const PlasmicDataPickerColumn = Object.assign(
  // Top-level PlasmicDataPickerColumn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    runAllSteps: makeNodeComponent("runAllSteps"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicDataPickerColumn
    internalVariantProps: PlasmicDataPickerColumn__VariantProps,
    internalArgProps: PlasmicDataPickerColumn__ArgProps,
  }
);

export default PlasmicDataPickerColumn;
/* prettier-ignore-end */
