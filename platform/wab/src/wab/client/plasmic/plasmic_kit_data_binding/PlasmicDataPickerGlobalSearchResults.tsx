/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: GDvL7J9P5V4

import * as React from "react";

import {
  Flex as Flex__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import DataPickerGlobalSearchResultsItem from "../../components/sidebar-tabs/DataBinding/DataPickerGlobalSearchResultsItem"; // plasmic-import: nD2Ql_rEk6/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicDataPickerGlobalSearchResults.module.css"; // plasmic-import: GDvL7J9P5V4/css

createPlasmicElementProxy;

export type PlasmicDataPickerGlobalSearchResults__VariantMembers = {};
export type PlasmicDataPickerGlobalSearchResults__VariantsArgs = {};
type VariantPropType = keyof PlasmicDataPickerGlobalSearchResults__VariantsArgs;
export const PlasmicDataPickerGlobalSearchResults__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDataPickerGlobalSearchResults__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDataPickerGlobalSearchResults__ArgsType;
export const PlasmicDataPickerGlobalSearchResults__ArgProps =
  new Array<ArgPropType>("children");

export type PlasmicDataPickerGlobalSearchResults__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultDataPickerGlobalSearchResultsProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicDataPickerGlobalSearchResults__RenderFunc(props: {
  variants: PlasmicDataPickerGlobalSearchResults__VariantsArgs;
  args: PlasmicDataPickerGlobalSearchResults__ArgsType;
  overrides: PlasmicDataPickerGlobalSearchResults__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Search results"}
      </div>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <DataPickerGlobalSearchResultsItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerGlobalSearchResultsItem__b90X7
                )}
                itemName={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__beBrj
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Titl"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 400 }}
                      >
                        {"e"}
                      </span>
                    </React.Fragment>
                  </div>
                }
                itemPath={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yyv0A
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 400 }}
                      >
                        {"Variants / Colors / Black /"}
                      </span>
                    </React.Fragment>
                  </div>
                }
              />

              <DataPickerGlobalSearchResultsItem
                className={classNames(
                  "__wab_instance",
                  sty.dataPickerGlobalSearchResultsItem__wkt0L
                )}
                itemName={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7LKw1
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Titl"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 400 }}
                      >
                        {"e"}
                      </span>
                    </React.Fragment>
                  </div>
                }
                itemPath={null}
              />
            </React.Fragment>
          ),
          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox"],
  text: ["text"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataPickerGlobalSearchResults__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataPickerGlobalSearchResults__VariantsArgs;
    args?: PlasmicDataPickerGlobalSearchResults__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<
    // Specify variants directly as props
    PlasmicDataPickerGlobalSearchResults__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicDataPickerGlobalSearchResults__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataPickerGlobalSearchResults__ArgProps,
          internalVariantPropNames:
            PlasmicDataPickerGlobalSearchResults__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDataPickerGlobalSearchResults__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataPickerGlobalSearchResults";
  } else {
    func.displayName = `PlasmicDataPickerGlobalSearchResults.${nodeName}`;
  }
  return func;
}

export const PlasmicDataPickerGlobalSearchResults = Object.assign(
  // Top-level PlasmicDataPickerGlobalSearchResults renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicDataPickerGlobalSearchResults
    internalVariantProps: PlasmicDataPickerGlobalSearchResults__VariantProps,
    internalArgProps: PlasmicDataPickerGlobalSearchResults__ArgProps,
  }
);

export default PlasmicDataPickerGlobalSearchResults;
/* prettier-ignore-end */
