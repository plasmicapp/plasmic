/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: CdMYaSGMjG

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CopilotLikeDislike from "../../components/CopilotLikeDislike"; // plasmic-import: -LDNJojbDZD/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Textbox from "../../components/widgets/Textbox"; // plasmic-import: pA22NEzDCsn_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicCopilotMsg.module.css"; // plasmic-import: CdMYaSGMjG/css

import CheckCircleIcon from "../plasmic_kit/PlasmicIcon__CheckCircle"; // plasmic-import: gU-8UYs9RllyJ/icon

createPlasmicElementProxy;

export type PlasmicCopilotMsg__VariantMembers = {
  userPrompt: "userPrompt";
  rightMargin: "rightMargin";
  feedback: "submit" | "submitting" | "submitted";
};
export type PlasmicCopilotMsg__VariantsArgs = {
  userPrompt?: SingleBooleanChoiceArg<"userPrompt">;
  rightMargin?: SingleBooleanChoiceArg<"rightMargin">;
  feedback?: SingleChoiceArg<"submit" | "submitting" | "submitted">;
};
type VariantPropType = keyof PlasmicCopilotMsg__VariantsArgs;
export const PlasmicCopilotMsg__VariantProps = new Array<VariantPropType>(
  "userPrompt",
  "rightMargin",
  "feedback"
);

export type PlasmicCopilotMsg__ArgsType = {};
type ArgPropType = keyof PlasmicCopilotMsg__ArgsType;
export const PlasmicCopilotMsg__ArgProps = new Array<ArgPropType>();

export type PlasmicCopilotMsg__OverridesType = {
  root?: Flex__<"div">;
  code?: Flex__<"div">;
  prompt?: Flex__<"div">;
  copilotLikeDislike?: Flex__<typeof CopilotLikeDislike>;
  applyBtn?: Flex__<"div">;
  feedbackTextbox?: Flex__<typeof Textbox>;
  submitFeedbackBtn?: Flex__<typeof Button>;
  feedbackSubmittedContainer?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultCopilotMsgProps {
  userPrompt?: SingleBooleanChoiceArg<"userPrompt">;
  rightMargin?: SingleBooleanChoiceArg<"rightMargin">;
  feedback?: SingleChoiceArg<"submit" | "submitting" | "submitted">;
  className?: string;
}

const $$ = {};

function PlasmicCopilotMsg__RenderFunc(props: {
  variants: PlasmicCopilotMsg__VariantsArgs;
  args: PlasmicCopilotMsg__ArgsType;
  overrides: PlasmicCopilotMsg__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userPrompt",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.userPrompt,
      },
      {
        path: "rightMargin",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rightMargin,
      },
      {
        path: "feedback",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.feedback,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootfeedback_submit]: hasVariant($state, "feedback", "submit"),
          [sty.rootfeedback_submitted]: hasVariant(
            $state,
            "feedback",
            "submitted"
          ),
          [sty.rootfeedback_submitting]: hasVariant(
            $state,
            "feedback",
            "submitting"
          ),
          [sty.rootrightMargin]: hasVariant(
            $state,
            "rightMargin",
            "rightMargin"
          ),
          [sty.rootuserPrompt]: hasVariant($state, "userPrompt", "userPrompt"),
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__enc1M, {
          [sty.freeBoxfeedback_submit__enc1Md7ZDz]: hasVariant(
            $state,
            "feedback",
            "submit"
          ),
          [sty.freeBoxfeedback_submitting__enc1MYy9Lu]: hasVariant(
            $state,
            "feedback",
            "submitting"
          ),
          [sty.freeBoxrightMargin__enc1MpWAhk]: hasVariant(
            $state,
            "rightMargin",
            "rightMargin"
          ),
          [sty.freeBoxuserPrompt__enc1MkOhWl]: hasVariant(
            $state,
            "userPrompt",
            "userPrompt"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__jAuZ, {
            [sty.freeBoxfeedback_submit__jAuZd7ZDz]: hasVariant(
              $state,
              "feedback",
              "submit"
            ),
            [sty.freeBoxuserPrompt__jAuZkOhWl]: hasVariant(
              $state,
              "userPrompt",
              "userPrompt"
            ),
          })}
        >
          <div
            data-plasmic-name={"code"}
            data-plasmic-override={overrides.code}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.code,
              {
                [sty.codeuserPrompt]: hasVariant(
                  $state,
                  "userPrompt",
                  "userPrompt"
                ),
              }
            )}
          >
            {hasVariant($state, "userPrompt", "userPrompt")
              ? "get the IDs of everything"
              : "xs.map((x) => x.id)"}
          </div>
          {(hasVariant($state, "userPrompt", "userPrompt") ? true : false) ? (
            <div
              data-plasmic-name={"prompt"}
              data-plasmic-override={overrides.prompt}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.prompt,
                {
                  [sty.promptuserPrompt]: hasVariant(
                    $state,
                    "userPrompt",
                    "userPrompt"
                  ),
                }
              )}
            >
              {hasVariant($state, "userPrompt", "userPrompt")
                ? "get the IDs of everything"
                : "xs.map((x) => x.id)"}
            </div>
          ) : null}
        </div>
        {(hasVariant($state, "userPrompt", "userPrompt") ? false : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___4B4Sb, {
              [sty.freeBoxfeedback_submit___4B4SbD7ZDz]: hasVariant(
                $state,
                "feedback",
                "submit"
              ),
              [sty.freeBoxfeedback_submitting___4B4SbYy9Lu]: hasVariant(
                $state,
                "feedback",
                "submitting"
              ),
              [sty.freeBoxrightMargin___4B4SbpWAhk]: hasVariant(
                $state,
                "rightMargin",
                "rightMargin"
              ),
              [sty.freeBoxuserPrompt___4B4SbKOhWl]: hasVariant(
                $state,
                "userPrompt",
                "userPrompt"
              ),
            })}
          >
            <CopilotLikeDislike
              data-plasmic-name={"copilotLikeDislike"}
              data-plasmic-override={overrides.copilotLikeDislike}
              className={classNames("__wab_instance", sty.copilotLikeDislike, {
                [sty.copilotLikeDislikefeedback_submit]: hasVariant(
                  $state,
                  "feedback",
                  "submit"
                ),
                [sty.copilotLikeDislikefeedback_submitting]: hasVariant(
                  $state,
                  "feedback",
                  "submitting"
                ),
                [sty.copilotLikeDislikeuserPrompt]: hasVariant(
                  $state,
                  "userPrompt",
                  "userPrompt"
                ),
              })}
            />

            <div
              data-plasmic-name={"applyBtn"}
              data-plasmic-override={overrides.applyBtn}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.applyBtn,
                {
                  [sty.applyBtnrightMargin]: hasVariant(
                    $state,
                    "rightMargin",
                    "rightMargin"
                  ),
                  [sty.applyBtnuserPrompt]: hasVariant(
                    $state,
                    "userPrompt",
                    "userPrompt"
                  ),
                }
              )}
              tabIndex={0}
            >
              {"Apply"}
            </div>
          </div>
        ) : null}
      </div>
      {(
        hasVariant($state, "feedback", "submitting")
          ? true
          : hasVariant($state, "feedback", "submit")
          ? true
          : false
      ) ? (
        <Textbox
          data-plasmic-name={"feedbackTextbox"}
          data-plasmic-override={overrides.feedbackTextbox}
          className={classNames("__wab_instance", sty.feedbackTextbox, {
            [sty.feedbackTextboxfeedback_submit]: hasVariant(
              $state,
              "feedback",
              "submit"
            ),
            [sty.feedbackTextboxfeedback_submitting]: hasVariant(
              $state,
              "feedback",
              "submitting"
            ),
          })}
          disabled={
            hasVariant($state, "feedback", "submitting") ? true : undefined
          }
          extraPadding={true}
          placeholder={"Your feedback (optional)"}
          styleType={["gray"]}
        />
      ) : null}
      {(
        hasVariant($state, "feedback", "submitting")
          ? true
          : hasVariant($state, "feedback", "submit")
          ? true
          : false
      ) ? (
        <Button
          data-plasmic-name={"submitFeedbackBtn"}
          data-plasmic-override={overrides.submitFeedbackBtn}
          caption={"Caption"}
          className={classNames("__wab_instance", sty.submitFeedbackBtn, {
            [sty.submitFeedbackBtnfeedback_submit]: hasVariant(
              $state,
              "feedback",
              "submit"
            ),
            [sty.submitFeedbackBtnfeedback_submitting]: hasVariant(
              $state,
              "feedback",
              "submitting"
            ),
          })}
          disabled={
            hasVariant($state, "feedback", "submitting") ? true : undefined
          }
          isSubmit={
            hasVariant($state, "feedback", "submitting") ? true : undefined
          }
          size={"small"}
          type={["primary"]}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__saa5N,
              {
                [sty.textfeedback_submitting__saa5NYy9Lu]: hasVariant(
                  $state,
                  "feedback",
                  "submitting"
                ),
              }
            )}
          >
            {hasVariant($state, "feedback", "submitting")
              ? "Sending..."
              : "Send"}
          </div>
        </Button>
      ) : null}
      {(hasVariant($state, "feedback", "submitted") ? true : false) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"feedbackSubmittedContainer"}
          data-plasmic-override={overrides.feedbackSubmittedContainer}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.feedbackSubmittedContainer,
            {
              [sty.feedbackSubmittedContainerfeedback_submitted]: hasVariant(
                $state,
                "feedback",
                "submitted"
              ),
            }
          )}
        >
          <CheckCircleIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgfeedback_submitted]: hasVariant(
                $state,
                "feedback",
                "submitted"
              ),
            })}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mlsa,
              {
                [sty.textfeedback_submitted__mlsaVHsIf]: hasVariant(
                  $state,
                  "feedback",
                  "submitted"
                ),
              }
            )}
          >
            {"Your feedback has been received!\nThank you for your help."}
          </div>
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "code",
    "prompt",
    "copilotLikeDislike",
    "applyBtn",
    "feedbackTextbox",
    "submitFeedbackBtn",
    "feedbackSubmittedContainer",
    "svg",
  ],
  code: ["code"],
  prompt: ["prompt"],
  copilotLikeDislike: ["copilotLikeDislike"],
  applyBtn: ["applyBtn"],
  feedbackTextbox: ["feedbackTextbox"],
  submitFeedbackBtn: ["submitFeedbackBtn"],
  feedbackSubmittedContainer: ["feedbackSubmittedContainer", "svg"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  code: "div";
  prompt: "div";
  copilotLikeDislike: typeof CopilotLikeDislike;
  applyBtn: "div";
  feedbackTextbox: typeof Textbox;
  submitFeedbackBtn: typeof Button;
  feedbackSubmittedContainer: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopilotMsg__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopilotMsg__VariantsArgs;
    args?: PlasmicCopilotMsg__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopilotMsg__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopilotMsg__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCopilotMsg__ArgProps,
          internalVariantPropNames: PlasmicCopilotMsg__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCopilotMsg__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopilotMsg";
  } else {
    func.displayName = `PlasmicCopilotMsg.${nodeName}`;
  }
  return func;
}

export const PlasmicCopilotMsg = Object.assign(
  // Top-level PlasmicCopilotMsg renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    code: makeNodeComponent("code"),
    prompt: makeNodeComponent("prompt"),
    copilotLikeDislike: makeNodeComponent("copilotLikeDislike"),
    applyBtn: makeNodeComponent("applyBtn"),
    feedbackTextbox: makeNodeComponent("feedbackTextbox"),
    submitFeedbackBtn: makeNodeComponent("submitFeedbackBtn"),
    feedbackSubmittedContainer: makeNodeComponent("feedbackSubmittedContainer"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCopilotMsg
    internalVariantProps: PlasmicCopilotMsg__VariantProps,
    internalArgProps: PlasmicCopilotMsg__ArgProps,
  }
);

export default PlasmicCopilotMsg;
/* prettier-ignore-end */
