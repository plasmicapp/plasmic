/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: pnV7KLVDUyoz

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import TextAreaInput from "../../components/plexus/TextAreaInput"; // plasmic-import: 0wwbx9l7LS5I/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicCopilotPromptInput.module.css"; // plasmic-import: pnV7KLVDUyoz/css

import ImageUploadsIcon from "../plasmic_kit/PlasmicIcon__ImageUploads"; // plasmic-import: 0e-yZ0qeSHb12/icon
import SendSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__SendSvg"; // plasmic-import: h2npYh74m/icon

createPlasmicElementProxy;

export type PlasmicCopilotPromptInput__VariantMembers = {
  showImageUpload: "showImageUpload";
  isLoading: "isLoading";
};
export type PlasmicCopilotPromptInput__VariantsArgs = {
  showImageUpload?: SingleBooleanChoiceArg<"showImageUpload">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
};
type VariantPropType = keyof PlasmicCopilotPromptInput__VariantsArgs;
export const PlasmicCopilotPromptInput__VariantProps =
  new Array<VariantPropType>("showImageUpload", "isLoading");

export type PlasmicCopilotPromptInput__ArgsType = { placeholder?: string };
type ArgPropType = keyof PlasmicCopilotPromptInput__ArgsType;
export const PlasmicCopilotPromptInput__ArgProps = new Array<ArgPropType>(
  "placeholder"
);

export type PlasmicCopilotPromptInput__OverridesType = {
  root?: Flex__<"div">;
  inputArea?: Flex__<"div">;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  freeBox?: Flex__<"div">;
  imageUploadIcon?: Flex__<typeof IconButton>;
  runPromptBtn?: Flex__<typeof IconButton>;
  imageUploadContainer?: Flex__<"div">;
};

export interface DefaultCopilotPromptInputProps {
  placeholder?: string;
  showImageUpload?: SingleBooleanChoiceArg<"showImageUpload">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  className?: string;
}

const $$ = {};

function PlasmicCopilotPromptInput__RenderFunc(props: {
  variants: PlasmicCopilotPromptInput__VariantsArgs;
  args: PlasmicCopilotPromptInput__ArgsType;
  overrides: PlasmicCopilotPromptInput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: 'e.g. "Current month name"',
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: "showImageUpload",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showImageUpload,
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLoading,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootshowImageUpload]: hasVariant(
            $state,
            "showImageUpload",
            "showImageUpload"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"inputArea"}
        data-plasmic-override={overrides.inputArea}
        className={classNames(projectcss.all, sty.inputArea, {
          [sty.inputAreaisLoading]: hasVariant(
            $state,
            "isLoading",
            "isLoading"
          ),
          [sty.inputAreashowImageUpload]: hasVariant(
            $state,
            "showImageUpload",
            "showImageUpload"
          ),
        })}
      >
        <TextAreaInput
          data-plasmic-name={"textAreaInput"}
          data-plasmic-override={overrides.textAreaInput}
          autoFocus={true}
          className={classNames("__wab_instance", sty.textAreaInput, {
            [sty.textAreaInputisLoading]: hasVariant(
              $state,
              "isLoading",
              "isLoading"
            ),
            [sty.textAreaInputshowImageUpload]: hasVariant(
              $state,
              "showImageUpload",
              "showImageUpload"
            ),
          })}
          disabled={
            hasVariant($state, "isLoading", "isLoading") ? true : undefined
          }
          flat={[]}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["textAreaInput", "value"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          placeholder={args.placeholder}
          type={"minimal"}
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisLoading]: hasVariant(
              $state,
              "isLoading",
              "isLoading"
            ),
            [sty.freeBoxshowImageUpload]: hasVariant(
              $state,
              "showImageUpload",
              "showImageUpload"
            ),
          })}
        >
          <IconButton
            data-plasmic-name={"imageUploadIcon"}
            data-plasmic-override={overrides.imageUploadIcon}
            className={classNames("__wab_instance", sty.imageUploadIcon, {
              [sty.imageUploadIconisLoading]: hasVariant(
                $state,
                "isLoading",
                "isLoading"
              ),
              [sty.imageUploadIconshowImageUpload]: hasVariant(
                $state,
                "showImageUpload",
                "showImageUpload"
              ),
            })}
            disabled={
              hasVariant($state, "isLoading", "isLoading") ? true : undefined
            }
            size={"small"}
          >
            <ImageUploadsIcon
              className={classNames(projectcss.all, sty.svg__iSr6)}
              role={"img"}
            />
          </IconButton>
          <IconButton
            data-plasmic-name={"runPromptBtn"}
            data-plasmic-override={overrides.runPromptBtn}
            className={classNames("__wab_instance", sty.runPromptBtn, {
              [sty.runPromptBtnisLoading]: hasVariant(
                $state,
                "isLoading",
                "isLoading"
              ),
            })}
            disabled={
              hasVariant($state, "isLoading", "isLoading") ? true : undefined
            }
            size={"small"}
          >
            <SendSvgIcon
              className={classNames(projectcss.all, sty.svg__qv73J, {
                [sty.svgisLoading__qv73Jakj9T]: hasVariant(
                  $state,
                  "isLoading",
                  "isLoading"
                ),
              })}
              role={"img"}
            />
          </IconButton>
        </div>
      </div>
      <div
        data-plasmic-name={"imageUploadContainer"}
        data-plasmic-override={overrides.imageUploadContainer}
        className={classNames(projectcss.all, sty.imageUploadContainer, {
          [sty.imageUploadContainershowImageUpload]: hasVariant(
            $state,
            "showImageUpload",
            "showImageUpload"
          ),
        })}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "inputArea",
    "textAreaInput",
    "freeBox",
    "imageUploadIcon",
    "runPromptBtn",
    "imageUploadContainer",
  ],
  inputArea: [
    "inputArea",
    "textAreaInput",
    "freeBox",
    "imageUploadIcon",
    "runPromptBtn",
  ],
  textAreaInput: ["textAreaInput"],
  freeBox: ["freeBox", "imageUploadIcon", "runPromptBtn"],
  imageUploadIcon: ["imageUploadIcon"],
  runPromptBtn: ["runPromptBtn"],
  imageUploadContainer: ["imageUploadContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  inputArea: "div";
  textAreaInput: typeof TextAreaInput;
  freeBox: "div";
  imageUploadIcon: typeof IconButton;
  runPromptBtn: typeof IconButton;
  imageUploadContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopilotPromptInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopilotPromptInput__VariantsArgs;
    args?: PlasmicCopilotPromptInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopilotPromptInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopilotPromptInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCopilotPromptInput__ArgProps,
          internalVariantPropNames: PlasmicCopilotPromptInput__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCopilotPromptInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopilotPromptInput";
  } else {
    func.displayName = `PlasmicCopilotPromptInput.${nodeName}`;
  }
  return func;
}

export const PlasmicCopilotPromptInput = Object.assign(
  // Top-level PlasmicCopilotPromptInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    inputArea: makeNodeComponent("inputArea"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    freeBox: makeNodeComponent("freeBox"),
    imageUploadIcon: makeNodeComponent("imageUploadIcon"),
    runPromptBtn: makeNodeComponent("runPromptBtn"),
    imageUploadContainer: makeNodeComponent("imageUploadContainer"),

    // Metadata about props expected for PlasmicCopilotPromptInput
    internalVariantProps: PlasmicCopilotPromptInput__VariantProps,
    internalArgProps: PlasmicCopilotPromptInput__ArgProps,
  }
);

export default PlasmicCopilotPromptInput;
/* prettier-ignore-end */
