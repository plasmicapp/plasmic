/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: nD2Ql_rEk6

import * as React from "react";

import {
  Flex as Flex__,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicDataPickerGlobalSearchResultsItem.module.css"; // plasmic-import: nD2Ql_rEk6/css

createPlasmicElementProxy;

export type PlasmicDataPickerGlobalSearchResultsItem__VariantMembers = {
  variableType:
    | "string"
    | "number"
    | "boolean"
    | "object"
    | "array"
    | "undefined"
    | "func";
};
export type PlasmicDataPickerGlobalSearchResultsItem__VariantsArgs = {
  variableType?: SingleChoiceArg<
    "string" | "number" | "boolean" | "object" | "array" | "undefined" | "func"
  >;
};
type VariantPropType =
  keyof PlasmicDataPickerGlobalSearchResultsItem__VariantsArgs;
export const PlasmicDataPickerGlobalSearchResultsItem__VariantProps =
  new Array<VariantPropType>("variableType");

export type PlasmicDataPickerGlobalSearchResultsItem__ArgsType = {
  itemName?: React.ReactNode;
  itemPath?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDataPickerGlobalSearchResultsItem__ArgsType;
export const PlasmicDataPickerGlobalSearchResultsItem__ArgProps =
  new Array<ArgPropType>("itemName", "itemPath");

export type PlasmicDataPickerGlobalSearchResultsItem__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  previewValue?: Flex__<"div">;
};

export interface DefaultDataPickerGlobalSearchResultsItemProps {
  itemName?: React.ReactNode;
  itemPath?: React.ReactNode;
  variableType?: SingleChoiceArg<
    "string" | "number" | "boolean" | "object" | "array" | "undefined" | "func"
  >;
  className?: string;
}

const $$ = {};

function PlasmicDataPickerGlobalSearchResultsItem__RenderFunc(props: {
  variants: PlasmicDataPickerGlobalSearchResultsItem__VariantsArgs;
  args: PlasmicDataPickerGlobalSearchResultsItem__ArgsType;
  overrides: PlasmicDataPickerGlobalSearchResultsItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variableType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variableType,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootvariableType_array]: hasVariant(
            $state,
            "variableType",
            "array"
          ),
          [sty.rootvariableType_func]: hasVariant(
            $state,
            "variableType",
            "func"
          ),
          [sty.rootvariableType_object]: hasVariant(
            $state,
            "variableType",
            "object"
          ),
          [sty.rootvariableType_undefined]: hasVariant(
            $state,
            "variableType",
            "undefined"
          ),
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxvariableType_array]: hasVariant(
            $state,
            "variableType",
            "array"
          ),
          [sty.freeBoxvariableType_object]: hasVariant(
            $state,
            "variableType",
            "object"
          ),
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Path / To / Item /",
          value: args.itemPath,
          className: classNames(sty.slotTargetItemPath, {
            [sty.slotTargetItemPathvariableType_string]: hasVariant(
              $state,
              "variableType",
              "string"
            ),
          }),
        })}
        {renderPlasmicSlot({
          defaultContents: "Name",
          value: args.itemName,
          className: classNames(sty.slotTargetItemName),
        })}
      </Stack__>
      <div
        data-plasmic-name={"previewValue"}
        data-plasmic-override={overrides.previewValue}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.previewValue,
          {
            [sty.previewValuevariableType_array]: hasVariant(
              $state,
              "variableType",
              "array"
            ),
            [sty.previewValuevariableType_boolean]: hasVariant(
              $state,
              "variableType",
              "boolean"
            ),
            [sty.previewValuevariableType_func]: hasVariant(
              $state,
              "variableType",
              "func"
            ),
            [sty.previewValuevariableType_number]: hasVariant(
              $state,
              "variableType",
              "number"
            ),
            [sty.previewValuevariableType_object]: hasVariant(
              $state,
              "variableType",
              "object"
            ),
            [sty.previewValuevariableType_string]: hasVariant(
              $state,
              "variableType",
              "string"
            ),
            [sty.previewValuevariableType_undefined]: hasVariant(
              $state,
              "variableType",
              "undefined"
            ),
          }
        )}
      >
        {hasVariant($state, "variableType", "func")
          ? "function"
          : hasVariant($state, "variableType", "undefined")
          ? "undefined"
          : hasVariant($state, "variableType", "array")
          ? "3 items"
          : hasVariant($state, "variableType", "object")
          ? "3 items"
          : hasVariant($state, "variableType", "boolean")
          ? "false"
          : hasVariant($state, "variableType", "number")
          ? "123"
          : '"preview value"'}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "previewValue"],
  freeBox: ["freeBox"],
  previewValue: ["previewValue"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  previewValue: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataPickerGlobalSearchResultsItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataPickerGlobalSearchResultsItem__VariantsArgs;
    args?: PlasmicDataPickerGlobalSearchResultsItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<
    // Specify variants directly as props
    PlasmicDataPickerGlobalSearchResultsItem__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicDataPickerGlobalSearchResultsItem__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicDataPickerGlobalSearchResultsItem__ArgProps,
          internalVariantPropNames:
            PlasmicDataPickerGlobalSearchResultsItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDataPickerGlobalSearchResultsItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataPickerGlobalSearchResultsItem";
  } else {
    func.displayName = `PlasmicDataPickerGlobalSearchResultsItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDataPickerGlobalSearchResultsItem = Object.assign(
  // Top-level PlasmicDataPickerGlobalSearchResultsItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    previewValue: makeNodeComponent("previewValue"),

    // Metadata about props expected for PlasmicDataPickerGlobalSearchResultsItem
    internalVariantProps:
      PlasmicDataPickerGlobalSearchResultsItem__VariantProps,
    internalArgProps: PlasmicDataPickerGlobalSearchResultsItem__ArgProps,
  }
);

export default PlasmicDataPickerGlobalSearchResultsItem;
/* prettier-ignore-end */
