/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: fa3uzsyXr0

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import DataPickerValueTypeIcon from "../../components/sidebar-tabs/DataBinding/DataPickerValueTypeIcon"; // plasmic-import: gWylXtol8Lf/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicDataPickerColumnItem.module.css"; // plasmic-import: fa3uzsyXr0/css

import PlaySvgIcon from "../plasmic_kit/PlasmicIcon__PlaySvg"; // plasmic-import: j39GoLwZnf7-v/icon
import ResetIcon from "../plasmic_kit/PlasmicIcon__Reset"; // plasmic-import: Dj3u-HuPv94sN/icon
import ChevronRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronRightSvg"; // plasmic-import: HBGx-zeiX/icon

createPlasmicElementProxy;

export type PlasmicDataPickerColumnItem__VariantMembers = {
  step: "notPlayed" | "played";
  variableType:
    | "string"
    | "number"
    | "boolean"
    | "object"
    | "array"
    | "undefined"
    | "func";
  isSelected: "isSelected";
};
export type PlasmicDataPickerColumnItem__VariantsArgs = {
  step?: SingleChoiceArg<"notPlayed" | "played">;
  variableType?: SingleChoiceArg<
    "string" | "number" | "boolean" | "object" | "array" | "undefined" | "func"
  >;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};
type VariantPropType = keyof PlasmicDataPickerColumnItem__VariantsArgs;
export const PlasmicDataPickerColumnItem__VariantProps =
  new Array<VariantPropType>("step", "variableType", "isSelected");

export type PlasmicDataPickerColumnItem__ArgsType = {};
type ArgPropType = keyof PlasmicDataPickerColumnItem__ArgsType;
export const PlasmicDataPickerColumnItem__ArgProps = new Array<ArgPropType>();

export type PlasmicDataPickerColumnItem__OverridesType = {
  root?: Flex__<"div">;
  dataPickerValueTypeIcon?: Flex__<typeof DataPickerValueTypeIcon>;
  text?: Flex__<"div">;
  itemName?: Flex__<"div">;
  previewValue?: Flex__<"div">;
  svg?: Flex__<"svg">;
  play?: Flex__<"svg">;
};

export interface DefaultDataPickerColumnItemProps {
  step?: SingleChoiceArg<"notPlayed" | "played">;
  variableType?: SingleChoiceArg<
    "string" | "number" | "boolean" | "object" | "array" | "undefined" | "func"
  >;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

const $$ = {};

function PlasmicDataPickerColumnItem__RenderFunc(props: {
  variants: PlasmicDataPickerColumnItem__VariantsArgs;
  args: PlasmicDataPickerColumnItem__ArgsType;
  overrides: PlasmicDataPickerColumnItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variableType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variableType,
      },
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected,
      },
      {
        path: "step",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.step,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.rootisSelected_variableType_array]:
            hasVariant($state, "isSelected", "isSelected") &&
            hasVariant($state, "variableType", "array"),
          [sty.rootisSelected_variableType_func]:
            hasVariant($state, "variableType", "func") &&
            hasVariant($state, "isSelected", "isSelected"),
          [sty.rootisSelected_variableType_object]:
            hasVariant($state, "isSelected", "isSelected") &&
            hasVariant($state, "variableType", "object"),
          [sty.rootisSelected_variableType_undefined]:
            hasVariant($state, "variableType", "undefined") &&
            hasVariant($state, "isSelected", "isSelected"),
          [sty.rootstep_notPlayed]: hasVariant($state, "step", "notPlayed"),
          [sty.rootstep_played]: hasVariant($state, "step", "played"),
          [sty.rootvariableType_array]: hasVariant(
            $state,
            "variableType",
            "array"
          ),
          [sty.rootvariableType_boolean]: hasVariant(
            $state,
            "variableType",
            "boolean"
          ),
          [sty.rootvariableType_func]: hasVariant(
            $state,
            "variableType",
            "func"
          ),
          [sty.rootvariableType_number]: hasVariant(
            $state,
            "variableType",
            "number"
          ),
          [sty.rootvariableType_object]: hasVariant(
            $state,
            "variableType",
            "object"
          ),
          [sty.rootvariableType_string]: hasVariant(
            $state,
            "variableType",
            "string"
          ),
          [sty.rootvariableType_undefined]: hasVariant(
            $state,
            "variableType",
            "undefined"
          ),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qdAAo, {
          [sty.freeBoxvariableType_array__qdAAorW4TV]: hasVariant(
            $state,
            "variableType",
            "array"
          ),
          [sty.freeBoxvariableType_boolean__qdAAo0LWs]: hasVariant(
            $state,
            "variableType",
            "boolean"
          ),
          [sty.freeBoxvariableType_object__qdAAowXdSt]: hasVariant(
            $state,
            "variableType",
            "object"
          ),
          [sty.freeBoxvariableType_string__qdAAowYgzm]: hasVariant(
            $state,
            "variableType",
            "string"
          ),
        })}
      >
        <DataPickerValueTypeIcon
          data-plasmic-name={"dataPickerValueTypeIcon"}
          data-plasmic-override={overrides.dataPickerValueTypeIcon}
          className={classNames("__wab_instance", sty.dataPickerValueTypeIcon, {
            [sty.dataPickerValueTypeIconisSelected]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            ),
            [sty.dataPickerValueTypeIconstep_notPlayed]: hasVariant(
              $state,
              "step",
              "notPlayed"
            ),
            [sty.dataPickerValueTypeIconvariableType_array]: hasVariant(
              $state,
              "variableType",
              "array"
            ),
            [sty.dataPickerValueTypeIconvariableType_boolean]: hasVariant(
              $state,
              "variableType",
              "boolean"
            ),
            [sty.dataPickerValueTypeIconvariableType_func]: hasVariant(
              $state,
              "variableType",
              "func"
            ),
            [sty.dataPickerValueTypeIconvariableType_number]: hasVariant(
              $state,
              "variableType",
              "number"
            ),
            [sty.dataPickerValueTypeIconvariableType_object]: hasVariant(
              $state,
              "variableType",
              "object"
            ),
            [sty.dataPickerValueTypeIconvariableType_string]: hasVariant(
              $state,
              "variableType",
              "string"
            ),
            [sty.dataPickerValueTypeIconvariableType_undefined]: hasVariant(
              $state,
              "variableType",
              "undefined"
            ),
          })}
          isHovered={
            hasVariant($state, "isSelected", "isSelected") &&
            triggers.hover_root
              ? undefined
              : triggers.hover_root
              ? true
              : undefined
          }
          isSelected={
            hasVariant($state, "isSelected", "isSelected") ? true : undefined
          }
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textstep_notPlayed]: hasVariant(
                  $state,
                  "step",
                  "notPlayed"
                ),
                [sty.textvariableType_array]: hasVariant(
                  $state,
                  "variableType",
                  "array"
                ),
                [sty.textvariableType_boolean]: hasVariant(
                  $state,
                  "variableType",
                  "boolean"
                ),
                [sty.textvariableType_func]: hasVariant(
                  $state,
                  "variableType",
                  "func"
                ),
                [sty.textvariableType_number]: hasVariant(
                  $state,
                  "variableType",
                  "number"
                ),
                [sty.textvariableType_object]: hasVariant(
                  $state,
                  "variableType",
                  "object"
                ),
                [sty.textvariableType_undefined]: hasVariant(
                  $state,
                  "variableType",
                  "undefined"
                ),
              }
            )}
          >
            {hasVariant($state, "variableType", "func")
              ? "F"
              : hasVariant($state, "variableType", "undefined")
              ? "U"
              : hasVariant($state, "variableType", "array")
              ? "A"
              : hasVariant($state, "variableType", "object")
              ? "O"
              : hasVariant($state, "variableType", "boolean")
              ? "B"
              : hasVariant($state, "variableType", "number")
              ? "N"
              : hasVariant($state, "step", "notPlayed")
              ? "U"
              : "S"}
          </div>
        </DataPickerValueTypeIcon>
        <div
          className={classNames(projectcss.all, sty.freeBox___2XUqB, {
            [sty.freeBoxvariableType_array___2XUqBrW4TV]: hasVariant(
              $state,
              "variableType",
              "array"
            ),
            [sty.freeBoxvariableType_object___2XUqBwXdSt]: hasVariant(
              $state,
              "variableType",
              "object"
            ),
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__pWz6X, {
              [sty.freeBoxstep_notPlayed__pWz6Xc2TI9]: hasVariant(
                $state,
                "step",
                "notPlayed"
              ),
              [sty.freeBoxstep_played__pWz6XvLpb6]: hasVariant(
                $state,
                "step",
                "played"
              ),
              [sty.freeBoxvariableType_array__pWz6XrW4TV]: hasVariant(
                $state,
                "variableType",
                "array"
              ),
            })}
          >
            <div
              data-plasmic-name={"itemName"}
              data-plasmic-override={overrides.itemName}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.itemName,
                {
                  [sty.itemNameisSelected_variableType_func]:
                    hasVariant($state, "variableType", "func") &&
                    hasVariant($state, "isSelected", "isSelected"),
                  [sty.itemNameisSelected_variableType_undefined]:
                    hasVariant($state, "variableType", "undefined") &&
                    hasVariant($state, "isSelected", "isSelected"),
                  [sty.itemNamevariableType_boolean]: hasVariant(
                    $state,
                    "variableType",
                    "boolean"
                  ),
                  [sty.itemNamevariableType_number]: hasVariant(
                    $state,
                    "variableType",
                    "number"
                  ),
                  [sty.itemNamevariableType_string]: hasVariant(
                    $state,
                    "variableType",
                    "string"
                  ),
                }
              )}
            >
              {"Name"}
            </div>
          </div>
          <div
            data-plasmic-name={"previewValue"}
            data-plasmic-override={overrides.previewValue}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.previewValue,
              {
                [sty.previewValueisSelected_variableType_array]:
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "variableType", "array"),
                [sty.previewValueisSelected_variableType_func]:
                  hasVariant($state, "variableType", "func") &&
                  hasVariant($state, "isSelected", "isSelected"),
                [sty.previewValueisSelected_variableType_object]:
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "variableType", "object"),
                [sty.previewValueisSelected_variableType_undefined]:
                  hasVariant($state, "variableType", "undefined") &&
                  hasVariant($state, "isSelected", "isSelected"),
                [sty.previewValuestep_notPlayed]: hasVariant(
                  $state,
                  "step",
                  "notPlayed"
                ),
                [sty.previewValuevariableType_array]: hasVariant(
                  $state,
                  "variableType",
                  "array"
                ),
                [sty.previewValuevariableType_boolean]: hasVariant(
                  $state,
                  "variableType",
                  "boolean"
                ),
                [sty.previewValuevariableType_func]: hasVariant(
                  $state,
                  "variableType",
                  "func"
                ),
                [sty.previewValuevariableType_number]: hasVariant(
                  $state,
                  "variableType",
                  "number"
                ),
                [sty.previewValuevariableType_object]: hasVariant(
                  $state,
                  "variableType",
                  "object"
                ),
                [sty.previewValuevariableType_string]: hasVariant(
                  $state,
                  "variableType",
                  "string"
                ),
                [sty.previewValuevariableType_undefined]: hasVariant(
                  $state,
                  "variableType",
                  "undefined"
                ),
              }
            )}
          >
            {hasVariant($state, "variableType", "func")
              ? "function"
              : hasVariant($state, "variableType", "undefined")
              ? "undefined"
              : hasVariant($state, "variableType", "array")
              ? "3 items"
              : hasVariant($state, "variableType", "object")
              ? "object"
              : hasVariant($state, "variableType", "boolean")
              ? "true"
              : hasVariant($state, "variableType", "number")
              ? "123"
              : hasVariant($state, "step", "notPlayed")
              ? "Not executed"
              : '"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."'}
          </div>
        </div>
      </Stack__>
      {(
        hasVariant($state, "variableType", "array")
          ? true
          : hasVariant($state, "variableType", "object")
          ? true
          : false
      ) ? (
        <ChevronRightSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisSelected]: hasVariant($state, "isSelected", "isSelected"),
            [sty.svgvariableType_array]: hasVariant(
              $state,
              "variableType",
              "array"
            ),
            [sty.svgvariableType_object]: hasVariant(
              $state,
              "variableType",
              "object"
            ),
          })}
          role={"img"}
        />
      ) : null}
      <PlasmicIcon__
        data-plasmic-name={"play"}
        data-plasmic-override={overrides.play}
        PlasmicIconType={
          hasVariant($state, "step", "played") ? ResetIcon : PlaySvgIcon
        }
        className={classNames(projectcss.all, sty.play, {
          [sty.playstep_notPlayed]: hasVariant($state, "step", "notPlayed"),
          [sty.playstep_played]: hasVariant($state, "step", "played"),
        })}
        role={"img"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dataPickerValueTypeIcon",
    "text",
    "itemName",
    "previewValue",
    "svg",
    "play",
  ],
  dataPickerValueTypeIcon: ["dataPickerValueTypeIcon", "text"],
  text: ["text"],
  itemName: ["itemName"],
  previewValue: ["previewValue"],
  svg: ["svg"],
  play: ["play"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataPickerValueTypeIcon: typeof DataPickerValueTypeIcon;
  text: "div";
  itemName: "div";
  previewValue: "div";
  svg: "svg";
  play: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataPickerColumnItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataPickerColumnItem__VariantsArgs;
    args?: PlasmicDataPickerColumnItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataPickerColumnItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDataPickerColumnItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataPickerColumnItem__ArgProps,
          internalVariantPropNames: PlasmicDataPickerColumnItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDataPickerColumnItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataPickerColumnItem";
  } else {
    func.displayName = `PlasmicDataPickerColumnItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDataPickerColumnItem = Object.assign(
  // Top-level PlasmicDataPickerColumnItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataPickerValueTypeIcon: makeNodeComponent("dataPickerValueTypeIcon"),
    text: makeNodeComponent("text"),
    itemName: makeNodeComponent("itemName"),
    previewValue: makeNodeComponent("previewValue"),
    svg: makeNodeComponent("svg"),
    play: makeNodeComponent("play"),

    // Metadata about props expected for PlasmicDataPickerColumnItem
    internalVariantProps: PlasmicDataPickerColumnItem__VariantProps,
    internalArgProps: PlasmicDataPickerColumnItem__ArgProps,
  }
);

export default PlasmicDataPickerColumnItem;
/* prettier-ignore-end */
