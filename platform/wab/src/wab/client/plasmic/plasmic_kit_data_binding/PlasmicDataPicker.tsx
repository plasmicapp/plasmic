/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: cbEBf9RLgx

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import DataPickerCodeEditorLayout from "../../components/sidebar-tabs/DataBinding/DataPickerCodeEditorLayout"; // plasmic-import: yN9xaawDlts/component
import DataPickerColumn from "../../components/sidebar-tabs/DataBinding/DataPickerColumn"; // plasmic-import: xmF37LmWYE/component
import DataPickerColumnItem from "../../components/sidebar-tabs/DataBinding/DataPickerColumnItem"; // plasmic-import: fa3uzsyXr0/component
import DataPickerGlobalSearchResults from "../../components/sidebar-tabs/DataBinding/DataPickerGlobalSearchResults"; // plasmic-import: GDvL7J9P5V4/component
import DataPickerGlobalSearchResultsItem from "../../components/sidebar-tabs/DataBinding/DataPickerGlobalSearchResultsItem"; // plasmic-import: nD2Ql_rEk6/component
import DataPickerSelectedItem from "../../components/sidebar-tabs/DataBinding/DataPickerSelectedItem"; // plasmic-import: PZbWryjVVD/component
import Button from "../../components/widgets/Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Searchbox from "../../components/widgets/Searchbox"; // plasmic-import: po7gr0PX4_gWo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicDataPicker.module.css"; // plasmic-import: cbEBf9RLgx/css

import PlaySvgIcon from "../plasmic_kit/PlasmicIcon__PlaySvg"; // plasmic-import: j39GoLwZnf7-v/icon
import ArrowRightSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicDataPicker__VariantMembers = {
  withSearchResult: "withSearchResult";
  codeEditing: "codeEditing";
  empty: "empty";
  withUnlink: "withUnlink";
  hasExpectedValues: "hasExpectedValues";
  withAddQuery: "withAddQuery";
  withAddVariable: "withAddVariable";
  withDeleteButton: "withDeleteButton";
  withoutStateSwitch: "withoutStateSwitch";
  copilot: "copilot";
  advancedToggle: "show" | "hide";
  isRunCodeInteraction: "isRunCodeInteraction";
};
export type PlasmicDataPicker__VariantsArgs = {
  withSearchResult?: SingleBooleanChoiceArg<"withSearchResult">;
  codeEditing?: SingleBooleanChoiceArg<"codeEditing">;
  empty?: SingleBooleanChoiceArg<"empty">;
  withUnlink?: SingleBooleanChoiceArg<"withUnlink">;
  hasExpectedValues?: SingleBooleanChoiceArg<"hasExpectedValues">;
  withAddQuery?: SingleBooleanChoiceArg<"withAddQuery">;
  withAddVariable?: SingleBooleanChoiceArg<"withAddVariable">;
  withDeleteButton?: SingleBooleanChoiceArg<"withDeleteButton">;
  withoutStateSwitch?: SingleBooleanChoiceArg<"withoutStateSwitch">;
  copilot?: SingleBooleanChoiceArg<"copilot">;
  advancedToggle?: SingleChoiceArg<"show" | "hide">;
  isRunCodeInteraction?: SingleBooleanChoiceArg<"isRunCodeInteraction">;
};
type VariantPropType = keyof PlasmicDataPicker__VariantsArgs;
export const PlasmicDataPicker__VariantProps = new Array<VariantPropType>(
  "withSearchResult",
  "codeEditing",
  "empty",
  "withUnlink",
  "hasExpectedValues",
  "withAddQuery",
  "withAddVariable",
  "withDeleteButton",
  "withoutStateSwitch",
  "copilot",
  "advancedToggle",
  "isRunCodeInteraction"
);

export type PlasmicDataPicker__ArgsType = {
  children?: React.ReactNode;
  selectedItem?: React.ReactNode;
  expectedValues?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDataPicker__ArgsType;
export const PlasmicDataPicker__ArgProps = new Array<ArgPropType>(
  "children",
  "selectedItem",
  "expectedValues"
);

export type PlasmicDataPicker__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  title?: Flex__<"div">;
  stateSwitch?: Flex__<"a">;
  advancedSwitch?: Flex__<"a">;
  unlinkButton?: Flex__<"a">;
  addQueryBtn?: Flex__<"a">;
  addVariableBtn?: Flex__<"a">;
  link?: Flex__<"a">;
  searchbox?: Flex__<typeof Searchbox>;
  items?: Flex__<"div">;
  searchResults?: Flex__<typeof DataPickerGlobalSearchResults>;
  dataPickerColumnItem?: Flex__<typeof DataPickerColumnItem>;
  codeEditor?: Flex__<typeof DataPickerCodeEditorLayout>;
  footer?: Flex__<"div">;
  deleteButton?: Flex__<typeof Button>;
  runButton?: Flex__<typeof Button>;
  cancelButton?: Flex__<typeof Button>;
  saveButton?: Flex__<typeof Button>;
};

export interface DefaultDataPickerProps {
  children?: React.ReactNode;
  selectedItem?: React.ReactNode;
  expectedValues?: React.ReactNode;
  withSearchResult?: SingleBooleanChoiceArg<"withSearchResult">;
  codeEditing?: SingleBooleanChoiceArg<"codeEditing">;
  empty?: SingleBooleanChoiceArg<"empty">;
  withUnlink?: SingleBooleanChoiceArg<"withUnlink">;
  hasExpectedValues?: SingleBooleanChoiceArg<"hasExpectedValues">;
  withAddQuery?: SingleBooleanChoiceArg<"withAddQuery">;
  withAddVariable?: SingleBooleanChoiceArg<"withAddVariable">;
  withDeleteButton?: SingleBooleanChoiceArg<"withDeleteButton">;
  withoutStateSwitch?: SingleBooleanChoiceArg<"withoutStateSwitch">;
  copilot?: SingleBooleanChoiceArg<"copilot">;
  advancedToggle?: SingleChoiceArg<"show" | "hide">;
  isRunCodeInteraction?: SingleBooleanChoiceArg<"isRunCodeInteraction">;
  className?: string;
}

const $$ = {};

function PlasmicDataPicker__RenderFunc(props: {
  variants: PlasmicDataPicker__VariantsArgs;
  args: PlasmicDataPicker__ArgsType;
  overrides: PlasmicDataPicker__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "withSearchResult",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withSearchResult,
      },
      {
        path: "codeEditing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.codeEditing,
      },
      {
        path: "empty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.empty,
      },
      {
        path: "withUnlink",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withUnlink,
      },
      {
        path: "hasExpectedValues",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.hasExpectedValues,
      },
      {
        path: "withAddQuery",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withAddQuery,
      },
      {
        path: "withAddVariable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withAddVariable,
      },
      {
        path: "withDeleteButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withDeleteButton,
      },
      {
        path: "withoutStateSwitch",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.withoutStateSwitch,
      },
      {
        path: "copilot",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.copilot,
      },
      {
        path: "advancedToggle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.advancedToggle,
      },
      {
        path: "isRunCodeInteraction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.isRunCodeInteraction,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcodeEditing]: hasVariant(
            $state,
            "codeEditing",
            "codeEditing"
          ),
          [sty.rootwithSearchResult]: hasVariant(
            $state,
            "withSearchResult",
            "withSearchResult"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(projectcss.all, sty.header, "", {
          [sty.headeradvancedToggle_hide]: hasVariant(
            $state,
            "advancedToggle",
            "hide"
          ),
          [sty.headeradvancedToggle_show]: hasVariant(
            $state,
            "advancedToggle",
            "show"
          ),
          [sty.headercodeEditing]: hasVariant(
            $state,
            "codeEditing",
            "codeEditing"
          ),
          [sty.headerwithAddQuery]: hasVariant(
            $state,
            "withAddQuery",
            "withAddQuery"
          ),
          [sty.headerwithAddVariable]: hasVariant(
            $state,
            "withAddVariable",
            "withAddVariable"
          ),
          [sty.headerwithAddVariable_withoutStateSwitch]:
            hasVariant($state, "withAddVariable", "withAddVariable") &&
            hasVariant($state, "withoutStateSwitch", "withoutStateSwitch"),
          [sty.headerwithSearchResult]: hasVariant(
            $state,
            "withSearchResult",
            "withSearchResult"
          ),
          [sty.headerwithoutStateSwitch]: hasVariant(
            $state,
            "withoutStateSwitch",
            "withoutStateSwitch"
          ),
        })}
      >
        <div
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.title,
            {
              [sty.titlecodeEditing]: hasVariant(
                $state,
                "codeEditing",
                "codeEditing"
              ),
              [sty.titleempty]: hasVariant($state, "empty", "empty"),
            }
          )}
        >
          {hasVariant($state, "codeEditing", "codeEditing")
            ? "Edit code"
            : "Select data"}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kLjUi, {
            [sty.freeBoxadvancedToggle_show__kLjUiKTPb]: hasVariant(
              $state,
              "advancedToggle",
              "show"
            ),
            [sty.freeBoxwithAddQuery__kLjUi80OAu]: hasVariant(
              $state,
              "withAddQuery",
              "withAddQuery"
            ),
            [sty.freeBoxwithUnlink__kLjUiY7Vep]: hasVariant(
              $state,
              "withUnlink",
              "withUnlink"
            ),
          })}
        >
          {(
            hasVariant($state, "withoutStateSwitch", "withoutStateSwitch")
              ? false
              : true
          ) ? (
            <PlasmicLink__
              data-plasmic-name={"stateSwitch"}
              data-plasmic-override={overrides.stateSwitch}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.stateSwitch,
                {
                  [sty.stateSwitchadvancedToggle_hide]: hasVariant(
                    $state,
                    "advancedToggle",
                    "hide"
                  ),
                  [sty.stateSwitchadvancedToggle_show]: hasVariant(
                    $state,
                    "advancedToggle",
                    "show"
                  ),
                  [sty.stateSwitchcodeEditing]: hasVariant(
                    $state,
                    "codeEditing",
                    "codeEditing"
                  ),
                  [sty.stateSwitchwithAddVariable]: hasVariant(
                    $state,
                    "withAddVariable",
                    "withAddVariable"
                  ),
                  [sty.stateSwitchwithDeleteButton]: hasVariant(
                    $state,
                    "withDeleteButton",
                    "withDeleteButton"
                  ),
                  [sty.stateSwitchwithSearchResult]: hasVariant(
                    $state,
                    "withSearchResult",
                    "withSearchResult"
                  ),
                  [sty.stateSwitchwithoutStateSwitch]: hasVariant(
                    $state,
                    "withoutStateSwitch",
                    "withoutStateSwitch"
                  ),
                }
              )}
              platform={"react"}
            >
              {hasVariant($state, "codeEditing", "codeEditing")
                ? "Switch to Data Picker"
                : "Switch to Code"}
            </PlasmicLink__>
          ) : null}
          {(
            hasVariant($state, "withoutStateSwitch", "withoutStateSwitch")
              ? false
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zOui,
                {
                  [sty.textadvancedToggle_show__zOuikTPb]: hasVariant(
                    $state,
                    "advancedToggle",
                    "show"
                  ),
                  [sty.textwithAddVariable__zOui9Qwg6]: hasVariant(
                    $state,
                    "withAddVariable",
                    "withAddVariable"
                  ),
                  [sty.textwithoutStateSwitch__zOuivKtsi]: hasVariant(
                    $state,
                    "withoutStateSwitch",
                    "withoutStateSwitch"
                  ),
                }
              )}
            >
              {"|"}
            </div>
          ) : null}
          {(
            hasVariant($state, "advancedToggle", "hide")
              ? true
              : hasVariant($state, "advancedToggle", "show")
              ? true
              : hasVariant($state, "withoutStateSwitch", "withoutStateSwitch")
              ? false
              : false
          ) ? (
            <PlasmicLink__
              data-plasmic-name={"advancedSwitch"}
              data-plasmic-override={overrides.advancedSwitch}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.advancedSwitch,
                {
                  [sty.advancedSwitchadvancedToggle_hide]: hasVariant(
                    $state,
                    "advancedToggle",
                    "hide"
                  ),
                  [sty.advancedSwitchadvancedToggle_show]: hasVariant(
                    $state,
                    "advancedToggle",
                    "show"
                  ),
                  [sty.advancedSwitchcodeEditing]: hasVariant(
                    $state,
                    "codeEditing",
                    "codeEditing"
                  ),
                  [sty.advancedSwitchwithAddVariable]: hasVariant(
                    $state,
                    "withAddVariable",
                    "withAddVariable"
                  ),
                  [sty.advancedSwitchwithDeleteButton]: hasVariant(
                    $state,
                    "withDeleteButton",
                    "withDeleteButton"
                  ),
                  [sty.advancedSwitchwithSearchResult]: hasVariant(
                    $state,
                    "withSearchResult",
                    "withSearchResult"
                  ),
                  [sty.advancedSwitchwithoutStateSwitch]: hasVariant(
                    $state,
                    "withoutStateSwitch",
                    "withoutStateSwitch"
                  ),
                }
              )}
              platform={"react"}
            >
              {hasVariant($state, "advancedToggle", "hide")
                ? "Hide advanced fields"
                : "Show advanced fields"}
            </PlasmicLink__>
          ) : null}
          {(
            hasVariant($state, "advancedToggle", "hide")
              ? true
              : hasVariant($state, "advancedToggle", "show")
              ? true
              : hasVariant($state, "withoutStateSwitch", "withoutStateSwitch")
              ? false
              : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nHa90,
                {
                  [sty.textadvancedToggle_hide__nHa90SMtJ]: hasVariant(
                    $state,
                    "advancedToggle",
                    "hide"
                  ),
                  [sty.textadvancedToggle_show__nHa90KTPb]: hasVariant(
                    $state,
                    "advancedToggle",
                    "show"
                  ),
                  [sty.textwithAddVariable__nHa909Qwg6]: hasVariant(
                    $state,
                    "withAddVariable",
                    "withAddVariable"
                  ),
                  [sty.textwithoutStateSwitch__nHa90VKtsi]: hasVariant(
                    $state,
                    "withoutStateSwitch",
                    "withoutStateSwitch"
                  ),
                }
              )}
            >
              {"|"}
            </div>
          ) : null}
          {(hasVariant($state, "withUnlink", "withUnlink") ? true : false) ? (
            <PlasmicLink__
              data-plasmic-name={"unlinkButton"}
              data-plasmic-override={overrides.unlinkButton}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.unlinkButton,
                {
                  [sty.unlinkButtoncodeEditing]: hasVariant(
                    $state,
                    "codeEditing",
                    "codeEditing"
                  ),
                  [sty.unlinkButtonwithAddQuery]: hasVariant(
                    $state,
                    "withAddQuery",
                    "withAddQuery"
                  ),
                  [sty.unlinkButtonwithUnlink]: hasVariant(
                    $state,
                    "withUnlink",
                    "withUnlink"
                  ),
                }
              )}
              platform={"react"}
            >
              {"Remove dynamic value"}
            </PlasmicLink__>
          ) : null}
          {(hasVariant($state, "withUnlink", "withUnlink") ? true : false) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c4Mtk,
                {
                  [sty.textwithAddQuery__c4Mtk80OAu]: hasVariant(
                    $state,
                    "withAddQuery",
                    "withAddQuery"
                  ),
                  [sty.textwithAddVariable__c4Mtk9Qwg6]: hasVariant(
                    $state,
                    "withAddVariable",
                    "withAddVariable"
                  ),
                  [sty.textwithUnlink__c4MtkY7Vep]: hasVariant(
                    $state,
                    "withUnlink",
                    "withUnlink"
                  ),
                }
              )}
            >
              {"|"}
            </div>
          ) : null}
          <PlasmicLink__
            data-plasmic-name={"addQueryBtn"}
            data-plasmic-override={overrides.addQueryBtn}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.addQueryBtn,
              {
                [sty.addQueryBtncodeEditing]: hasVariant(
                  $state,
                  "codeEditing",
                  "codeEditing"
                ),
                [sty.addQueryBtnwithAddQuery]: hasVariant(
                  $state,
                  "withAddQuery",
                  "withAddQuery"
                ),
                [sty.addQueryBtnwithAddVariable]: hasVariant(
                  $state,
                  "withAddVariable",
                  "withAddVariable"
                ),
                [sty.addQueryBtnwithUnlink]: hasVariant(
                  $state,
                  "withUnlink",
                  "withUnlink"
                ),
              }
            )}
            platform={"react"}
          >
            {"Add new Data Fetch"}
          </PlasmicLink__>
          {(
            hasVariant($state, "withAddQuery", "withAddQuery") ? true : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dua35,
                {
                  [sty.textwithAddQuery__dua3580OAu]: hasVariant(
                    $state,
                    "withAddQuery",
                    "withAddQuery"
                  ),
                  [sty.textwithAddVariable__dua359Qwg6]: hasVariant(
                    $state,
                    "withAddVariable",
                    "withAddVariable"
                  ),
                  [sty.textwithUnlink__dua35Y7Vep]: hasVariant(
                    $state,
                    "withUnlink",
                    "withUnlink"
                  ),
                }
              )}
            >
              {"|"}
            </div>
          ) : null}
          <PlasmicLink__
            data-plasmic-name={"addVariableBtn"}
            data-plasmic-override={overrides.addVariableBtn}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.addVariableBtn,
              {
                [sty.addVariableBtncodeEditing]: hasVariant(
                  $state,
                  "codeEditing",
                  "codeEditing"
                ),
                [sty.addVariableBtnwithAddQuery]: hasVariant(
                  $state,
                  "withAddQuery",
                  "withAddQuery"
                ),
                [sty.addVariableBtnwithAddVariable]: hasVariant(
                  $state,
                  "withAddVariable",
                  "withAddVariable"
                ),
                [sty.addVariableBtnwithDeleteButton]: hasVariant(
                  $state,
                  "withDeleteButton",
                  "withDeleteButton"
                ),
                [sty.addVariableBtnwithUnlink]: hasVariant(
                  $state,
                  "withUnlink",
                  "withUnlink"
                ),
              }
            )}
            platform={"react"}
          >
            {hasVariant($state, "withAddVariable", "withAddVariable")
              ? "Add new State Variable"
              : "Add new Query"}
          </PlasmicLink__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eZfaW,
              {
                [sty.textwithAddQuery__eZfaW80OAu]: hasVariant(
                  $state,
                  "withAddQuery",
                  "withAddQuery"
                ),
                [sty.textwithAddVariable__eZfaW9Qwg6]: hasVariant(
                  $state,
                  "withAddVariable",
                  "withAddVariable"
                ),
                [sty.textwithUnlink__eZfaWy7Vep]: hasVariant(
                  $state,
                  "withUnlink",
                  "withUnlink"
                ),
              }
            )}
          >
            {"|"}
          </div>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link,
              {
                [sty.linkcodeEditing]: hasVariant(
                  $state,
                  "codeEditing",
                  "codeEditing"
                ),
                [sty.linkhasExpectedValues]: hasVariant(
                  $state,
                  "hasExpectedValues",
                  "hasExpectedValues"
                ),
                [sty.linkwithAddQuery]: hasVariant(
                  $state,
                  "withAddQuery",
                  "withAddQuery"
                ),
                [sty.linkwithAddVariable]: hasVariant(
                  $state,
                  "withAddVariable",
                  "withAddVariable"
                ),
                [sty.linkwithDeleteButton]: hasVariant(
                  $state,
                  "withDeleteButton",
                  "withDeleteButton"
                ),
                [sty.linkwithSearchResult]: hasVariant(
                  $state,
                  "withSearchResult",
                  "withSearchResult"
                ),
                [sty.linkwithUnlink]: hasVariant(
                  $state,
                  "withUnlink",
                  "withUnlink"
                ),
                [sty.linkwithoutStateSwitch]: hasVariant(
                  $state,
                  "withoutStateSwitch",
                  "withoutStateSwitch"
                ),
              }
            )}
            href={"https://docs.plasmic.app/learn/dynamic-values/"}
            platform={"react"}
            target={"_blank"}
          >
            {"Help"}
          </PlasmicLink__>
        </Stack__>
      </div>
      {(
        hasVariant($state, "empty", "empty")
          ? false
          : hasVariant($state, "codeEditing", "codeEditing")
          ? false
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___3RfRi, {
            [sty.freeBoxcodeEditing___3RfRiSjavw]: hasVariant(
              $state,
              "codeEditing",
              "codeEditing"
            ),
            [sty.freeBoxempty___3RfRi6WvzY]: hasVariant(
              $state,
              "empty",
              "empty"
            ),
          })}
        >
          <Searchbox
            data-plasmic-name={"searchbox"}
            data-plasmic-override={overrides.searchbox}
            extraPadding={true}
            noOutline={true}
          />
        </div>
      ) : null}
      <div
        data-plasmic-name={"items"}
        data-plasmic-override={overrides.items}
        className={classNames(projectcss.all, sty.items, {
          [sty.itemscodeEditing]: hasVariant(
            $state,
            "codeEditing",
            "codeEditing"
          ),
          [sty.itemsempty]: hasVariant($state, "empty", "empty"),
          [sty.itemswithAddVariable]: hasVariant(
            $state,
            "withAddVariable",
            "withAddVariable"
          ),
          [sty.itemswithSearchResult]: hasVariant(
            $state,
            "withSearchResult",
            "withSearchResult"
          ),
          [sty.itemswithoutStateSwitch]: hasVariant(
            $state,
            "withoutStateSwitch",
            "withoutStateSwitch"
          ),
        })}
      >
        {(
          hasVariant($state, "empty", "empty")
            ? false
            : hasVariant($state, "codeEditing", "codeEditing")
            ? false
            : true
        )
          ? renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <DataPickerColumn
                    className={classNames(
                      "__wab_instance",
                      sty.dataPickerColumn__upiXf
                    )}
                  >
                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__kQ5GF
                      )}
                      isSelected={true}
                      variableType={"object"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___9WZ5M
                      )}
                      variableType={"object"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___7JiM
                      )}
                      variableType={"string"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___6AFmt
                      )}
                      variableType={"number"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__hNfG5
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__wJagR
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__qDcs
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__thpkQ
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__eh3C8
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__hcC1Q
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___4KI1
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__iyJyn
                      )}
                      variableType={"boolean"}
                    />
                  </DataPickerColumn>
                  <DataPickerColumn
                    className={classNames(
                      "__wab_instance",
                      sty.dataPickerColumn__iViBa
                    )}
                  >
                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__r7CIc
                      )}
                      variableType={"string"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__jGlFf
                      )}
                      variableType={"number"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__teNoe
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___5MfQd
                      )}
                      isSelected={true}
                      variableType={"object"}
                    />
                  </DataPickerColumn>
                  <DataPickerColumn
                    className={classNames(
                      "__wab_instance",
                      sty.dataPickerColumn__zvVr
                    )}
                    isWide={true}
                  >
                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__b08Xy
                      )}
                      isSelected={true}
                      variableType={"object"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__noifJ
                      )}
                      variableType={"string"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__fS0Ap
                      )}
                      variableType={"number"}
                    />
                  </DataPickerColumn>
                  <DataPickerColumn
                    className={classNames(
                      "__wab_instance",
                      sty.dataPickerColumn__fdqEf
                    )}
                    isWide={true}
                  >
                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___4Karc
                      )}
                      variableType={"string"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem___1QlPw
                      )}
                      isSelected={true}
                      variableType={"number"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__ygRjr
                      )}
                      variableType={"boolean"}
                    />

                    <DataPickerColumnItem
                      className={classNames(
                        "__wab_instance",
                        sty.dataPickerColumnItem__pemZd
                      )}
                      variableType={"object"}
                    />
                  </DataPickerColumn>
                </React.Fragment>
              ),
              value: args.children,
            })
          : null}
        {(
          hasVariant($state, "empty", "empty")
            ? false
            : hasVariant($state, "codeEditing", "codeEditing")
            ? false
            : hasVariant($state, "withSearchResult", "withSearchResult")
            ? false
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__eexDd, {
              [sty.freeBoxcodeEditing__eexDdSjavw]: hasVariant(
                $state,
                "codeEditing",
                "codeEditing"
              ),
              [sty.freeBoxempty__eexDd6WvzY]: hasVariant(
                $state,
                "empty",
                "empty"
              ),
              [sty.freeBoxwithSearchResult__eexDdIMQl]: hasVariant(
                $state,
                "withSearchResult",
                "withSearchResult"
              ),
            })}
          />
        ) : null}
        {(
          hasVariant($state, "withSearchResult", "withSearchResult")
            ? true
            : false
        ) ? (
          <DataPickerGlobalSearchResults
            data-plasmic-name={"searchResults"}
            data-plasmic-override={overrides.searchResults}
            className={classNames("__wab_instance", sty.searchResults, {
              [sty.searchResultswithSearchResult]: hasVariant(
                $state,
                "withSearchResult",
                "withSearchResult"
              ),
            })}
          >
            <DataPickerColumnItem
              data-plasmic-name={"dataPickerColumnItem"}
              data-plasmic-override={overrides.dataPickerColumnItem}
              className={classNames(
                "__wab_instance",
                sty.dataPickerColumnItem,
                {
                  [sty.dataPickerColumnItemwithSearchResult]: hasVariant(
                    $state,
                    "withSearchResult",
                    "withSearchResult"
                  ),
                }
              )}
              variableType={"string"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gtoId,
                {
                  [sty.textwithSearchResult__gtoIdIMQl]: hasVariant(
                    $state,
                    "withSearchResult",
                    "withSearchResult"
                  ),
                }
              )}
            >
              {"More results"}
            </div>
            <DataPickerGlobalSearchResultsItem
              className={classNames(
                "__wab_instance",
                sty.dataPickerGlobalSearchResultsItem__bacC
              )}
              itemName={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ypk9
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Titl"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 400 }}
                    >
                      {"e"}
                    </span>
                  </React.Fragment>
                </div>
              }
              itemPath={"Variants / Color /"}
            />

            <DataPickerGlobalSearchResultsItem
              className={classNames(
                "__wab_instance",
                sty.dataPickerGlobalSearchResultsItem__uTUbR
              )}
              itemName={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nUgsl
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Titl"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 400 }}
                    >
                      {"e"}
                    </span>
                  </React.Fragment>
                </div>
              }
              itemPath={null}
            />
          </DataPickerGlobalSearchResults>
        ) : null}
        {(hasVariant($state, "codeEditing", "codeEditing") ? true : false) ? (
          <DataPickerCodeEditorLayout
            data-plasmic-name={"codeEditor"}
            data-plasmic-override={overrides.codeEditor}
            className={classNames("__wab_instance", sty.codeEditor, {
              [sty.codeEditorcodeEditing]: hasVariant(
                $state,
                "codeEditing",
                "codeEditing"
              ),
              [sty.codeEditorcodeEditing_copilot]:
                hasVariant($state, "copilot", "copilot") &&
                hasVariant($state, "codeEditing", "codeEditing"),
            })}
            codeEditor={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ukOhu,
                  {
                    [sty.textcodeEditing__ukOhuSjavw]: hasVariant(
                      $state,
                      "codeEditing",
                      "codeEditing"
                    ),
                  }
                )}
              >
                {"$ctx.strapiItem.name"}
              </div>
            }
            codePreview={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___88Akt
                )}
              >
                {'"iPhone 13 Pro Max"'}
              </div>
            }
            copilot={
              hasVariant($state, "copilot", "copilot") &&
              hasVariant($state, "codeEditing", "codeEditing")
                ? true
                : undefined
            }
          />
        ) : null}
        {(hasVariant($state, "empty", "empty") ? true : false) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qiatw,
              {
                [sty.textempty__qiatw6WvzY]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
              }
            )}
          >
            {"No dynamic data available"}
          </div>
        ) : null}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        hasGap={true}
        className={classNames(projectcss.all, sty.footer, {
          [sty.footercodeEditing]: hasVariant(
            $state,
            "codeEditing",
            "codeEditing"
          ),
          [sty.footerempty]: hasVariant($state, "empty", "empty"),
          [sty.footerhasExpectedValues]: hasVariant(
            $state,
            "hasExpectedValues",
            "hasExpectedValues"
          ),
          [sty.footerisRunCodeInteraction]: hasVariant(
            $state,
            "isRunCodeInteraction",
            "isRunCodeInteraction"
          ),
          [sty.footerisRunCodeInteraction_codeEditing]:
            hasVariant(
              $state,
              "isRunCodeInteraction",
              "isRunCodeInteraction"
            ) && hasVariant($state, "codeEditing", "codeEditing"),
          [sty.footerwithSearchResult]: hasVariant(
            $state,
            "withSearchResult",
            "withSearchResult"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__dk33, {
            [sty.freeBoxcodeEditing__dk33Sjavw]: hasVariant(
              $state,
              "codeEditing",
              "codeEditing"
            ),
            [sty.freeBoxempty__dk336WvzY]: hasVariant($state, "empty", "empty"),
            [sty.freeBoxhasExpectedValues__dk338ZNr]: hasVariant(
              $state,
              "hasExpectedValues",
              "hasExpectedValues"
            ),
            [sty.freeBoxisRunCodeInteraction__dk3389LL]: hasVariant(
              $state,
              "isRunCodeInteraction",
              "isRunCodeInteraction"
            ),
            [sty.freeBoxwithSearchResult__dk33IMQl]: hasVariant(
              $state,
              "withSearchResult",
              "withSearchResult"
            ),
          })}
        >
          {(
            hasVariant($state, "empty", "empty")
              ? true
              : hasVariant($state, "codeEditing", "codeEditing")
              ? false
              : true
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ruRlY, {
                [sty.freeBoxcodeEditing__ruRlYsjavw]: hasVariant(
                  $state,
                  "codeEditing",
                  "codeEditing"
                ),
                [sty.freeBoxempty__ruRlY6WvzY]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
                [sty.freeBoxhasExpectedValues__ruRlY8ZNr]: hasVariant(
                  $state,
                  "hasExpectedValues",
                  "hasExpectedValues"
                ),
                [sty.freeBoxwithSearchResult__ruRlYiMQl]: hasVariant(
                  $state,
                  "withSearchResult",
                  "withSearchResult"
                ),
              })}
            >
              {(hasVariant($state, "empty", "empty") ? false : true) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qaa16,
                    {
                      [sty.textcodeEditing__qaa16Sjavw]: hasVariant(
                        $state,
                        "codeEditing",
                        "codeEditing"
                      ),
                      [sty.textempty__qaa166WvzY]: hasVariant(
                        $state,
                        "empty",
                        "empty"
                      ),
                      [sty.texthasExpectedValues__qaa168ZNr]: hasVariant(
                        $state,
                        "hasExpectedValues",
                        "hasExpectedValues"
                      ),
                      [sty.textwithSearchResult__qaa16IMQl]: hasVariant(
                        $state,
                        "withSearchResult",
                        "withSearchResult"
                      ),
                    }
                  )}
                >
                  {"Selected:"}
                </div>
              ) : null}
              {(hasVariant($state, "empty", "empty") ? false : true) ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__q6R5H, {
                    [sty.freeBoxempty__q6R5H6WvzY]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                  })}
                >
                  {renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <DataPickerSelectedItem
                          className={classNames(
                            "__wab_instance",
                            sty.dataPickerSelectedItem__iJ5T2
                          )}
                        />

                        <DataPickerSelectedItem
                          className={classNames(
                            "__wab_instance",
                            sty.dataPickerSelectedItem__vjTi4
                          )}
                          lastItem={true}
                        />
                      </React.Fragment>
                    ),
                    value: args.selectedItem,
                  })}
                </Stack__>
              ) : null}
            </Stack__>
          ) : null}
          {(
            hasVariant($state, "hasExpectedValues", "hasExpectedValues")
              ? true
              : false
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__d7XVv, {
                [sty.freeBoxcodeEditing__d7XVvSjavw]: hasVariant(
                  $state,
                  "codeEditing",
                  "codeEditing"
                ),
                [sty.freeBoxempty__d7XVv6WvzY]: hasVariant(
                  $state,
                  "empty",
                  "empty"
                ),
                [sty.freeBoxhasExpectedValues__d7XVv8ZNr]: hasVariant(
                  $state,
                  "hasExpectedValues",
                  "hasExpectedValues"
                ),
                [sty.freeBoxwithSearchResult__d7XVvIMQl]: hasVariant(
                  $state,
                  "withSearchResult",
                  "withSearchResult"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__opvlB,
                  {
                    [sty.textcodeEditing__opvlBsjavw]: hasVariant(
                      $state,
                      "codeEditing",
                      "codeEditing"
                    ),
                    [sty.textempty__opvlB6WvzY]: hasVariant(
                      $state,
                      "empty",
                      "empty"
                    ),
                    [sty.textwithSearchResult__opvlBiMQl]: hasVariant(
                      $state,
                      "withSearchResult",
                      "withSearchResult"
                    ),
                  }
                )}
              >
                {"Expected values:"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nBnS)}>
                {renderPlasmicSlot({
                  defaultContents: '"isBold", "softBlue", true',
                  value: args.expectedValues,
                  className: classNames(sty.slotTargetExpectedValues),
                })}
              </div>
            </Stack__>
          ) : null}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__d1Wr2, {
            [sty.freeBoxcodeEditing__d1Wr2Sjavw]: hasVariant(
              $state,
              "codeEditing",
              "codeEditing"
            ),
            [sty.freeBoxhasExpectedValues__d1Wr28ZNr]: hasVariant(
              $state,
              "hasExpectedValues",
              "hasExpectedValues"
            ),
            [sty.freeBoxisRunCodeInteraction__d1Wr289LL]: hasVariant(
              $state,
              "isRunCodeInteraction",
              "isRunCodeInteraction"
            ),
          })}
        >
          {(
            hasVariant($state, "withDeleteButton", "withDeleteButton")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"deleteButton"}
              data-plasmic-override={overrides.deleteButton}
              caption={"Caption"}
              className={classNames("__wab_instance", sty.deleteButton, {
                [sty.deleteButtonwithDeleteButton]: hasVariant(
                  $state,
                  "withDeleteButton",
                  "withDeleteButton"
                ),
                [sty.deleteButtonwithSearchResult]: hasVariant(
                  $state,
                  "withSearchResult",
                  "withSearchResult"
                ),
              })}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__isguJ)}
                  role={"img"}
                />
              }
              font={"dim"}
              size={"wide"}
              startIcon={
                <ArrowRightSvgIcon
                  className={classNames(projectcss.all, sty.svg__s27J4)}
                  role={"img"}
                />
              }
            >
              {"Delete"}
            </Button>
          ) : null}
          {(
            hasVariant(
              $state,
              "isRunCodeInteraction",
              "isRunCodeInteraction"
            ) && hasVariant($state, "codeEditing", "codeEditing")
              ? true
              : false
          ) ? (
            <Button
              data-plasmic-name={"runButton"}
              data-plasmic-override={overrides.runButton}
              caption={"Caption"}
              className={classNames("__wab_instance", sty.runButton, {
                [sty.runButtonisRunCodeInteraction]: hasVariant(
                  $state,
                  "isRunCodeInteraction",
                  "isRunCodeInteraction"
                ),
                [sty.runButtonisRunCodeInteraction_codeEditing]:
                  hasVariant(
                    $state,
                    "isRunCodeInteraction",
                    "isRunCodeInteraction"
                  ) && hasVariant($state, "codeEditing", "codeEditing"),
                [sty.runButtonwithSearchResult]: hasVariant(
                  $state,
                  "withSearchResult",
                  "withSearchResult"
                ),
              })}
              color={"darkRed"}
              endIcon={
                <ChevronDownSvgIcon
                  className={classNames(projectcss.all, sty.svg__uLbeH)}
                  role={"img"}
                />
              }
              size={"wide"}
              startIcon={
                <PlaySvgIcon
                  className={classNames(projectcss.all, sty.svg__gqcvY)}
                  role={"img"}
                />
              }
              withIcons={["startIcon"]}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3W9Vb,
                  {
                    [sty.textisRunCodeInteraction___3W9Vb89LL]: hasVariant(
                      $state,
                      "isRunCodeInteraction",
                      "isRunCodeInteraction"
                    ),
                  }
                )}
              >
                {hasVariant(
                  $state,
                  "isRunCodeInteraction",
                  "isRunCodeInteraction"
                )
                  ? "Run"
                  : "Save"}
              </div>
            </Button>
          ) : null}
          <Button
            data-plasmic-name={"cancelButton"}
            data-plasmic-override={overrides.cancelButton}
            caption={"Caption"}
            className={classNames("__wab_instance", sty.cancelButton, {
              [sty.cancelButtonhasExpectedValues]: hasVariant(
                $state,
                "hasExpectedValues",
                "hasExpectedValues"
              ),
              [sty.cancelButtonwithDeleteButton]: hasVariant(
                $state,
                "withDeleteButton",
                "withDeleteButton"
              ),
              [sty.cancelButtonwithSearchResult]: hasVariant(
                $state,
                "withSearchResult",
                "withSearchResult"
              ),
            })}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__zeTa)}
                role={"img"}
              />
            }
            font={"dim"}
            size={"wide"}
            startIcon={
              <ArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__n5BIg)}
                role={"img"}
              />
            }
          >
            {"Cancel"}
          </Button>
          <Button
            data-plasmic-name={"saveButton"}
            data-plasmic-override={overrides.saveButton}
            caption={"Caption"}
            className={classNames("__wab_instance", sty.saveButton, {
              [sty.saveButtonisRunCodeInteraction]: hasVariant(
                $state,
                "isRunCodeInteraction",
                "isRunCodeInteraction"
              ),
              [sty.saveButtonwithSearchResult]: hasVariant(
                $state,
                "withSearchResult",
                "withSearchResult"
              ),
            })}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__dR6Kf)}
                role={"img"}
              />
            }
            size={"wide"}
            startIcon={
              <ArrowRightSvgIcon
                className={classNames(projectcss.all, sty.svg__wYlpN)}
                role={"img"}
              />
            }
            type={["primary"]}
          >
            {"Save"}
          </Button>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "title",
    "stateSwitch",
    "advancedSwitch",
    "unlinkButton",
    "addQueryBtn",
    "addVariableBtn",
    "link",
    "searchbox",
    "items",
    "searchResults",
    "dataPickerColumnItem",
    "codeEditor",
    "footer",
    "deleteButton",
    "runButton",
    "cancelButton",
    "saveButton",
  ],
  header: [
    "header",
    "title",
    "stateSwitch",
    "advancedSwitch",
    "unlinkButton",
    "addQueryBtn",
    "addVariableBtn",
    "link",
  ],
  title: ["title"],
  stateSwitch: ["stateSwitch"],
  advancedSwitch: ["advancedSwitch"],
  unlinkButton: ["unlinkButton"],
  addQueryBtn: ["addQueryBtn"],
  addVariableBtn: ["addVariableBtn"],
  link: ["link"],
  searchbox: ["searchbox"],
  items: ["items", "searchResults", "dataPickerColumnItem", "codeEditor"],
  searchResults: ["searchResults", "dataPickerColumnItem"],
  dataPickerColumnItem: ["dataPickerColumnItem"],
  codeEditor: ["codeEditor"],
  footer: ["footer", "deleteButton", "runButton", "cancelButton", "saveButton"],
  deleteButton: ["deleteButton"],
  runButton: ["runButton"],
  cancelButton: ["cancelButton"],
  saveButton: ["saveButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  title: "div";
  stateSwitch: "a";
  advancedSwitch: "a";
  unlinkButton: "a";
  addQueryBtn: "a";
  addVariableBtn: "a";
  link: "a";
  searchbox: typeof Searchbox;
  items: "div";
  searchResults: typeof DataPickerGlobalSearchResults;
  dataPickerColumnItem: typeof DataPickerColumnItem;
  codeEditor: typeof DataPickerCodeEditorLayout;
  footer: "div";
  deleteButton: typeof Button;
  runButton: typeof Button;
  cancelButton: typeof Button;
  saveButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDataPicker__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDataPicker__VariantsArgs;
    args?: PlasmicDataPicker__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDataPicker__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDataPicker__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDataPicker__ArgProps,
          internalVariantPropNames: PlasmicDataPicker__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicDataPicker__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDataPicker";
  } else {
    func.displayName = `PlasmicDataPicker.${nodeName}`;
  }
  return func;
}

export const PlasmicDataPicker = Object.assign(
  // Top-level PlasmicDataPicker renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    title: makeNodeComponent("title"),
    stateSwitch: makeNodeComponent("stateSwitch"),
    advancedSwitch: makeNodeComponent("advancedSwitch"),
    unlinkButton: makeNodeComponent("unlinkButton"),
    addQueryBtn: makeNodeComponent("addQueryBtn"),
    addVariableBtn: makeNodeComponent("addVariableBtn"),
    link: makeNodeComponent("link"),
    searchbox: makeNodeComponent("searchbox"),
    items: makeNodeComponent("items"),
    searchResults: makeNodeComponent("searchResults"),
    dataPickerColumnItem: makeNodeComponent("dataPickerColumnItem"),
    codeEditor: makeNodeComponent("codeEditor"),
    footer: makeNodeComponent("footer"),
    deleteButton: makeNodeComponent("deleteButton"),
    runButton: makeNodeComponent("runButton"),
    cancelButton: makeNodeComponent("cancelButton"),
    saveButton: makeNodeComponent("saveButton"),

    // Metadata about props expected for PlasmicDataPicker
    internalVariantProps: PlasmicDataPicker__VariantProps,
    internalArgProps: PlasmicDataPicker__ArgProps,
  }
);

export default PlasmicDataPicker;
/* prettier-ignore-end */
