/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: VDe4OfA0wv

import * as React from "react";

import {
  Flex as Flex__,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import WrapRepeatedElementOption from "../../components/sidebar-tabs/DataBinding/WrapRepeatedElementOption"; // plasmic-import: QcDtYmEqee/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss
import sty from "./PlasmicWrapRepeatedElementModal.module.css"; // plasmic-import: VDe4OfA0wv/css

createPlasmicElementProxy;

export type PlasmicWrapRepeatedElementModal__VariantMembers = {};
export type PlasmicWrapRepeatedElementModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicWrapRepeatedElementModal__VariantsArgs;
export const PlasmicWrapRepeatedElementModal__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWrapRepeatedElementModal__ArgsType = {};
type ArgPropType = keyof PlasmicWrapRepeatedElementModal__ArgsType;
export const PlasmicWrapRepeatedElementModal__ArgProps =
  new Array<ArgPropType>();

export type PlasmicWrapRepeatedElementModal__OverridesType = {
  root?: Flex__<"div">;
  modalWrapRepeatedElement?: Flex__<"div">;
  frame28?: Flex__<"div">;
  frame27?: Flex__<"div">;
  frame25?: Flex__<"div">;
  rectangle16?: Flex__<"div">;
  rectangle17?: Flex__<"div">;
  rectangle18?: Flex__<"div">;
};

export interface DefaultWrapRepeatedElementModalProps {
  className?: string;
}

const $$ = {};

function PlasmicWrapRepeatedElementModal__RenderFunc(props: {
  variants: PlasmicWrapRepeatedElementModal__VariantsArgs;
  args: PlasmicWrapRepeatedElementModal__ArgsType;
  overrides: PlasmicWrapRepeatedElementModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"modalWrapRepeatedElement"}
        data-plasmic-override={overrides.modalWrapRepeatedElement}
        hasGap={true}
        className={classNames(projectcss.all, sty.modalWrapRepeatedElement)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame28"}
          data-plasmic-override={overrides.frame28}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame28)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qjHi
            )}
          >
            {"Wrap element"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6V3Kb
            )}
          >
            {"This is a repeated element, how do you want to wrap it?"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame27"}
          data-plasmic-override={overrides.frame27}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame27)}
        >
          <WrapRepeatedElementOption
            className={classNames(
              "__wab_instance",
              sty.wrapRepeatedElementOption__wiSrK
            )}
          />

          <WrapRepeatedElementOption
            className={classNames(
              "__wab_instance",
              sty.wrapRepeatedElementOption__pePKo
            )}
            slot={"Wrap all the repeated elements in a single wrapper"}
            wrapRepeatedContainer={
              <Stack__
                as={"div"}
                data-plasmic-name={"frame25"}
                data-plasmic-override={overrides.frame25}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame25)}
              >
                <div
                  data-plasmic-name={"rectangle16"}
                  data-plasmic-override={overrides.rectangle16}
                  className={classNames(projectcss.all, sty.rectangle16)}
                />

                <div
                  data-plasmic-name={"rectangle17"}
                  data-plasmic-override={overrides.rectangle17}
                  className={classNames(projectcss.all, sty.rectangle17)}
                />

                <div
                  data-plasmic-name={"rectangle18"}
                  data-plasmic-override={overrides.rectangle18}
                  className={classNames(projectcss.all, sty.rectangle18)}
                />
              </Stack__>
            }
          >
            {"Wrap all items"}
          </WrapRepeatedElementOption>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modalWrapRepeatedElement",
    "frame28",
    "frame27",
    "frame25",
    "rectangle16",
    "rectangle17",
    "rectangle18",
  ],
  modalWrapRepeatedElement: [
    "modalWrapRepeatedElement",
    "frame28",
    "frame27",
    "frame25",
    "rectangle16",
    "rectangle17",
    "rectangle18",
  ],
  frame28: ["frame28"],
  frame27: ["frame27", "frame25", "rectangle16", "rectangle17", "rectangle18"],
  frame25: ["frame25", "rectangle16", "rectangle17", "rectangle18"],
  rectangle16: ["rectangle16"],
  rectangle17: ["rectangle17"],
  rectangle18: ["rectangle18"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modalWrapRepeatedElement: "div";
  frame28: "div";
  frame27: "div";
  frame25: "div";
  rectangle16: "div";
  rectangle17: "div";
  rectangle18: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWrapRepeatedElementModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWrapRepeatedElementModal__VariantsArgs;
    args?: PlasmicWrapRepeatedElementModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWrapRepeatedElementModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWrapRepeatedElementModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWrapRepeatedElementModal__ArgProps,
          internalVariantPropNames:
            PlasmicWrapRepeatedElementModal__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicWrapRepeatedElementModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWrapRepeatedElementModal";
  } else {
    func.displayName = `PlasmicWrapRepeatedElementModal.${nodeName}`;
  }
  return func;
}

export const PlasmicWrapRepeatedElementModal = Object.assign(
  // Top-level PlasmicWrapRepeatedElementModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modalWrapRepeatedElement: makeNodeComponent("modalWrapRepeatedElement"),
    frame28: makeNodeComponent("frame28"),
    frame27: makeNodeComponent("frame27"),
    frame25: makeNodeComponent("frame25"),
    rectangle16: makeNodeComponent("rectangle16"),
    rectangle17: makeNodeComponent("rectangle17"),
    rectangle18: makeNodeComponent("rectangle18"),

    // Metadata about props expected for PlasmicWrapRepeatedElementModal
    internalVariantProps: PlasmicWrapRepeatedElementModal__VariantProps,
    internalArgProps: PlasmicWrapRepeatedElementModal__ArgProps,
  }
);

export default PlasmicWrapRepeatedElementModal;
/* prettier-ignore-end */
