/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w2GXN278dkQ2gQTVQnPehW
// Component: -zGA-erYhCmv

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicImg as PlasmicImg__,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import CopilotMsg from "../../components/CopilotMsg"; // plasmic-import: CdMYaSGMjG/component
import { CopilotPromptInput } from "../../components/copilot/CopilotPromptInput"; // plasmic-import: pnV7KLVDUyoz/component
import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import sty from "./PlasmicCopilotPromptDialog.module.css"; // plasmic-import: -zGA-erYhCmv/css
import projectcss from "./plasmic_plasmic_kit_data_binding.module.css"; // plasmic-import: w2GXN278dkQ2gQTVQnPehW/projectcss

import HistoryIcon from "../plasmic_kit/PlasmicIcon__History"; // plasmic-import: 6ZOswzsUR/icon
import CloseSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: EfDOV4MDLj/icon
import imageUYmVmRYjy from "./images/image.png"; // plasmic-import: UYmVmRYjy/picture

createPlasmicElementProxy;

export type PlasmicCopilotPromptDialog__VariantMembers = {
  state:
    | "ready"
    | "loading"
    | "error"
    | "quotaExceeded"
    | "history"
    | "historyEmpty";
  type: "ui" | "sql" | "code";
};
export type PlasmicCopilotPromptDialog__VariantsArgs = {
  state?: SingleChoiceArg<
    "ready" | "loading" | "error" | "quotaExceeded" | "history" | "historyEmpty"
  >;
  type?: SingleChoiceArg<"ui" | "sql" | "code">;
};
type VariantPropType = keyof PlasmicCopilotPromptDialog__VariantsArgs;
export const PlasmicCopilotPromptDialog__VariantProps =
  new Array<VariantPropType>("state", "type");

export type PlasmicCopilotPromptDialog__ArgsType = {};
type ArgPropType = keyof PlasmicCopilotPromptDialog__ArgsType;
export const PlasmicCopilotPromptDialog__ArgProps = new Array<ArgPropType>();

export type PlasmicCopilotPromptDialog__OverridesType = {
  rootContainer?: Flex__<"div">;
  sizerContainer?: Flex__<"div">;
  promptDialog?: Flex__<"div">;
  headerContainer?: Flex__<"div">;
  promptLabel?: Flex__<"div">;
  history?: Flex__<"h6">;
  rightButtons?: Flex__<"div">;
  historyBtn?: Flex__<typeof IconButton>;
  cancelBtn?: Flex__<typeof IconButton>;
  contents?: Flex__<"div">;
  historyContainer?: Flex__<"div">;
  historyEmptyMsg?: Flex__<"div">;
  historyContents?: Flex__<"div">;
  historyBottomDiv?: Flex__<"div">;
  onLoadTrigger?: Flex__<typeof PlasmicImg__>;
  promptContainer?: Flex__<"div">;
  promptInput?: Flex__<typeof CopilotPromptInput>;
  errorMessage?: Flex__<"div">;
  quotaExceededMsg?: Flex__<"div">;
  reply?: Flex__<typeof CopilotMsg>;
};

export interface DefaultCopilotPromptDialogProps {
  state?: SingleChoiceArg<
    "ready" | "loading" | "error" | "quotaExceeded" | "history" | "historyEmpty"
  >;
  type?: SingleChoiceArg<"ui" | "sql" | "code">;
  className?: string;
}

const $$ = {};

function PlasmicCopilotPromptDialog__RenderFunc(props: {
  variants: PlasmicCopilotPromptDialog__VariantsArgs;
  args: PlasmicCopilotPromptDialog__ArgsType;
  overrides: PlasmicCopilotPromptDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"rootContainer"}
      data-plasmic-override={overrides.rootContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.rootContainer,
        {
          [sty.rootContainerstate_error]: hasVariant($state, "state", "error"),
          [sty.rootContainerstate_historyEmpty]: hasVariant(
            $state,
            "state",
            "historyEmpty"
          ),
          [sty.rootContainerstate_history]: hasVariant(
            $state,
            "state",
            "history"
          ),
          [sty.rootContainerstate_loading]: hasVariant(
            $state,
            "state",
            "loading"
          ),
          [sty.rootContainerstate_quotaExceeded]: hasVariant(
            $state,
            "state",
            "quotaExceeded"
          ),
          [sty.rootContainerstate_ready]: hasVariant($state, "state", "ready"),
          [sty.rootContainertype_sql]: hasVariant($state, "type", "sql"),
          [sty.rootContainertype_ui]: hasVariant($state, "type", "ui"),
        }
      )}
    >
      <div
        data-plasmic-name={"sizerContainer"}
        data-plasmic-override={overrides.sizerContainer}
        className={classNames(projectcss.all, sty.sizerContainer, {
          [sty.sizerContainerstate_error]: hasVariant($state, "state", "error"),
          [sty.sizerContainerstate_history]: hasVariant(
            $state,
            "state",
            "history"
          ),
          [sty.sizerContainerstate_loading]: hasVariant(
            $state,
            "state",
            "loading"
          ),
          [sty.sizerContainerstate_quotaExceeded]: hasVariant(
            $state,
            "state",
            "quotaExceeded"
          ),
          [sty.sizerContainerstate_ready]: hasVariant($state, "state", "ready"),
          [sty.sizerContainerstate_ready_type_ui]:
            hasVariant($state, "type", "ui") &&
            hasVariant($state, "state", "ready"),
          [sty.sizerContainertype_sql]: hasVariant($state, "type", "sql"),
          [sty.sizerContainertype_ui]: hasVariant($state, "type", "ui"),
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"promptDialog"}
          data-plasmic-override={overrides.promptDialog}
          hasGap={true}
          className={classNames(projectcss.all, sty.promptDialog, {
            [sty.promptDialogstate_historyEmpty]: hasVariant(
              $state,
              "state",
              "historyEmpty"
            ),
            [sty.promptDialogstate_history]: hasVariant(
              $state,
              "state",
              "history"
            ),
            [sty.promptDialogstate_loading]: hasVariant(
              $state,
              "state",
              "loading"
            ),
            [sty.promptDialogstate_ready]: hasVariant($state, "state", "ready"),
            [sty.promptDialogstate_ready_type_ui]:
              hasVariant($state, "type", "ui") &&
              hasVariant($state, "state", "ready"),
            [sty.promptDialogtype_sql]: hasVariant($state, "type", "sql"),
            [sty.promptDialogtype_ui]: hasVariant($state, "type", "ui"),
          })}
        >
          <div
            data-plasmic-name={"headerContainer"}
            data-plasmic-override={overrides.headerContainer}
            className={classNames(projectcss.all, sty.headerContainer, {
              [sty.headerContainerstate_quotaExceeded]: hasVariant(
                $state,
                "state",
                "quotaExceeded"
              ),
              [sty.headerContainerstate_ready]: hasVariant(
                $state,
                "state",
                "ready"
              ),
              [sty.headerContainertype_sql]: hasVariant($state, "type", "sql"),
            })}
          >
            <div
              data-plasmic-name={"promptLabel"}
              data-plasmic-override={overrides.promptLabel}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.promptLabel,
                {
                  [sty.promptLabelstate_historyEmpty]: hasVariant(
                    $state,
                    "state",
                    "historyEmpty"
                  ),
                  [sty.promptLabelstate_history]: hasVariant(
                    $state,
                    "state",
                    "history"
                  ),
                }
              )}
            >
              {"Describe what you want to get:"}
            </div>
            <h6
              data-plasmic-name={"history"}
              data-plasmic-override={overrides.history}
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.history,
                {
                  [sty.historystate_historyEmpty]: hasVariant(
                    $state,
                    "state",
                    "historyEmpty"
                  ),
                  [sty.historystate_history]: hasVariant(
                    $state,
                    "state",
                    "history"
                  ),
                  [sty.historystate_ready]: hasVariant(
                    $state,
                    "state",
                    "ready"
                  ),
                }
              )}
            >
              {"Suggestion history"}
            </h6>
            <div
              data-plasmic-name={"rightButtons"}
              data-plasmic-override={overrides.rightButtons}
              className={classNames(projectcss.all, sty.rightButtons)}
            >
              <IconButton
                data-plasmic-name={"historyBtn"}
                data-plasmic-override={overrides.historyBtn}
                className={classNames("__wab_instance", sty.historyBtn)}
                size={"small"}
              >
                <HistoryIcon
                  className={classNames(projectcss.all, sty.svg__yiwDt, {
                    [sty.svgstate_historyEmpty__yiwDtWeNsL]: hasVariant(
                      $state,
                      "state",
                      "historyEmpty"
                    ),
                    [sty.svgstate_history__yiwDtFmeFi]: hasVariant(
                      $state,
                      "state",
                      "history"
                    ),
                  })}
                  role={"img"}
                />
              </IconButton>
              <IconButton
                data-plasmic-name={"cancelBtn"}
                data-plasmic-override={overrides.cancelBtn}
                className={classNames("__wab_instance", sty.cancelBtn)}
                size={"small"}
              >
                <CloseSvgIcon
                  className={classNames(projectcss.all, sty.svg__w7MBv)}
                  role={"img"}
                />
              </IconButton>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"contents"}
            data-plasmic-override={overrides.contents}
            hasGap={true}
            className={classNames(projectcss.all, sty.contents, {
              [sty.contentsstate_historyEmpty]: hasVariant(
                $state,
                "state",
                "historyEmpty"
              ),
              [sty.contentsstate_history]: hasVariant(
                $state,
                "state",
                "history"
              ),
              [sty.contentstype_sql]: hasVariant($state, "type", "sql"),
            })}
          >
            {(
              hasVariant($state, "state", "historyEmpty")
                ? true
                : hasVariant($state, "state", "history")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"historyContainer"}
                data-plasmic-override={overrides.historyContainer}
                className={classNames(projectcss.all, sty.historyContainer, {
                  [sty.historyContainerstate_historyEmpty]: hasVariant(
                    $state,
                    "state",
                    "historyEmpty"
                  ),
                  [sty.historyContainerstate_history]: hasVariant(
                    $state,
                    "state",
                    "history"
                  ),
                  [sty.historyContainerstate_quotaExceeded]: hasVariant(
                    $state,
                    "state",
                    "quotaExceeded"
                  ),
                })}
              >
                <div
                  data-plasmic-name={"historyEmptyMsg"}
                  data-plasmic-override={overrides.historyEmptyMsg}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.historyEmptyMsg,
                    {
                      [sty.historyEmptyMsgstate_historyEmpty]: hasVariant(
                        $state,
                        "state",
                        "historyEmpty"
                      ),
                      [sty.historyEmptyMsgstate_history]: hasVariant(
                        $state,
                        "state",
                        "history"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "state", "historyEmpty")
                    ? "No data"
                    : "Enter some text"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"historyContents"}
                  data-plasmic-override={overrides.historyContents}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.historyContents, {
                    [sty.historyContentsstate_historyEmpty]: hasVariant(
                      $state,
                      "state",
                      "historyEmpty"
                    ),
                    [sty.historyContentsstate_history]: hasVariant(
                      $state,
                      "state",
                      "history"
                    ),
                    [sty.historyContentsstate_quotaExceeded]: hasVariant(
                      $state,
                      "state",
                      "quotaExceeded"
                    ),
                  })}
                >
                  <CopilotMsg
                    className={classNames(
                      "__wab_instance",
                      sty.copilotMsg__cScMq
                    )}
                    userPrompt={true}
                  />

                  <CopilotMsg
                    className={classNames(
                      "__wab_instance",
                      sty.copilotMsg__kbV
                    )}
                    rightMargin={true}
                  />

                  <CopilotMsg
                    className={classNames(
                      "__wab_instance",
                      sty.copilotMsg__sfkbS
                    )}
                    userPrompt={true}
                  />

                  <CopilotMsg
                    className={classNames(
                      "__wab_instance",
                      sty.copilotMsg__yboe1
                    )}
                    rightMargin={true}
                  />
                </Stack__>
                <div
                  data-plasmic-name={"historyBottomDiv"}
                  data-plasmic-override={overrides.historyBottomDiv}
                  className={classNames(projectcss.all, sty.historyBottomDiv, {
                    [sty.historyBottomDivstate_history]: hasVariant(
                      $state,
                      "state",
                      "history"
                    ),
                    [sty.historyBottomDivstate_quotaExceeded]: hasVariant(
                      $state,
                      "state",
                      "quotaExceeded"
                    ),
                  })}
                  id={"history-bottom-div"}
                >
                  <PlasmicImg__
                    data-plasmic-name={"onLoadTrigger"}
                    data-plasmic-override={overrides.onLoadTrigger}
                    alt={""}
                    className={classNames(sty.onLoadTrigger, {
                      [sty.onLoadTriggerstate_historyEmpty]: hasVariant(
                        $state,
                        "state",
                        "historyEmpty"
                      ),
                      [sty.onLoadTriggerstate_history]: hasVariant(
                        $state,
                        "state",
                        "history"
                      ),
                      [sty.onLoadTriggerstate_quotaExceeded]: hasVariant(
                        $state,
                        "state",
                        "quotaExceeded"
                      ),
                    })}
                    displayHeight={
                      hasVariant($state, "state", "historyEmpty")
                        ? "1px"
                        : hasVariant($state, "state", "history")
                        ? "1px"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant($state, "state", "historyEmpty")
                        ? "1px"
                        : hasVariant($state, "state", "history")
                        ? "1px"
                        : "auto"
                    }
                    loading={"eager"}
                    onLoad={async (event) => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return document
                                  .getElementById("history-bottom-div")
                                  .scrollIntoView();
                              },
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    src={
                      hasVariant($state, "state", "historyEmpty")
                        ? {
                            src: imageUYmVmRYjy,
                            fullWidth: 1,
                            fullHeight: 1,
                            aspectRatio: undefined,
                          }
                        : hasVariant($state, "state", "history")
                        ? {
                            src: imageUYmVmRYjy,
                            fullWidth: 1,
                            fullHeight: 1,
                            aspectRatio: undefined,
                          }
                        : undefined
                    }
                  />
                </div>
              </div>
            ) : null}
            <Stack__
              as={"div"}
              data-plasmic-name={"promptContainer"}
              data-plasmic-override={overrides.promptContainer}
              hasGap={true}
              className={classNames(projectcss.all, sty.promptContainer, {
                [sty.promptContainerstate_historyEmpty]: hasVariant(
                  $state,
                  "state",
                  "historyEmpty"
                ),
                [sty.promptContainerstate_history]: hasVariant(
                  $state,
                  "state",
                  "history"
                ),
                [sty.promptContainerstate_ready]: hasVariant(
                  $state,
                  "state",
                  "ready"
                ),
              })}
            >
              <CopilotPromptInput
                data-plasmic-name={"promptInput"}
                data-plasmic-override={overrides.promptInput}
                className={classNames("__wab_instance", sty.promptInput, {
                  [sty.promptInputstate_loading]: hasVariant(
                    $state,
                    "state",
                    "loading"
                  ),
                  [sty.promptInputstate_ready]: hasVariant(
                    $state,
                    "state",
                    "ready"
                  ),
                  [sty.promptInputstate_ready_type_ui]:
                    hasVariant($state, "type", "ui") &&
                    hasVariant($state, "state", "ready"),
                  [sty.promptInputtype_sql]: hasVariant($state, "type", "sql"),
                  [sty.promptInputtype_ui]: hasVariant($state, "type", "ui"),
                })}
                isLoading={
                  hasVariant($state, "state", "loading") ? true : undefined
                }
                placeholder={
                  hasVariant($state, "type", "ui")
                    ? 'e.g. "Generate a hero section"'
                    : undefined
                }
              />
            </Stack__>
            {(hasVariant($state, "state", "loading") ? true : false) ? (
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__qXcOj, {
                  [sty.svgstate_loading__qXcOj4AmlM]: hasVariant(
                    $state,
                    "state",
                    "loading"
                  ),
                  [sty.svgstate_ready__qXcOj65H5W]: hasVariant(
                    $state,
                    "state",
                    "ready"
                  ),
                })}
                role={"img"}
              />
            ) : null}
            <div
              data-plasmic-name={"errorMessage"}
              data-plasmic-override={overrides.errorMessage}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.errorMessage,
                {
                  [sty.errorMessagestate_error]: hasVariant(
                    $state,
                    "state",
                    "error"
                  ),
                  [sty.errorMessagestate_ready]: hasVariant(
                    $state,
                    "state",
                    "ready"
                  ),
                }
              )}
            >
              {"Error! \ud83d\ude14"}
            </div>
            <div
              data-plasmic-name={"quotaExceededMsg"}
              data-plasmic-override={overrides.quotaExceededMsg}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.quotaExceededMsg,
                {
                  [sty.quotaExceededMsgstate_quotaExceeded]: hasVariant(
                    $state,
                    "state",
                    "quotaExceeded"
                  ),
                  [sty.quotaExceededMsgstate_ready]: hasVariant(
                    $state,
                    "state",
                    "ready"
                  ),
                }
              )}
            >
              {hasVariant($state, "state", "quotaExceeded")
                ? "Oops!\nYou have exceeded the daily limit for using Plasmic Copilot.\nPlease come back tomorrow or at a later time to continue using the service."
                : "Enter some text"}
            </div>
            <CopilotMsg
              data-plasmic-name={"reply"}
              data-plasmic-override={overrides.reply}
              className={classNames("__wab_instance", sty.reply, {
                [sty.replystate_quotaExceeded]: hasVariant(
                  $state,
                  "state",
                  "quotaExceeded"
                ),
                [sty.replystate_ready]: hasVariant($state, "state", "ready"),
              })}
            />
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rootContainer: [
    "rootContainer",
    "sizerContainer",
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],
  sizerContainer: [
    "sizerContainer",
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],
  promptDialog: [
    "promptDialog",
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],
  headerContainer: [
    "headerContainer",
    "promptLabel",
    "history",
    "rightButtons",
    "historyBtn",
    "cancelBtn",
  ],
  promptLabel: ["promptLabel"],
  history: ["history"],
  rightButtons: ["rightButtons", "historyBtn", "cancelBtn"],
  historyBtn: ["historyBtn"],
  cancelBtn: ["cancelBtn"],
  contents: [
    "contents",
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
    "promptContainer",
    "promptInput",
    "errorMessage",
    "quotaExceededMsg",
    "reply",
  ],
  historyContainer: [
    "historyContainer",
    "historyEmptyMsg",
    "historyContents",
    "historyBottomDiv",
    "onLoadTrigger",
  ],
  historyEmptyMsg: ["historyEmptyMsg"],
  historyContents: ["historyContents"],
  historyBottomDiv: ["historyBottomDiv", "onLoadTrigger"],
  onLoadTrigger: ["onLoadTrigger"],
  promptContainer: ["promptContainer", "promptInput"],
  promptInput: ["promptInput"],
  errorMessage: ["errorMessage"],
  quotaExceededMsg: ["quotaExceededMsg"],
  reply: ["reply"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rootContainer: "div";
  sizerContainer: "div";
  promptDialog: "div";
  headerContainer: "div";
  promptLabel: "div";
  history: "h6";
  rightButtons: "div";
  historyBtn: typeof IconButton;
  cancelBtn: typeof IconButton;
  contents: "div";
  historyContainer: "div";
  historyEmptyMsg: "div";
  historyContents: "div";
  historyBottomDiv: "div";
  onLoadTrigger: typeof PlasmicImg__;
  promptContainer: "div";
  promptInput: typeof CopilotPromptInput;
  errorMessage: "div";
  quotaExceededMsg: "div";
  reply: typeof CopilotMsg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopilotPromptDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopilotPromptDialog__VariantsArgs;
    args?: PlasmicCopilotPromptDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopilotPromptDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopilotPromptDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCopilotPromptDialog__ArgProps,
          internalVariantPropNames: PlasmicCopilotPromptDialog__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicCopilotPromptDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "rootContainer") {
    func.displayName = "PlasmicCopilotPromptDialog";
  } else {
    func.displayName = `PlasmicCopilotPromptDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicCopilotPromptDialog = Object.assign(
  // Top-level PlasmicCopilotPromptDialog renders the root element
  makeNodeComponent("rootContainer"),
  {
    // Helper components rendering sub-elements
    sizerContainer: makeNodeComponent("sizerContainer"),
    promptDialog: makeNodeComponent("promptDialog"),
    headerContainer: makeNodeComponent("headerContainer"),
    promptLabel: makeNodeComponent("promptLabel"),
    history: makeNodeComponent("history"),
    rightButtons: makeNodeComponent("rightButtons"),
    historyBtn: makeNodeComponent("historyBtn"),
    cancelBtn: makeNodeComponent("cancelBtn"),
    contents: makeNodeComponent("contents"),
    historyContainer: makeNodeComponent("historyContainer"),
    historyEmptyMsg: makeNodeComponent("historyEmptyMsg"),
    historyContents: makeNodeComponent("historyContents"),
    historyBottomDiv: makeNodeComponent("historyBottomDiv"),
    onLoadTrigger: makeNodeComponent("onLoadTrigger"),
    promptContainer: makeNodeComponent("promptContainer"),
    promptInput: makeNodeComponent("promptInput"),
    errorMessage: makeNodeComponent("errorMessage"),
    quotaExceededMsg: makeNodeComponent("quotaExceededMsg"),
    reply: makeNodeComponent("reply"),

    // Metadata about props expected for PlasmicCopilotPromptDialog
    internalVariantProps: PlasmicCopilotPromptDialog__VariantProps,
    internalArgProps: PlasmicCopilotPromptDialog__ArgProps,
  }
);

export default PlasmicCopilotPromptDialog;
/* prettier-ignore-end */
