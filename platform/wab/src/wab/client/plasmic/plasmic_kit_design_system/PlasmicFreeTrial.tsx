/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXkSR39sgCDWSitZxC5xFV
// Component: p3GgKAlaQe

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicFreeTrial.module.css"; // plasmic-import: p3GgKAlaQe/css

import BookmarkSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__BookmarkSvg"; // plasmic-import: ifTRn8aE8/icon

createPlasmicElementProxy;

export type PlasmicFreeTrial__VariantMembers = {
  topBar: "topBar";
  accountSection: "accountSection";
  trialEnded: "trialEnded";
};
export type PlasmicFreeTrial__VariantsArgs = {
  topBar?: SingleBooleanChoiceArg<"topBar">;
  accountSection?: SingleBooleanChoiceArg<"accountSection">;
  trialEnded?: SingleBooleanChoiceArg<"trialEnded">;
};
type VariantPropType = keyof PlasmicFreeTrial__VariantsArgs;
export const PlasmicFreeTrial__VariantProps = new Array<VariantPropType>(
  "topBar",
  "accountSection",
  "trialEnded"
);

export type PlasmicFreeTrial__ArgsType = {
  freeTrialTimeRemaining?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFreeTrial__ArgsType;
export const PlasmicFreeTrial__ArgProps = new Array<ArgPropType>(
  "freeTrialTimeRemaining"
);

export type PlasmicFreeTrial__OverridesType = {
  root?: Flex__<"a">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
};

export interface DefaultFreeTrialProps {
  freeTrialTimeRemaining?: React.ReactNode;
  topBar?: SingleBooleanChoiceArg<"topBar">;
  accountSection?: SingleBooleanChoiceArg<"accountSection">;
  trialEnded?: SingleBooleanChoiceArg<"trialEnded">;
  className?: string;
}

const $$ = {};

function PlasmicFreeTrial__RenderFunc(props: {
  variants: PlasmicFreeTrial__VariantsArgs;
  args: PlasmicFreeTrial__ArgsType;
  overrides: PlasmicFreeTrial__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "topBar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.topBar,
      },
      {
        path: "accountSection",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.accountSection,
      },
      {
        path: "trialEnded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.trialEnded,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootaccountSection]: hasVariant(
            $state,
            "accountSection",
            "accountSection"
          ),
          [sty.roottopBar]: hasVariant($state, "topBar", "topBar"),
          [sty.roottrialEnded]: hasVariant($state, "trialEnded", "trialEnded"),
        }
      )}
      platform={"react"}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bx9A, {
          [sty.freeBoxaccountSection__bx9A8XxRr]: hasVariant(
            $state,
            "accountSection",
            "accountSection"
          ),
          [sty.freeBoxtopBar__bx9A9W0Mn]: hasVariant(
            $state,
            "topBar",
            "topBar"
          ),
          [sty.freeBoxtrialEnded__bx9AVzBi]: hasVariant(
            $state,
            "trialEnded",
            "trialEnded"
          ),
        })}
      >
        <BookmarkSvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgaccountSection]: hasVariant(
              $state,
              "accountSection",
              "accountSection"
            ),
            [sty.svgtopBar]: hasVariant($state, "topBar", "topBar"),
            [sty.svgtrialEnded]: hasVariant($state, "trialEnded", "trialEnded"),
          })}
          role={"img"}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wjeac, {
            [sty.freeBoxaccountSection__wjeac8XxRr]: hasVariant(
              $state,
              "accountSection",
              "accountSection"
            ),
            [sty.freeBoxtopBar__wjeac9W0Mn]: hasVariant(
              $state,
              "topBar",
              "topBar"
            ),
            [sty.freeBoxtrialEnded__wjeacVzBi]: hasVariant(
              $state,
              "trialEnded",
              "trialEnded"
            ),
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textaccountSection]: hasVariant(
                  $state,
                  "accountSection",
                  "accountSection"
                ),
                [sty.texttopBar]: hasVariant($state, "topBar", "topBar"),
                [sty.texttrialEnded]: hasVariant(
                  $state,
                  "trialEnded",
                  "trialEnded"
                ),
              }
            )}
          >
            {hasVariant($state, "trialEnded", "trialEnded")
              ? "Trial ended"
              : hasVariant($state, "topBar", "topBar")
              ? "Trial"
              : "Scale plan trial"}
          </div>
          {renderPlasmicSlot({
            defaultContents: "0 days left",
            value: args.freeTrialTimeRemaining,
            className: classNames(sty.slotTargetFreeTrialTimeRemaining, {
              [sty.slotTargetFreeTrialTimeRemainingaccountSection]: hasVariant(
                $state,
                "accountSection",
                "accountSection"
              ),
              [sty.slotTargetFreeTrialTimeRemainingaccountSection_trialEnded]:
                hasVariant($state, "trialEnded", "trialEnded") &&
                hasVariant($state, "accountSection", "accountSection"),
              [sty.slotTargetFreeTrialTimeRemainingtrialEnded]: hasVariant(
                $state,
                "trialEnded",
                "trialEnded"
              ),
            }),
          })}
        </Stack__>
      </Stack__>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFreeTrial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFreeTrial__VariantsArgs;
    args?: PlasmicFreeTrial__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFreeTrial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFreeTrial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFreeTrial__ArgProps,
          internalVariantPropNames: PlasmicFreeTrial__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicFreeTrial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFreeTrial";
  } else {
    func.displayName = `PlasmicFreeTrial.${nodeName}`;
  }
  return func;
}

export const PlasmicFreeTrial = Object.assign(
  // Top-level PlasmicFreeTrial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFreeTrial
    internalVariantProps: PlasmicFreeTrial__VariantProps,
    internalArgProps: PlasmicFreeTrial__ArgProps,
  }
);

export default PlasmicFreeTrial;
/* prettier-ignore-end */
