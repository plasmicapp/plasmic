/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXkSR39sgCDWSitZxC5xFV
// Component: v31d9_ANqk

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component
import MenuButton from "../../components/widgets/MenuButton"; // plasmic-import: h69wHrrKtL/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicListItem.module.css"; // plasmic-import: v31d9_ANqk/css

import ComponentIcon from "../plasmic_kit/PlasmicIcon__Component"; // plasmic-import: nNWEF4jI3s5DI/icon
import EyeIcon from "../plasmic_kit/PlasmicIcon__Eye"; // plasmic-import: A2FnGYgDh4e3U/icon
import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import GripSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__GripSvg"; // plasmic-import: jxIRSIMqs/icon

createPlasmicElementProxy;

export type PlasmicListItem__VariantMembers = {
  isSelected: "isSelected";
  isFocused: "isFocused";
  showActions: "showActions";
  isDragging: "isDragging";
  isDraggable: "isDraggable";
  showAddendums: "showAddendums";
  hideIcon: "hideIcon";
  hasMenu: "hasMenu";
  showAdditionalRow: "showAdditionalRow";
  color: "variant";
  alwaysShowDragHandle: "alwaysShowDragHandle";
  hasRightContents: "hasRightContents";
  isHighlighted: "isHighlighted";
};
export type PlasmicListItem__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  isFocused?: SingleBooleanChoiceArg<"isFocused">;
  showActions?: SingleBooleanChoiceArg<"showActions">;
  isDragging?: SingleBooleanChoiceArg<"isDragging">;
  isDraggable?: SingleBooleanChoiceArg<"isDraggable">;
  showAddendums?: SingleBooleanChoiceArg<"showAddendums">;
  hideIcon?: SingleBooleanChoiceArg<"hideIcon">;
  hasMenu?: SingleBooleanChoiceArg<"hasMenu">;
  showAdditionalRow?: SingleBooleanChoiceArg<"showAdditionalRow">;
  color?: SingleChoiceArg<"variant">;
  alwaysShowDragHandle?: SingleBooleanChoiceArg<"alwaysShowDragHandle">;
  hasRightContents?: SingleBooleanChoiceArg<"hasRightContents">;
  isHighlighted?: SingleBooleanChoiceArg<"isHighlighted">;
};
type VariantPropType = keyof PlasmicListItem__VariantsArgs;
export const PlasmicListItem__VariantProps = new Array<VariantPropType>(
  "isSelected",
  "isFocused",
  "showActions",
  "isDragging",
  "isDraggable",
  "showAddendums",
  "hideIcon",
  "hasMenu",
  "showAdditionalRow",
  "color",
  "alwaysShowDragHandle",
  "hasRightContents",
  "isHighlighted"
);

export type PlasmicListItem__ArgsType = {
  icon?: React.ReactNode;
  children?: React.ReactNode;
  actions?: React.ReactNode;
  addendum?: React.ReactNode;
  additional?: React.ReactNode;
  rightContent?: React.ReactNode;
};
type ArgPropType = keyof PlasmicListItem__ArgsType;
export const PlasmicListItem__ArgProps = new Array<ArgPropType>(
  "icon",
  "children",
  "actions",
  "addendum",
  "additional",
  "rightContent"
);

export type PlasmicListItem__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  dragHandle?: Flex__<"div">;
  svg?: Flex__<"svg">;
  iconContainer?: Flex__<"div">;
  labelContainer?: Flex__<"div">;
  leftContent?: Flex__<"div">;
  rightContentContainer?: Flex__<"div">;
  addendumContainer?: Flex__<"div">;
  actionsContainer?: Flex__<"div">;
  menuButton?: Flex__<typeof MenuButton>;
  additional?: Flex__<"div">;
};

export interface DefaultListItemProps {
  icon?: React.ReactNode;
  children?: React.ReactNode;
  actions?: React.ReactNode;
  addendum?: React.ReactNode;
  additional?: React.ReactNode;
  rightContent?: React.ReactNode;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  isFocused?: SingleBooleanChoiceArg<"isFocused">;
  showActions?: SingleBooleanChoiceArg<"showActions">;
  isDragging?: SingleBooleanChoiceArg<"isDragging">;
  isDraggable?: SingleBooleanChoiceArg<"isDraggable">;
  showAddendums?: SingleBooleanChoiceArg<"showAddendums">;
  hideIcon?: SingleBooleanChoiceArg<"hideIcon">;
  hasMenu?: SingleBooleanChoiceArg<"hasMenu">;
  showAdditionalRow?: SingleBooleanChoiceArg<"showAdditionalRow">;
  color?: SingleChoiceArg<"variant">;
  alwaysShowDragHandle?: SingleBooleanChoiceArg<"alwaysShowDragHandle">;
  hasRightContents?: SingleBooleanChoiceArg<"hasRightContents">;
  isHighlighted?: SingleBooleanChoiceArg<"isHighlighted">;
  className?: string;
}

const $$ = {};

function PlasmicListItem__RenderFunc(props: {
  variants: PlasmicListItem__VariantsArgs;
  args: PlasmicListItem__ArgsType;
  overrides: PlasmicListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected,
      },
      {
        path: "isFocused",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isFocused,
      },
      {
        path: "showActions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showActions,
      },
      {
        path: "isDragging",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDragging,
      },
      {
        path: "isDraggable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDraggable,
      },
      {
        path: "showAddendums",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showAddendums,
      },
      {
        path: "hideIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideIcon,
      },
      {
        path: "hasMenu",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasMenu,
      },
      {
        path: "showAdditionalRow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.showAdditionalRow,
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color,
      },
      {
        path: "alwaysShowDragHandle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.alwaysShowDragHandle,
      },
      {
        path: "hasRightContents",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.hasRightContents,
      },
      {
        path: "isHighlighted",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isHighlighted,
      },
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_variant]: hasVariant($state, "color", "variant"),
          [sty.rootcolor_variant_hasMenu]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "hasMenu", "hasMenu"),
          [sty.roothasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
          [sty.roothasRightContents]: hasVariant(
            $state,
            "hasRightContents",
            "hasRightContents"
          ),
          [sty.roothasRightContents_isSelected]:
            hasVariant($state, "hasRightContents", "hasRightContents") &&
            hasVariant($state, "isSelected", "isSelected"),
          [sty.roothasRightContents_isSelected_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "isSelected", "isSelected") &&
            hasVariant($state, "hasRightContents", "hasRightContents"),
          [sty.roothasRightContents_showActions]:
            hasVariant($state, "hasRightContents", "hasRightContents") &&
            hasVariant($state, "showActions", "showActions"),
          [sty.roothideIcon]: hasVariant($state, "hideIcon", "hideIcon"),
          [sty.roothideIcon_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "hideIcon", "hideIcon"),
          [sty.rootisDraggable]: hasVariant(
            $state,
            "isDraggable",
            "isDraggable"
          ),
          [sty.rootisDragging]: hasVariant($state, "isDragging", "isDragging"),
          [sty.rootisFocused]: hasVariant($state, "isFocused", "isFocused"),
          [sty.rootisFocused_hasMenu]:
            hasVariant($state, "isFocused", "isFocused") &&
            hasVariant($state, "hasMenu", "hasMenu"),
          [sty.rootisHighlighted]: hasVariant(
            $state,
            "isHighlighted",
            "isHighlighted"
          ),
          [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.rootisSelected_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "isSelected", "isSelected"),
          [sty.rootshowActions]: hasVariant(
            $state,
            "showActions",
            "showActions"
          ),
          [sty.rootshowActions_isSelected]:
            hasVariant($state, "isSelected", "isSelected") &&
            hasVariant($state, "showActions", "showActions"),
          [sty.rootshowAddendums]: hasVariant(
            $state,
            "showAddendums",
            "showAddendums"
          ),
          [sty.rootshowAddendums_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "showAddendums", "showAddendums"),
          [sty.rootshowAddendums_showActions_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "showAddendums", "showAddendums") &&
            hasVariant($state, "showActions", "showActions"),
          [sty.rootshowAdditionalRow]: hasVariant(
            $state,
            "showAdditionalRow",
            "showAdditionalRow"
          ),
          [sty.rootshowAdditionalRow_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "showAdditionalRow", "showAdditionalRow"),
          [sty.rootshowAdditionalRow_color_variant_hasMenu]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "showAdditionalRow", "showAdditionalRow") &&
            hasVariant($state, "hasMenu", "hasMenu"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        hasGap={true}
        className={classNames(projectcss.all, sty.main, {
          [sty.mainalwaysShowDragHandle]: hasVariant(
            $state,
            "alwaysShowDragHandle",
            "alwaysShowDragHandle"
          ),
          [sty.maincolor_variant]: hasVariant($state, "color", "variant"),
          [sty.mainhasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
          [sty.mainhasRightContents]: hasVariant(
            $state,
            "hasRightContents",
            "hasRightContents"
          ),
          [sty.mainhideIcon]: hasVariant($state, "hideIcon", "hideIcon"),
          [sty.mainisDraggable]: hasVariant(
            $state,
            "isDraggable",
            "isDraggable"
          ),
          [sty.mainisDragging]: hasVariant($state, "isDragging", "isDragging"),
          [sty.mainisFocused]: hasVariant($state, "isFocused", "isFocused"),
          [sty.mainisHighlighted]: hasVariant(
            $state,
            "isHighlighted",
            "isHighlighted"
          ),
          [sty.mainisHighlighted_hasMenu]:
            hasVariant($state, "hasMenu", "hasMenu") &&
            hasVariant($state, "isHighlighted", "isHighlighted"),
          [sty.mainisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.mainisSelected_color_variant]:
            hasVariant($state, "color", "variant") &&
            hasVariant($state, "isSelected", "isSelected"),
          [sty.mainshowActions]: hasVariant(
            $state,
            "showActions",
            "showActions"
          ),
          [sty.mainshowAddendums]: hasVariant(
            $state,
            "showAddendums",
            "showAddendums"
          ),
          [sty.mainshowAddendums_isSelected]:
            hasVariant($state, "isSelected", "isSelected") &&
            hasVariant($state, "showAddendums", "showAddendums"),
          [sty.mainshowAdditionalRow]: hasVariant(
            $state,
            "showAdditionalRow",
            "showAdditionalRow"
          ),
        })}
      >
        {(
          triggers.hover_root &&
          hasVariant($state, "isDraggable", "isDraggable")
            ? true
            : hasVariant($state, "alwaysShowDragHandle", "alwaysShowDragHandle")
            ? true
            : hasVariant($state, "isDraggable", "isDraggable")
            ? true
            : hasVariant($state, "isDragging", "isDragging")
            ? true
            : false
        ) ? (
          <div
            data-plasmic-name={"dragHandle"}
            data-plasmic-override={overrides.dragHandle}
            className={classNames(projectcss.all, sty.dragHandle, {
              [sty.dragHandlealwaysShowDragHandle]: hasVariant(
                $state,
                "alwaysShowDragHandle",
                "alwaysShowDragHandle"
              ),
              [sty.dragHandleisDraggable]: hasVariant(
                $state,
                "isDraggable",
                "isDraggable"
              ),
              [sty.dragHandleisDragging]: hasVariant(
                $state,
                "isDragging",
                "isDragging"
              ),
            })}
          >
            <GripSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgalwaysShowDragHandle]: hasVariant(
                  $state,
                  "alwaysShowDragHandle",
                  "alwaysShowDragHandle"
                ),
                [sty.svghasRightContents]: hasVariant(
                  $state,
                  "hasRightContents",
                  "hasRightContents"
                ),
                [sty.svgisDraggable]: hasVariant(
                  $state,
                  "isDraggable",
                  "isDraggable"
                ),
                [sty.svgisDragging]: hasVariant(
                  $state,
                  "isDragging",
                  "isDragging"
                ),
                [sty.svgshowActions]: hasVariant(
                  $state,
                  "showActions",
                  "showActions"
                ),
                [sty.svgshowAddendums]: hasVariant(
                  $state,
                  "showAddendums",
                  "showAddendums"
                ),
              })}
              role={"img"}
            />
          </div>
        ) : null}
        {(hasVariant($state, "hideIcon", "hideIcon") ? false : true) ? (
          <div
            data-plasmic-name={"iconContainer"}
            data-plasmic-override={overrides.iconContainer}
            className={classNames(projectcss.all, sty.iconContainer, {
              [sty.iconContainercolor_variant]: hasVariant(
                $state,
                "color",
                "variant"
              ),
              [sty.iconContainerhideIcon]: hasVariant(
                $state,
                "hideIcon",
                "hideIcon"
              ),
              [sty.iconContainerisFocused]: hasVariant(
                $state,
                "isFocused",
                "isFocused"
              ),
              [sty.iconContainershowActions]: hasVariant(
                $state,
                "showActions",
                "showActions"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <ComponentIcon
                  className={classNames(projectcss.all, sty.svg__fBezd)}
                  role={"img"}
                />
              ),

              value: args.icon,
              className: classNames(sty.slotTargetIcon, {
                [sty.slotTargetIconcolor_variant]: hasVariant(
                  $state,
                  "color",
                  "variant"
                ),
                [sty.slotTargetIconisSelected]: hasVariant(
                  $state,
                  "isSelected",
                  "isSelected"
                ),
                [sty.slotTargetIconisSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected"),
                [sty.slotTargetIconshowActions]: hasVariant(
                  $state,
                  "showActions",
                  "showActions"
                ),
                [sty.slotTargetIconshowAddendums_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
              }),
            })}
          </div>
        ) : null}
        <Stack__
          as={"div"}
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.labelContainer, {
            [sty.labelContainercolor_variant]: hasVariant(
              $state,
              "color",
              "variant"
            ),
            [sty.labelContainerhasMenu]: hasVariant(
              $state,
              "hasMenu",
              "hasMenu"
            ),
            [sty.labelContainerhasRightContents]: hasVariant(
              $state,
              "hasRightContents",
              "hasRightContents"
            ),
            [sty.labelContainerhasRightContents_color_variant]:
              hasVariant($state, "color", "variant") &&
              hasVariant($state, "hasRightContents", "hasRightContents"),
            [sty.labelContainerhasRightContents_isSelected_color_variant]:
              hasVariant($state, "color", "variant") &&
              hasVariant($state, "isSelected", "isSelected") &&
              hasVariant($state, "hasRightContents", "hasRightContents"),
            [sty.labelContainerhideIcon]: hasVariant(
              $state,
              "hideIcon",
              "hideIcon"
            ),
            [sty.labelContainerisFocused]: hasVariant(
              $state,
              "isFocused",
              "isFocused"
            ),
            [sty.labelContainerisFocused_hasMenu]:
              hasVariant($state, "isFocused", "isFocused") &&
              hasVariant($state, "hasMenu", "hasMenu"),
            [sty.labelContainerisSelected]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            ),
            [sty.labelContainerisSelected_color_variant]:
              hasVariant($state, "color", "variant") &&
              hasVariant($state, "isSelected", "isSelected"),
            [sty.labelContainershowActions]: hasVariant(
              $state,
              "showActions",
              "showActions"
            ),
            [sty.labelContainershowAddendums]: hasVariant(
              $state,
              "showAddendums",
              "showAddendums"
            ),
            [sty.labelContainershowAddendums_color_variant]:
              hasVariant($state, "color", "variant") &&
              hasVariant($state, "showAddendums", "showAddendums"),
          })}
        >
          <div
            data-plasmic-name={"leftContent"}
            data-plasmic-override={overrides.leftContent}
            className={classNames(projectcss.all, sty.leftContent, {
              [sty.leftContentalwaysShowDragHandle]: hasVariant(
                $state,
                "alwaysShowDragHandle",
                "alwaysShowDragHandle"
              ),
              [sty.leftContentcolor_variant]: hasVariant(
                $state,
                "color",
                "variant"
              ),
              [sty.leftContenthasMenu]: hasVariant(
                $state,
                "hasMenu",
                "hasMenu"
              ),
              [sty.leftContenthasRightContents]: hasVariant(
                $state,
                "hasRightContents",
                "hasRightContents"
              ),
              [sty.leftContentisSelected]: hasVariant(
                $state,
                "isSelected",
                "isSelected"
              ),
              [sty.leftContentshowActions]: hasVariant(
                $state,
                "showActions",
                "showActions"
              ),
              [sty.leftContentshowAddendums]: hasVariant(
                $state,
                "showAddendums",
                "showAddendums"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Item name is pretty long",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrencolor_variant]: hasVariant(
                  $state,
                  "color",
                  "variant"
                ),
                [sty.slotTargetChildrencolor_variant_hasMenu]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "hasMenu", "hasMenu"),
                [sty.slotTargetChildrenhasMenu]: hasVariant(
                  $state,
                  "hasMenu",
                  "hasMenu"
                ),
                [sty.slotTargetChildrenhasRightContents]: hasVariant(
                  $state,
                  "hasRightContents",
                  "hasRightContents"
                ),
                [sty.slotTargetChildrenhasRightContents_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "hasRightContents", "hasRightContents"),
                [sty.slotTargetChildrenhideIcon_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "hideIcon", "hideIcon"),
                [sty.slotTargetChildrenisFocused]: hasVariant(
                  $state,
                  "isFocused",
                  "isFocused"
                ),
                [sty.slotTargetChildrenisSelected]: hasVariant(
                  $state,
                  "isSelected",
                  "isSelected"
                ),
                [sty.slotTargetChildrenisSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected"),
                [sty.slotTargetChildrenshowActions]: hasVariant(
                  $state,
                  "showActions",
                  "showActions"
                ),
                [sty.slotTargetChildrenshowActions_color_variant]:
                  hasVariant($state, "showActions", "showActions") &&
                  hasVariant($state, "color", "variant"),
                [sty.slotTargetChildrenshowActions_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetChildrenshowAddendums]: hasVariant(
                  $state,
                  "showAddendums",
                  "showAddendums"
                ),
                [sty.slotTargetChildrenshowAddendums_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetChildrenshowAdditionalRow]: hasVariant(
                  $state,
                  "showAdditionalRow",
                  "showAdditionalRow"
                ),
                [sty.slotTargetChildrenshowAdditionalRow_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAdditionalRow", "showAdditionalRow"),
                [sty.slotTargetChildrenshowAdditionalRow_color_variant_hasMenu]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant(
                    $state,
                    "showAdditionalRow",
                    "showAdditionalRow"
                  ) &&
                  hasVariant($state, "hasMenu", "hasMenu"),
              }),
            })}
          </div>
          {(
            hasVariant($state, "hasRightContents", "hasRightContents") &&
            triggers.hover_root
              ? true
              : hasVariant($state, "hasRightContents", "hasRightContents")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"rightContentContainer"}
              data-plasmic-override={overrides.rightContentContainer}
              className={classNames(projectcss.all, sty.rightContentContainer, {
                [sty.rightContentContaineralwaysShowDragHandle]: hasVariant(
                  $state,
                  "alwaysShowDragHandle",
                  "alwaysShowDragHandle"
                ),
                [sty.rightContentContainerhasRightContents]: hasVariant(
                  $state,
                  "hasRightContents",
                  "hasRightContents"
                ),
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "longer/path/to/code.tsx",
                value: args.rightContent,
                className: classNames(sty.slotTargetRightContent, {
                  [sty.slotTargetRightContenthasMenu]: hasVariant(
                    $state,
                    "hasMenu",
                    "hasMenu"
                  ),
                  [sty.slotTargetRightContenthasRightContents]: hasVariant(
                    $state,
                    "hasRightContents",
                    "hasRightContents"
                  ),
                  [sty.slotTargetRightContenthasRightContents_isSelected]:
                    hasVariant(
                      $state,
                      "hasRightContents",
                      "hasRightContents"
                    ) && hasVariant($state, "isSelected", "isSelected"),
                  [sty.slotTargetRightContenthasRightContents_isSelected_color_variant]:
                    hasVariant($state, "color", "variant") &&
                    hasVariant($state, "isSelected", "isSelected") &&
                    hasVariant($state, "hasRightContents", "hasRightContents"),
                  [sty.slotTargetRightContenthasRightContents_showActions]:
                    hasVariant(
                      $state,
                      "hasRightContents",
                      "hasRightContents"
                    ) && hasVariant($state, "showActions", "showActions"),
                  [sty.slotTargetRightContenthideIcon]: hasVariant(
                    $state,
                    "hideIcon",
                    "hideIcon"
                  ),
                  [sty.slotTargetRightContentshowActions]: hasVariant(
                    $state,
                    "showActions",
                    "showActions"
                  ),
                }),
              })}
            </div>
          ) : null}
        </Stack__>
        {(
          hasVariant($state, "showAddendums", "showAddendums") ? true : false
        ) ? (
          <div
            data-plasmic-name={"addendumContainer"}
            data-plasmic-override={overrides.addendumContainer}
            className={classNames(projectcss.all, sty.addendumContainer, {
              [sty.addendumContaineralwaysShowDragHandle]: hasVariant(
                $state,
                "alwaysShowDragHandle",
                "alwaysShowDragHandle"
              ),
              [sty.addendumContainercolor_variant]: hasVariant(
                $state,
                "color",
                "variant"
              ),
              [sty.addendumContainerhasRightContents]: hasVariant(
                $state,
                "hasRightContents",
                "hasRightContents"
              ),
              [sty.addendumContainerhideIcon]: hasVariant(
                $state,
                "hideIcon",
                "hideIcon"
              ),
              [sty.addendumContainershowAddendums]: hasVariant(
                $state,
                "showAddendums",
                "showAddendums"
              ),
              [sty.addendumContainershowAdditionalRow]: hasVariant(
                $state,
                "showAdditionalRow",
                "showAdditionalRow"
              ),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "Blahblah",
              value: args.addendum,
              className: classNames(sty.slotTargetAddendum, {
                [sty.slotTargetAddendumalwaysShowDragHandle]: hasVariant(
                  $state,
                  "alwaysShowDragHandle",
                  "alwaysShowDragHandle"
                ),
                [sty.slotTargetAddendumcolor_variant]: hasVariant(
                  $state,
                  "color",
                  "variant"
                ),
                [sty.slotTargetAddendumhasMenu]: hasVariant(
                  $state,
                  "hasMenu",
                  "hasMenu"
                ),
                [sty.slotTargetAddendumhasRightContents]: hasVariant(
                  $state,
                  "hasRightContents",
                  "hasRightContents"
                ),
                [sty.slotTargetAddendumhasRightContents_showActions]:
                  hasVariant($state, "hasRightContents", "hasRightContents") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetAddendumhideIcon]: hasVariant(
                  $state,
                  "hideIcon",
                  "hideIcon"
                ),
                [sty.slotTargetAddendumisFocused]: hasVariant(
                  $state,
                  "isFocused",
                  "isFocused"
                ),
                [sty.slotTargetAddendumshowAddendums]: hasVariant(
                  $state,
                  "showAddendums",
                  "showAddendums"
                ),
                [sty.slotTargetAddendumshowAddendums_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetAddendumshowAddendums_isSelected]:
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetAddendumshowAddendums_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums") &&
                  hasVariant($state, "isSelected", "isSelected"),
                [sty.slotTargetAddendumshowAddendums_showActions_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetAddendumshowAdditionalRow]: hasVariant(
                  $state,
                  "showAdditionalRow",
                  "showAdditionalRow"
                ),
              }),
            })}
          </div>
        ) : null}
        {(hasVariant($state, "showActions", "showActions") ? true : false) ? (
          <div
            data-plasmic-name={"actionsContainer"}
            data-plasmic-override={overrides.actionsContainer}
            className={classNames(projectcss.all, sty.actionsContainer, {
              [sty.actionsContainercolor_variant]: hasVariant(
                $state,
                "color",
                "variant"
              ),
              [sty.actionsContainerhasRightContents]: hasVariant(
                $state,
                "hasRightContents",
                "hasRightContents"
              ),
              [sty.actionsContainerhasRightContents_color_variant]:
                hasVariant($state, "color", "variant") &&
                hasVariant($state, "hasRightContents", "hasRightContents"),
              [sty.actionsContainershowActions]: hasVariant(
                $state,
                "showActions",
                "showActions"
              ),
              [sty.actionsContainershowAddendums]: hasVariant(
                $state,
                "showAddendums",
                "showAddendums"
              ),
              [sty.actionsContainershowAddendums_color_variant]:
                hasVariant($state, "color", "variant") &&
                hasVariant($state, "showAddendums", "showAddendums"),
              [sty.actionsContainershowAddendums_showActions_color_variant]:
                hasVariant($state, "color", "variant") &&
                hasVariant($state, "showAddendums", "showAddendums") &&
                hasVariant($state, "showActions", "showActions"),
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <IconButton
                  children2={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__iuQ8O)}
                      role={"img"}
                    />
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.iconButton___6Diem
                  )}
                  size={"vertical"}
                  type={["seamless"]}
                >
                  <EyeIcon
                    className={classNames(projectcss.all, sty.svg__d4PxG)}
                    role={"img"}
                  />
                </IconButton>
              ),

              value: args.actions,
              className: classNames(sty.slotTargetActions, {
                [sty.slotTargetActionscolor_variant]: hasVariant(
                  $state,
                  "color",
                  "variant"
                ),
                [sty.slotTargetActionshasMenu]: hasVariant(
                  $state,
                  "hasMenu",
                  "hasMenu"
                ),
                [sty.slotTargetActionshideIcon]: hasVariant(
                  $state,
                  "hideIcon",
                  "hideIcon"
                ),
                [sty.slotTargetActionsisDragging]: hasVariant(
                  $state,
                  "isDragging",
                  "isDragging"
                ),
                [sty.slotTargetActionsisDragging_isDraggable_showActions_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showActions", "showActions") &&
                  hasVariant($state, "isDragging", "isDragging") &&
                  hasVariant($state, "isDraggable", "isDraggable"),
                [sty.slotTargetActionsisDragging_showActions_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showActions", "showActions") &&
                  hasVariant($state, "isDragging", "isDragging"),
                [sty.slotTargetActionsisDragging_showAddendums_isDraggable_showActions_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showActions", "showActions") &&
                  hasVariant($state, "isDragging", "isDragging") &&
                  hasVariant($state, "isDraggable", "isDraggable") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetActionsisDragging_showAddendums_showActions_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showActions", "showActions") &&
                  hasVariant($state, "isDragging", "isDragging") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetActionsisFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused"),
                [sty.slotTargetActionsisSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected"),
                [sty.slotTargetActionsshowActions]: hasVariant(
                  $state,
                  "showActions",
                  "showActions"
                ),
                [sty.slotTargetActionsshowActions_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetActionsshowActions_isSelected]:
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetActionsshowActions_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetActionsshowAddendums]: hasVariant(
                  $state,
                  "showAddendums",
                  "showAddendums"
                ),
                [sty.slotTargetActionsshowAddendums_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetActionsshowAddendums_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetActionsshowAddendums_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
                [sty.slotTargetActionsshowAddendums_showActions_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "showAddendums", "showAddendums") &&
                  hasVariant($state, "showActions", "showActions"),
                [sty.slotTargetActionsshowAddendums_showActions_isFocused_isSelected_color_variant]:
                  hasVariant($state, "color", "variant") &&
                  hasVariant($state, "isSelected", "isSelected") &&
                  hasVariant($state, "isFocused", "isFocused") &&
                  hasVariant($state, "showActions", "showActions") &&
                  hasVariant($state, "showAddendums", "showAddendums"),
              }),
            })}
          </div>
        ) : null}
        <MenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          className={classNames("__wab_instance", sty.menuButton, {
            [sty.menuButtonhasMenu]: hasVariant($state, "hasMenu", "hasMenu"),
            [sty.menuButtonisFocused]: hasVariant(
              $state,
              "isFocused",
              "isFocused"
            ),
            [sty.menuButtonisFocused_hasMenu]:
              hasVariant($state, "isFocused", "isFocused") &&
              hasVariant($state, "hasMenu", "hasMenu"),
            [sty.menuButtonisHighlighted_hasMenu]:
              hasVariant($state, "hasMenu", "hasMenu") &&
              hasVariant($state, "isHighlighted", "isHighlighted"),
          })}
        />
      </Stack__>
      {(
        hasVariant($state, "showAdditionalRow", "showAdditionalRow")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"additional"}
          data-plasmic-override={overrides.additional}
          className={classNames(projectcss.all, sty.additional, {
            [sty.additionalalwaysShowDragHandle]: hasVariant(
              $state,
              "alwaysShowDragHandle",
              "alwaysShowDragHandle"
            ),
            [sty.additionalcolor_variant]: hasVariant(
              $state,
              "color",
              "variant"
            ),
            [sty.additionalhasRightContents]: hasVariant(
              $state,
              "hasRightContents",
              "hasRightContents"
            ),
            [sty.additionalisDraggable]: hasVariant(
              $state,
              "isDraggable",
              "isDraggable"
            ),
            [sty.additionalisSelected_color_variant]:
              hasVariant($state, "color", "variant") &&
              hasVariant($state, "isSelected", "isSelected"),
            [sty.additionalshowAdditionalRow]: hasVariant(
              $state,
              "showAdditionalRow",
              "showAdditionalRow"
            ),
          })}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.additional,
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "dragHandle",
    "svg",
    "iconContainer",
    "labelContainer",
    "leftContent",
    "rightContentContainer",
    "addendumContainer",
    "actionsContainer",
    "menuButton",
    "additional",
  ],

  main: [
    "main",
    "dragHandle",
    "svg",
    "iconContainer",
    "labelContainer",
    "leftContent",
    "rightContentContainer",
    "addendumContainer",
    "actionsContainer",
    "menuButton",
  ],

  dragHandle: ["dragHandle", "svg"],
  svg: ["svg"],
  iconContainer: ["iconContainer"],
  labelContainer: ["labelContainer", "leftContent", "rightContentContainer"],
  leftContent: ["leftContent"],
  rightContentContainer: ["rightContentContainer"],
  addendumContainer: ["addendumContainer"],
  actionsContainer: ["actionsContainer"],
  menuButton: ["menuButton"],
  additional: ["additional"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  dragHandle: "div";
  svg: "svg";
  iconContainer: "div";
  labelContainer: "div";
  leftContent: "div";
  rightContentContainer: "div";
  addendumContainer: "div";
  actionsContainer: "div";
  menuButton: typeof MenuButton;
  additional: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicListItem__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicListItem__VariantsArgs;
    args?: PlasmicListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicListItem__ArgProps,
          internalVariantPropNames: PlasmicListItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicListItem";
  } else {
    func.displayName = `PlasmicListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicListItem = Object.assign(
  // Top-level PlasmicListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    dragHandle: makeNodeComponent("dragHandle"),
    svg: makeNodeComponent("svg"),
    iconContainer: makeNodeComponent("iconContainer"),
    labelContainer: makeNodeComponent("labelContainer"),
    leftContent: makeNodeComponent("leftContent"),
    rightContentContainer: makeNodeComponent("rightContentContainer"),
    addendumContainer: makeNodeComponent("addendumContainer"),
    actionsContainer: makeNodeComponent("actionsContainer"),
    menuButton: makeNodeComponent("menuButton"),
    additional: makeNodeComponent("additional"),

    // Metadata about props expected for PlasmicListItem
    internalVariantProps: PlasmicListItem__VariantProps,
    internalArgProps: PlasmicListItem__ArgProps,
  }
);

export default PlasmicListItem;
/* prettier-ignore-end */
