/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXkSR39sgCDWSitZxC5xFV
// Component: VNi6NC2QOI

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../../components/widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicActionMenuButton.module.css"; // plasmic-import: VNi6NC2QOI/css

import ChevronDownSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import ChevronUpSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__ChevronUpSvg"; // plasmic-import: i9D87DzsX/icon
import PlusSvgIcon from "../plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon

createPlasmicElementProxy;

export type PlasmicActionMenuButton__VariantMembers = {
  type: "primary" | "secondary" | "clear" | "noDivider";
  isOpen: "isOpen";
  hasIcon: "hasIcon";
  size: "small";
};
export type PlasmicActionMenuButton__VariantsArgs = {
  type?: MultiChoiceArg<"primary" | "secondary" | "clear" | "noDivider">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
  size?: SingleChoiceArg<"small">;
};
type VariantPropType = keyof PlasmicActionMenuButton__VariantsArgs;
export const PlasmicActionMenuButton__VariantProps = new Array<VariantPropType>(
  "type",
  "isOpen",
  "hasIcon",
  "size"
);

export type PlasmicActionMenuButton__ArgsType = {
  children?: React.ReactNode;
  icon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicActionMenuButton__ArgsType;
export const PlasmicActionMenuButton__ArgProps = new Array<ArgPropType>(
  "children",
  "icon"
);

export type PlasmicActionMenuButton__OverridesType = {
  root?: Flex__<"div">;
  actionButton?: Flex__<"button">;
  freeBox?: Flex__<"div">;
  menuTrigger?: Flex__<typeof IconButton>;
};

export interface DefaultActionMenuButtonProps {
  children?: React.ReactNode;
  icon?: React.ReactNode;
  type?: MultiChoiceArg<"primary" | "secondary" | "clear" | "noDivider">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  hasIcon?: SingleBooleanChoiceArg<"hasIcon">;
  size?: SingleChoiceArg<"small">;
  className?: string;
}

const $$ = {};

function PlasmicActionMenuButton__RenderFunc(props: {
  variants: PlasmicActionMenuButton__VariantsArgs;
  args: PlasmicActionMenuButton__ArgsType;
  overrides: PlasmicActionMenuButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen,
      },
      {
        path: "hasIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasIcon,
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isActionButtonFocusVisible, triggerActionButtonFocusVisibleProps] =
    useTrigger("useFocusVisible", {
      isTextInput: false,
    });
  const triggers = {
    focusVisible_actionButton: isActionButtonFocusVisible,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothasIcon]: hasVariant($state, "hasIcon", "hasIcon"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.roottype_clear]: hasVariant($state, "type", "clear"),
          [sty.roottype_noDivider]: hasVariant($state, "type", "noDivider"),
          [sty.roottype_noDivider_hasIcon_type_secondary]:
            hasVariant($state, "type", "secondary") &&
            hasVariant($state, "type", "noDivider") &&
            hasVariant($state, "hasIcon", "hasIcon"),
          [sty.roottype_noDivider_type_primary_hasIcon]:
            hasVariant($state, "hasIcon", "hasIcon") &&
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "noDivider"),
          [sty.roottype_primary]: hasVariant($state, "type", "primary"),
          [sty.roottype_primary_hasIcon]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "hasIcon", "hasIcon"),
          [sty.roottype_primary_isOpen]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "isOpen", "isOpen"),
        }
      )}
    >
      <Stack__
        as={"button"}
        data-plasmic-name={"actionButton"}
        data-plasmic-override={overrides.actionButton}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.button,
          sty.actionButton,
          {
            [sty.actionButton___focusVisible]:
              triggers.focusVisible_actionButton,
            [sty.actionButtonhasIcon]: hasVariant($state, "hasIcon", "hasIcon"),
            [sty.actionButtonisOpen]: hasVariant($state, "isOpen", "isOpen"),
            [sty.actionButtonsize_small]: hasVariant($state, "size", "small"),
            [sty.actionButtontype_clear]: hasVariant($state, "type", "clear"),
            [sty.actionButtontype_noDivider]: hasVariant(
              $state,
              "type",
              "noDivider"
            ),
            [sty.actionButtontype_noDivider_hasIcon_type_secondary]:
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "type", "noDivider") &&
              hasVariant($state, "hasIcon", "hasIcon"),
            [sty.actionButtontype_noDivider_type_primary]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "type", "noDivider"),
            [sty.actionButtontype_noDivider_type_primary_hasIcon]:
              hasVariant($state, "type", "noDivider") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "hasIcon", "hasIcon"),
            [sty.actionButtontype_noDivider_type_secondary]:
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "type", "noDivider"),
            [sty.actionButtontype_primary]: hasVariant(
              $state,
              "type",
              "primary"
            ),
            [sty.actionButtontype_primary____focusVisible]:
              hasVariant($state, "type", "primary") &&
              triggers.focusVisible_actionButton,
            [sty.actionButtontype_primary_hasIcon]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "hasIcon", "hasIcon"),
            [sty.actionButtontype_primary_isOpen]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "isOpen", "isOpen"),
            [sty.actionButtontype_secondary]: hasVariant(
              $state,
              "type",
              "secondary"
            ),
          }
        )}
        ref={(ref) => {
          $refs["actionButton"] = ref;
        }}
        data-plasmic-trigger-props={[triggerActionButtonFocusVisibleProps]}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxhasIcon]: hasVariant($state, "hasIcon", "hasIcon"),
            [sty.freeBoxtype_primary_hasIcon]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "hasIcon", "hasIcon"),
          })}
        >
          {(hasVariant($state, "hasIcon", "hasIcon") ? true : false)
            ? renderPlasmicSlot({
                defaultContents: (
                  <PlusSvgIcon
                    className={classNames(projectcss.all, sty.svg__bZnf)}
                    role={"img"}
                  />
                ),

                value: args.icon,
                className: classNames(sty.slotTargetIcon, {
                  [sty.slotTargetIconhasIcon]: hasVariant(
                    $state,
                    "hasIcon",
                    "hasIcon"
                  ),
                  [sty.slotTargetIcontype_clear]: hasVariant(
                    $state,
                    "type",
                    "clear"
                  ),
                  [sty.slotTargetIcontype_noDivider_hasIcon_type_secondary]:
                    hasVariant($state, "type", "secondary") &&
                    hasVariant($state, "type", "noDivider") &&
                    hasVariant($state, "hasIcon", "hasIcon"),
                  [sty.slotTargetIcontype_noDivider_type_primary_hasIcon]:
                    hasVariant($state, "hasIcon", "hasIcon") &&
                    hasVariant($state, "type", "primary") &&
                    hasVariant($state, "type", "noDivider"),
                  [sty.slotTargetIcontype_primary_hasIcon]:
                    hasVariant($state, "type", "primary") &&
                    hasVariant($state, "hasIcon", "hasIcon"),
                }),
              })
            : null}
          {renderPlasmicSlot({
            defaultContents: "Action",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenisOpen]: hasVariant(
                $state,
                "isOpen",
                "isOpen"
              ),
              [sty.slotTargetChildrensize_small]: hasVariant(
                $state,
                "size",
                "small"
              ),
              [sty.slotTargetChildrentype_clear]: hasVariant(
                $state,
                "type",
                "clear"
              ),
              [sty.slotTargetChildrentype_noDivider_type_primary]:
                hasVariant($state, "type", "primary") &&
                hasVariant($state, "type", "noDivider"),
              [sty.slotTargetChildrentype_noDivider_type_primary_hasIcon]:
                hasVariant($state, "hasIcon", "hasIcon") &&
                hasVariant($state, "type", "primary") &&
                hasVariant($state, "type", "noDivider"),
              [sty.slotTargetChildrentype_primary]: hasVariant(
                $state,
                "type",
                "primary"
              ),
              [sty.slotTargetChildrentype_primary_hasIcon]:
                hasVariant($state, "type", "primary") &&
                hasVariant($state, "hasIcon", "hasIcon"),
              [sty.slotTargetChildrentype_primary_isOpen]:
                hasVariant($state, "type", "primary") &&
                hasVariant($state, "isOpen", "isOpen"),
              [sty.slotTargetChildrentype_secondary]: hasVariant(
                $state,
                "type",
                "secondary"
              ),
            }),
          })}
          <ChevronDownSvgIcon
            className={classNames(projectcss.all, sty.svg___09Mtk)}
            role={"img"}
          />
        </Stack__>
      </Stack__>
      <IconButton
        data-plasmic-name={"menuTrigger"}
        data-plasmic-override={overrides.menuTrigger}
        children2={
          <ChevronDownSvgIcon
            className={classNames(projectcss.all, sty.svg__u6RFr)}
            role={"img"}
          />
        }
        className={classNames("__wab_instance", sty.menuTrigger, {
          [sty.menuTriggerhasIcon]: hasVariant($state, "hasIcon", "hasIcon"),
          [sty.menuTriggerisOpen]: hasVariant($state, "isOpen", "isOpen"),
          [sty.menuTriggersize_small]: hasVariant($state, "size", "small"),
          [sty.menuTriggertype_clear]: hasVariant($state, "type", "clear"),
          [sty.menuTriggertype_noDivider]: hasVariant(
            $state,
            "type",
            "noDivider"
          ),
          [sty.menuTriggertype_noDivider_hasIcon_type_secondary]:
            hasVariant($state, "type", "secondary") &&
            hasVariant($state, "type", "noDivider") &&
            hasVariant($state, "hasIcon", "hasIcon"),
          [sty.menuTriggertype_noDivider_type_primary]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "type", "noDivider"),
          [sty.menuTriggertype_noDivider_type_primary_hasIcon]:
            hasVariant($state, "type", "noDivider") &&
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "hasIcon", "hasIcon"),
          [sty.menuTriggertype_noDivider_type_secondary]:
            hasVariant($state, "type", "secondary") &&
            hasVariant($state, "type", "noDivider"),
          [sty.menuTriggertype_primary]: hasVariant($state, "type", "primary"),
          [sty.menuTriggertype_primary_hasIcon]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "hasIcon", "hasIcon"),
          [sty.menuTriggertype_primary_isOpen]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "isOpen", "isOpen"),
        })}
        isActive={hasVariant($state, "isOpen", "isOpen") ? true : undefined}
        size={hasVariant($state, "size", "small") ? "small" : undefined}
        type={
          hasVariant($state, "type", "secondary") &&
          hasVariant($state, "type", "noDivider")
            ? ["noDivider", "secondary"]
            : hasVariant($state, "type", "primary") &&
              hasVariant($state, "type", "noDivider")
            ? ["noDivider", "primary"]
            : hasVariant($state, "type", "noDivider")
            ? ["noDivider", "clear"]
            : hasVariant($state, "type", "clear")
            ? ["dividedRight", "clear"]
            : hasVariant($state, "type", "primary")
            ? ["dividedRight", "primary"]
            : ["dividedRight"]
        }
        withBackgroundHover={
          hasVariant($state, "type", "secondary") &&
          hasVariant($state, "type", "noDivider")
            ? undefined
            : hasVariant($state, "type", "noDivider")
            ? true
            : undefined
        }
      >
        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "isOpen", "isOpen")
              ? ChevronUpSvgIcon
              : ChevronDownSvgIcon
          }
          className={classNames(projectcss.all, sty.svg__fvWlj, {
            [sty.svghasIcon__fvWlJnjBtd]: hasVariant(
              $state,
              "hasIcon",
              "hasIcon"
            ),
            [sty.svgisOpen__fvWlJzsff0]: hasVariant($state, "isOpen", "isOpen"),
            [sty.svgsize_small__fvWljBbCuj]: hasVariant(
              $state,
              "size",
              "small"
            ),
            [sty.svgsize_small_type_noDivider_type_primary_hasIcon__fvWljBbCujDEvrtDx7IWNjBtd]:
              hasVariant($state, "hasIcon", "hasIcon") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "type", "noDivider") &&
              hasVariant($state, "size", "small"),
            [sty.svgtype_clear__fvWljRdVzV]: hasVariant(
              $state,
              "type",
              "clear"
            ),
            [sty.svgtype_noDivider_type_primary__fvWljdEvrtDx7IW]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "type", "noDivider"),
            [sty.svgtype_noDivider_type_primary_hasIcon__fvWljdEvrtDx7IWNjBtd]:
              hasVariant($state, "type", "noDivider") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "hasIcon", "hasIcon"),
            [sty.svgtype_primary__fvWlJdx7IW]: hasVariant(
              $state,
              "type",
              "primary"
            ),
            [sty.svgtype_primary_hasIcon__fvWlJdx7IWNjBtd]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "hasIcon", "hasIcon"),
            [sty.svgtype_primary_isOpen__fvWlJdx7IWZsff0]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "isOpen", "isOpen"),
          })}
          role={"img"}
        />
      </IconButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "actionButton", "freeBox", "menuTrigger"],
  actionButton: ["actionButton", "freeBox"],
  freeBox: ["freeBox"],
  menuTrigger: ["menuTrigger"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  actionButton: "button";
  freeBox: "div";
  menuTrigger: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionMenuButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActionMenuButton__VariantsArgs;
    args?: PlasmicActionMenuButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActionMenuButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActionMenuButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicActionMenuButton__ArgProps,
          internalVariantPropNames: PlasmicActionMenuButton__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicActionMenuButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionMenuButton";
  } else {
    func.displayName = `PlasmicActionMenuButton.${nodeName}`;
  }
  return func;
}

export const PlasmicActionMenuButton = Object.assign(
  // Top-level PlasmicActionMenuButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    actionButton: makeNodeComponent("actionButton"),
    freeBox: makeNodeComponent("freeBox"),
    menuTrigger: makeNodeComponent("menuTrigger"),

    // Metadata about props expected for PlasmicActionMenuButton
    internalVariantProps: PlasmicActionMenuButton__VariantProps,
    internalArgProps: PlasmicActionMenuButton__ArgProps,
  }
);

export default PlasmicActionMenuButton;
/* prettier-ignore-end */
