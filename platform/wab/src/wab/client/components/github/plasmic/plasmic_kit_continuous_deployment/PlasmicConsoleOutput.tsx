/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpbcKyXdMTvY59T4C5fjcC
// Component: 8dA5vGT9N9E

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../../../../plasmic/PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../../../../plasmic/plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../../../modals/plasmic/plasmic_kit_project_settings/plasmic_plasmic_kit_project_settings.module.css"; // plasmic-import: fpbcKyXdMTvY59T4C5fjcC/projectcss
import sty from "./PlasmicConsoleOutput.module.css"; // plasmic-import: 8dA5vGT9N9E/css

createPlasmicElementProxy;

export type PlasmicConsoleOutput__VariantMembers = {
  hidden: "hidden";
};
export type PlasmicConsoleOutput__VariantsArgs = {
  hidden?: SingleBooleanChoiceArg<"hidden">;
};
type VariantPropType = keyof PlasmicConsoleOutput__VariantsArgs;
export const PlasmicConsoleOutput__VariantProps = new Array<VariantPropType>(
  "hidden"
);

export type PlasmicConsoleOutput__ArgsType = { output?: React.ReactNode };
type ArgPropType = keyof PlasmicConsoleOutput__ArgsType;
export const PlasmicConsoleOutput__ArgProps = new Array<ArgPropType>("output");

export type PlasmicConsoleOutput__OverridesType = {
  root?: Flex__<"div">;
  outputBox?: Flex__<"div">;
};

export interface DefaultConsoleOutputProps {
  output?: React.ReactNode;
  hidden?: SingleBooleanChoiceArg<"hidden">;
  className?: string;
}

const $$ = {};

function PlasmicConsoleOutput__RenderFunc(props: {
  variants: PlasmicConsoleOutput__VariantsArgs;
  args: PlasmicConsoleOutput__ArgsType;
  overrides: PlasmicConsoleOutput__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hidden",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hidden,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    (hasVariant($state, "hidden", "hidden") ? false : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_plasmic_kit_design_system_css.plasmic_tokens,
          plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
          sty.root,
          { [sty.roothidden]: hasVariant($state, "hidden", "hidden") }
        )}
      >
        <div
          data-plasmic-name={"outputBox"}
          data-plasmic-override={overrides.outputBox}
          className={classNames(projectcss.all, sty.outputBox)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hUYoL
                )}
              >
                {
                  '$ plasmic sync --projects "cdwhVWs57jCQsvo9GniSFA@0.0.2" --yes\nNo plasmic.json file found. Initializing plasmic...\nSuccessfully created plasmic.json.\n\n@plasmicapp/react-web is a small runtime required by Plasmic-generated code.\n  Do you want to add it now? (Y/n): y\nyarn add -W @plasmicapp/react-web\nyarn add v1.22.10\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@2.1.3: The platform "linux" is incompatible with this module.\ninfo "fsevents@2.1.3" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@2.3.1: The platform "linux" is incompatible with this module.\ninfo "fsevents@2.3.1" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform "linux" is incompatible with this module.\ninfo "fsevents@1.2.13" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\n[4/4] Building fresh packages...\n\nsuccess Saved 1 new dependency.\ninfo Direct dependencies\n\u2514\u2500 @plasmicapp/react-web@0.2.16\ninfo All dependencies\n\u2514\u2500 @plasmicapp/react-web@0.2.16\nDone in 3.63s.\nSuccessfully added @plasmicapp/react-web dependency.\n\'The real Plasmic project 1 has never been synced before. Syncing...\'\nSyncing component: NewComponent@0.0.2\t[\'The real Plasmic project 1\' cdwhVWs57jCQsvo9GniSFA/K9N6wXetOj >=0.0.0]\nFixing import statements...\n\nYour Plasmic project "The real Plasmic project 1" has now been synced to disk.'
                }
              </div>
            ),
            value: args.output,
            className: classNames(sty.slotTargetOutput),
          })}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "outputBox"],
  outputBox: ["outputBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  outputBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConsoleOutput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConsoleOutput__VariantsArgs;
    args?: PlasmicConsoleOutput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConsoleOutput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConsoleOutput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConsoleOutput__ArgProps,
          internalVariantPropNames: PlasmicConsoleOutput__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicConsoleOutput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConsoleOutput";
  } else {
    func.displayName = `PlasmicConsoleOutput.${nodeName}`;
  }
  return func;
}

export const PlasmicConsoleOutput = Object.assign(
  // Top-level PlasmicConsoleOutput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    outputBox: makeNodeComponent("outputBox"),

    // Metadata about props expected for PlasmicConsoleOutput
    internalVariantProps: PlasmicConsoleOutput__VariantProps,
    internalArgProps: PlasmicConsoleOutput__ArgProps,
  }
);

export default PlasmicConsoleOutput;
/* prettier-ignore-end */
