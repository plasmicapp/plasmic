// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { useRRouteMatch } from "@/wab/client/cli-routes";
import {
  useCmsDatabase,
  useMutateDatabase,
} from "@/wab/client/components/cms/cms-contexts";
import Button from "@/wab/client/components/widgets/Button";
import Textbox from "@/wab/client/components/widgets/Textbox";
import { useApi } from "@/wab/client/contexts/AppContexts";
import {
  DefaultCmsSettingsPageProps,
  PlasmicCmsSettingsPage,
} from "@/wab/client/plasmic/plasmic_kit_cms/PlasmicCmsSettingsPage";
import { ApiCmsDatabase } from "@/wab/shared/ApiSchema";
import { APP_ROUTES } from "@/wab/shared/route/app-routes";
import { fillRoute } from "@/wab/shared/route/route";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { Form, notification } from "antd";
import copy from "copy-to-clipboard";
import * as React from "react";

export type CmsSettingsPageProps = DefaultCmsSettingsPageProps;

function CmsSettingsPage_(
  props: CmsSettingsPageProps,
  ref: HTMLElementRefOf<"div">
) {
  const match = useRRouteMatch(APP_ROUTES.cmsSettings);
  const database = useCmsDatabase(match?.params.databaseId);
  const api = useApi();
  const mutateDatabase = useMutateDatabase();
  const [submitting, setSubmitting] = React.useState(false);
  const [duplicating, setDuplicating] = React.useState(false);

  if (!database) {
    return null;
  }
  const databaseId = database.id;
  return (
    <Form
      className="fill-width max-scrollable"
      layout="vertical"
      labelCol={{ span: 8 }}
      wrapperCol={{ span: 16 }}
      initialValues={database}
      onFinish={async (values: ApiCmsDatabase) => {
        console.log("Form Values", values);
        if (
          new Set(values.extraData.locales).size <
          values.extraData.locales.length
        ) {
          notification.error({
            message: "Locales must all be distinct",
          });
          return;
        }

        setSubmitting(true);
        await api.updateCmsDatabase(databaseId, values);
        await mutateDatabase(databaseId);
        setSubmitting(false);
        notification.success({
          message: "Successfully saved changes",
        });
      }}
    >
      <PlasmicCmsSettingsPage
        root={{ ref }}
        {...props}
        details={`${database?.tables.length ?? 0} models`}
        saveButton={{
          htmlType: "submit",
          disabled: submitting,
          children: submitting ? "Saving..." : "Save",
        }}
        duplicateButton={{
          htmlType: "button",
          disabled: duplicating,
          children: duplicating ? "Duplicating..." : "Duplicate CMS Schema",
          onClick: async () => {
            setDuplicating(true);
            try {
              const newCmsDatabase = await api.cloneCmsDatabase(databaseId);
              notification.success({
                message: "CMS schema duplicated successfully.",
                duration: 4000,
                btn: (
                  <Button
                    type="link"
                    onClick={() => {
                      window.location.href = fillRoute(APP_ROUTES.cmsSettings, {
                        databaseId: newCmsDatabase.id,
                      });
                    }}
                  >
                    Go to new CMS
                  </Button>
                ),
              });
            } catch (err) {
              notification.error({
                message: "Failed to duplicate CMS",
              });
            } finally {
              setDuplicating(false);
            }
          },
        }}
        content={
          <div className="vlist-gap-xlg fill-width">
            <Form.Item name={"databaseId"} label={<strong>CMS ID</strong>}>
              <CopiableCode text={databaseId} name={"databaseId"} />
            </Form.Item>
            <Form.Item
              name={"publicToken"}
              label={<strong>Public Token</strong>}
            >
              <CopiableCode
                text={database?.publicToken ?? ""}
                name={"publicToken"}
              />
            </Form.Item>
            <Form.Item
              name={"secretToken"}
              label={<strong>Secret Token</strong>}
            >
              <CopiableCode
                hide
                text={database?.secretToken ?? ""}
                name={"secretToken"}
              />
            </Form.Item>
            <Form.Item label={<strong>Locales</strong>}>
              <Form.List name={["extraData", "locales"]}>
                {(fields, handles) => (
                  <div className={"vlist-gap-xlg"}>
                    <Textbox
                      styleType={"bordered"}
                      disabled
                      value={"Default"}
                    />
                    {fields.map(({ key, name, ...restField }) => (
                      <div
                        style={{
                          display: "grid",
                          gridTemplateColumns: "1fr auto",
                        }}
                      >
                        <Form.Item
                          key={key}
                          name={name}
                          {...restField}
                          noStyle
                          rules={[
                            {
                              required: true,
                              message: "Locales cannot be blank",
                            },
                          ]}
                        >
                          <Textbox styleType={"bordered"} />
                        </Form.Item>
                        <Button
                          htmlType={"button"}
                          onClick={() => handles.remove(name)}
                        >
                          Remove
                        </Button>
                      </div>
                    ))}
                    <div>
                      <Button
                        onClick={() => handles.add("")}
                        htmlType={"button"}
                      >
                        Add locale
                      </Button>
                    </div>
                  </div>
                )}
              </Form.List>
            </Form.Item>
          </div>
        }
      />
    </Form>
  );
}

function CopiableCode(props: { text: string; hide?: boolean; name?: string }) {
  const { hide, text, name } = props;
  return (
    <div className={"fill-width flex flex-vcenter"}>
      <code
        style={{
          whiteSpace: "nowrap",
          textOverflow: "ellipsis",
          overflow: "hidden",
        }}
        data-test-id={name}
      >
        {hide ? "\u2022".repeat(text.length) : text}
      </code>
      <Button
        className="ml-m"
        size="small"
        type="secondary"
        htmlType="button"
        style={{
          flexShrink: 0,
        }}
        onClick={(event) => {
          event.preventDefault();
          event.stopPropagation();
          copy(text);
        }}
      >
        Copy
      </Button>
    </div>
  );
}

const CmsSettingsPage = React.forwardRef(CmsSettingsPage_);
export default CmsSettingsPage;
