// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { UU } from "@/wab/client/cli-routes";
import {
  useCmsTable,
  useMutateTableRows,
} from "@/wab/client/components/cms/cms-contexts";
import CmsEntryItem from "@/wab/client/components/cms/CmsEntryItem";
import { Spinner } from "@/wab/client/components/widgets";
import { useApi } from "@/wab/client/contexts/AppContexts";
import {
  DefaultCmsEntriesListProps,
  PlasmicCmsEntriesList,
} from "@/wab/client/plasmic/plasmic_kit_cms/PlasmicCmsEntriesList";
import { ApiCmseRow, CmsDatabaseId, CmsTableId } from "@/wab/shared/ApiSchema";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import fastStringify from "fast-stringify";
import { debounce } from "lodash";
import * as React from "react";
import { useHistory, useRouteMatch } from "react-router";

export interface CmsEntriesListProps extends DefaultCmsEntriesListProps {
  rows?: ApiCmseRow[];
}

function CmsEntriesList_(
  props: CmsEntriesListProps,
  ref: HTMLElementRefOf<"div">
) {
  const { rows, ...rest } = props;
  const api = useApi();
  const history = useHistory();
  const match = useRouteMatch<{
    databaseId: CmsDatabaseId;
    tableId: CmsTableId;
  }>();
  const { databaseId, tableId } = match.params;
  const table = useCmsTable(databaseId, tableId);
  const mutateTableRows = useMutateTableRows();
  const [query, setQuery] = React.useState("");
  const [debouncedQuery, setDebouncedQuery] = React.useState("");

  const filteredRows = React.useMemo(() => {
    if (!rows) {
      return [];
    }
    const hasQuery = !!debouncedQuery && debouncedQuery.trim().length > 0;
    const normQuery = debouncedQuery.toLowerCase();
    return hasQuery
      ? rows?.filter((row) =>
          fastStringify(Object.values(row)).toLowerCase().includes(normQuery)
        )
      : rows;
  }, [rows, debouncedQuery]);

  const debouncedSetQuery = React.useCallback(
    debounce((q: string) => {
      setDebouncedQuery(q);
    }, 300),
    [setDebouncedQuery]
  );

  if (!rows || !table) {
    return <Spinner />;
  }

  return (
    <PlasmicCmsEntriesList
      {...rest}
      root={{ ref }}
      modelName={table.name}
      searchInput={{
        value: query,
        onChange: (e) => {
          setQuery(e.target.value);
          debouncedSetQuery(e.target.value);
        },
      }}
      children={
        <>
          {filteredRows.map((row) => (
            <CmsEntryItem table={table} row={row} key={row.id} />
          ))}
        </>
      }
      addButton={{
        tooltip: "Add new entry",
        "data-test-id": "addEntryButton",
        onClick: async () => {
          const row = await api.createCmsRow(tableId, {
            identifier: undefined,
            data: null,
            draftData: { "": {} },
          });
          await mutateTableRows(tableId);
          history.push(
            UU.cmsEntry.fill({
              databaseId,
              tableId,
              rowId: row.id,
            })
          );
        },
      }}
    />
  );
}

const CmsEntriesList = React.forwardRef(CmsEntriesList_);
export default CmsEntriesList;
