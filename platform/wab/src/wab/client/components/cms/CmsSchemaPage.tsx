// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { useRRouteMatch } from "@/wab/client/cli-routes";
import { useCmsDatabase } from "@/wab/client/components/cms/cms-contexts";
import {
  DefaultCmsSchemaPageProps,
  PlasmicCmsSchemaPage,
} from "@/wab/client/plasmic/plasmic_kit_cms/PlasmicCmsSchemaPage";
import { APP_ROUTES } from "@/wab/shared/route/app-routes";
import { fillRoute } from "@/wab/shared/route/route";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import * as React from "react";
import { Redirect, Route, Switch } from "react-router";
export type CmsSchemaPageProps = DefaultCmsSchemaPageProps;

function CmsSchemaPage_(
  props: CmsSchemaPageProps,
  ref: HTMLElementRefOf<"div">
) {
  const m = useRRouteMatch(APP_ROUTES.cmsSchemaRoot);
  const database = useCmsDatabase(m?.params.databaseId);
  if (!m || !database) {
    return null;
  }

  // Sort to make archived tables last on the list
  // Sorting by id to make it stable.
  const tables = database.tables.sort((a, b) =>
    a.isArchived == b.isArchived
      ? b.id.localeCompare(a.id)
      : a.isArchived
      ? 1
      : -1
  );
  return (
    <Switch>
      <Route
        path={APP_ROUTES.cmsModelSchema.pattern}
        render={({ match }) => {
          if (!tables.find((t) => t.id === match.params.tableId)) {
            return (
              <Redirect
                to={fillRoute(APP_ROUTES.cmsSchemaRoot, {
                  databaseId: match.params.databaseId,
                })}
              />
            );
          } else {
            return (
              <PlasmicCmsSchemaPage
                root={{ ref }}
                {...props}
                cmsModelDetails={{ key: match.params.tableId }}
              />
            );
          }
        }}
      />
      <Route
        path={APP_ROUTES.cmsSchemaRoot.pattern}
        render={({ match }) => {
          if (tables.length > 0) {
            return (
              <Redirect
                to={fillRoute(APP_ROUTES.cmsModelSchema, {
                  ...match.params,
                  tableId: tables[0].id,
                })}
              />
            );
          } else {
            return (
              <PlasmicCmsSchemaPage root={{ ref }} {...props} noModels={true} />
            );
          }
        }}
      />
    </Switch>
  );
}

const CmsSchemaPage = React.forwardRef(CmsSchemaPage_);
export default CmsSchemaPage;
