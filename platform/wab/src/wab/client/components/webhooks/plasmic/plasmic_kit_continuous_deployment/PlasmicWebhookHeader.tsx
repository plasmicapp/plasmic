/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpbcKyXdMTvY59T4C5fjcC
// Component: OkB-fXuJPc

import * as React from "react";

import {
  Flex as Flex__,
  SingleBooleanChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../../../widgets/IconButton"; // plasmic-import: LPry-TF4j22a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_design_system_css from "../../../../plasmic/PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import plasmic_plasmic_kit_color_tokens_css from "../../../../plasmic/plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../../../modals/plasmic/plasmic_kit_project_settings/plasmic_plasmic_kit_project_settings.module.css"; // plasmic-import: fpbcKyXdMTvY59T4C5fjcC/projectcss
import sty from "./PlasmicWebhookHeader.module.css"; // plasmic-import: OkB-fXuJPc/css

import PlusIcon from "../../../../plasmic/plasmic_kit/PlasmicIcon__Plus"; // plasmic-import: -k064DlQ8k8-L/icon
import TrashIcon from "../../../../plasmic/plasmic_kit/PlasmicIcon__Trash"; // plasmic-import: 7bxap5bzcUODa/icon
import ChevronDownSvgIcon from "../../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon

createPlasmicElementProxy;

export type PlasmicWebhookHeader__VariantMembers = {
  showAdd: "showAdd";
  hideDelete: "hideDelete";
};
export type PlasmicWebhookHeader__VariantsArgs = {
  showAdd?: SingleBooleanChoiceArg<"showAdd">;
  hideDelete?: SingleBooleanChoiceArg<"hideDelete">;
};
type VariantPropType = keyof PlasmicWebhookHeader__VariantsArgs;
export const PlasmicWebhookHeader__VariantProps = new Array<VariantPropType>(
  "showAdd",
  "hideDelete"
);

export type PlasmicWebhookHeader__ArgsType = {};
type ArgPropType = keyof PlasmicWebhookHeader__ArgsType;
export const PlasmicWebhookHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicWebhookHeader__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  keyInput?: Flex__<"input">;
  valueInput?: Flex__<"input">;
  addButton?: Flex__<typeof IconButton>;
  deleteButton?: Flex__<typeof IconButton>;
};

export interface DefaultWebhookHeaderProps {
  showAdd?: SingleBooleanChoiceArg<"showAdd">;
  hideDelete?: SingleBooleanChoiceArg<"hideDelete">;
  className?: string;
}

const $$ = {};

function PlasmicWebhookHeader__RenderFunc(props: {
  variants: PlasmicWebhookHeader__VariantsArgs;
  args: PlasmicWebhookHeader__ArgsType;
  overrides: PlasmicWebhookHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showAdd",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showAdd,
      },
      {
        path: "hideDelete",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideDelete,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothideDelete]: hasVariant($state, "hideDelete", "hideDelete"),
          [sty.rootshowAdd_hideDelete]:
            hasVariant($state, "hideDelete", "hideDelete") &&
            hasVariant($state, "showAdd", "showAdd"),
        }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Header"}
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ynHvD)}
      >
        <input
          data-plasmic-name={"keyInput"}
          data-plasmic-override={overrides.keyInput}
          className={classNames(projectcss.all, projectcss.input, sty.keyInput)}
          placeholder={"Enter key…"}
          ref={(ref) => {
            $refs["keyInput"] = ref;
          }}
          size={1}
          type={"text"}
          value={""}
        />

        <input
          data-plasmic-name={"valueInput"}
          data-plasmic-override={overrides.valueInput}
          className={classNames(
            projectcss.all,
            projectcss.input,
            sty.valueInput
          )}
          placeholder={"Enter value…"}
          ref={(ref) => {
            $refs["valueInput"] = ref;
          }}
          size={1}
          type={"text"}
          value={""}
        />
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__pVez5, {
          [sty.freeBoxhideDelete__pVez5OQpov]: hasVariant(
            $state,
            "hideDelete",
            "hideDelete"
          ),
          [sty.freeBoxshowAdd__pVez5RbWrK]: hasVariant(
            $state,
            "showAdd",
            "showAdd"
          ),
          [sty.freeBoxshowAdd_hideDelete__pVez5RbWrKOQpov]:
            hasVariant($state, "hideDelete", "hideDelete") &&
            hasVariant($state, "showAdd", "showAdd"),
        })}
      >
        {(hasVariant($state, "showAdd", "showAdd") ? true : false) ? (
          <IconButton
            data-plasmic-name={"addButton"}
            data-plasmic-override={overrides.addButton}
            children2={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__k0Jtn)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.addButton, {
              [sty.addButtonshowAdd]: hasVariant($state, "showAdd", "showAdd"),
            })}
            size={"vertical"}
          >
            <PlusIcon
              className={classNames(projectcss.all, sty.svg__wtQm)}
              role={"img"}
            />
          </IconButton>
        ) : null}
        {(hasVariant($state, "hideDelete", "hideDelete") ? false : true) ? (
          <IconButton
            data-plasmic-name={"deleteButton"}
            data-plasmic-override={overrides.deleteButton}
            children2={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__sAyTq)}
                role={"img"}
              />
            }
            className={classNames("__wab_instance", sty.deleteButton, {
              [sty.deleteButtonhideDelete]: hasVariant(
                $state,
                "hideDelete",
                "hideDelete"
              ),
              [sty.deleteButtonshowAdd_hideDelete]:
                hasVariant($state, "hideDelete", "hideDelete") &&
                hasVariant($state, "showAdd", "showAdd"),
            })}
            size={"vertical"}
          >
            <TrashIcon
              className={classNames(projectcss.all, sty.svg__jTAbX)}
              role={"img"}
            />
          </IconButton>
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "keyInput", "valueInput", "addButton", "deleteButton"],
  text: ["text"],
  keyInput: ["keyInput"],
  valueInput: ["valueInput"],
  addButton: ["addButton"],
  deleteButton: ["deleteButton"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  keyInput: "input";
  valueInput: "input";
  addButton: typeof IconButton;
  deleteButton: typeof IconButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWebhookHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWebhookHeader__VariantsArgs;
    args?: PlasmicWebhookHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWebhookHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWebhookHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWebhookHeader__ArgProps,
          internalVariantPropNames: PlasmicWebhookHeader__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicWebhookHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWebhookHeader";
  } else {
    func.displayName = `PlasmicWebhookHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicWebhookHeader = Object.assign(
  // Top-level PlasmicWebhookHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    keyInput: makeNodeComponent("keyInput"),
    valueInput: makeNodeComponent("valueInput"),
    addButton: makeNodeComponent("addButton"),
    deleteButton: makeNodeComponent("deleteButton"),

    // Metadata about props expected for PlasmicWebhookHeader
    internalVariantProps: PlasmicWebhookHeader__VariantProps,
    internalArgProps: PlasmicWebhookHeader__ArgProps,
  }
);

export default PlasmicWebhookHeader;
/* prettier-ignore-end */
