// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { MarkdownHintsPopoverContent } from "@/wab/client/components/comments/MarkdownHintsPopoverContent";
import { Popover } from "@/wab/client/components/plexus/Popover";
import { useShareDialog } from "@/wab/client/components/top-bar/useShareDialog";
import { useUserMentions } from "@/wab/client/components/user-mentions/useUserMentions";
import {
  DefaultCommentPostFormProps,
  PlasmicCommentPostForm,
} from "@/wab/client/plasmic/plasmic_kit_comments/PlasmicCommentPostForm";
import { isSubmitKeyCombo } from "@/wab/client/shortcuts/shortcut";
import { StandardMarkdown } from "@/wab/client/utils/StandardMarkdown";
import { spawn } from "@/wab/shared/common";
import { observer } from "mobx-react";
import * as React from "react";
import { useState } from "react";
import ReactDOM from "react-dom";

export type CommentPostFormProps = DefaultCommentPostFormProps & {
  /** ID for the input element. */
  id: string;
  defaultValue: string;
  onChange?: (value: string) => void;
  onCancel?: () => void;
  onSubmit?: (value: string) => void;
};

const CommentPostForm = observer(function CommentPostForm(
  props: CommentPostFormProps
) {
  const { id, defaultValue, onSubmit, onCancel, isEditing, onChange, ...rest } =
    props;
  const [value, setValue] = useState(defaultValue);
  const [isPreviewing, setIsPreviewing] = React.useState(false);

  const inputElementId = `comment-post-input-${id}`;

  const {
    onKeyHandler: onMentionKeyHandler,
    onSelectHandler,
    userMentionsPopover,
    handleMentionClick,
  } = useUserMentions({
    value,
    inputSelector: `#${inputElementId}`,
  });

  const { openShareDialog } = useShareDialog();

  function isValidComment() {
    const trimmedValue = value.trim();
    if (trimmedValue.length === 0) {
      return false;
    }
    if (isEditing && trimmedValue === defaultValue.trim()) {
      return false;
    }
    return true;
  }

  const onKeyHandler = (e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (isSubmitKeyCombo(e)) {
      e.preventDefault();
      if (isValidComment()) {
        spawn(handleSubmit());
      }
      return;
    }

    onMentionKeyHandler(e);
  };

  const handleSubmit = async () => {
    setValue("");
    onSubmit?.(value);
    setIsPreviewing(false);
  };

  return (
    <>
      <PlasmicCommentPostForm
        {...rest}
        isPreviewing={isPreviewing}
        isEditing={isEditing}
        body={<StandardMarkdown>{value}</StandardMarkdown>}
        bodyInput={{
          autoComplete: "off",
          placeholder: "Add a comment",
          textAreaInput: {
            props: {
              id: inputElementId,
              rows: 5,
              type: "soft",
              "data-test-id": "comment-post-text-area",
            },
          },
          value,
          onChange: (val) => {
            if (val === undefined) {
              // Plexus Input triggers onChange with undefined on first render even if we pass a controlled value
              setValue(defaultValue);
            } else {
              setValue(val);
              if (onChange) {
                onChange(val);
              }
            }
          },
          onKeyDown: onKeyHandler,
          onSelect: onSelectHandler,
        }}
        submitButton={{
          props: {
            onClick: handleSubmit,
            disabled: !isValidComment(),
            "data-test-id": "comment-post-submit-button",
          },
        }}
        cancelButton={{
          onClick: () => {
            onCancel?.();
          },
        }}
        previewButton={{
          onClick: () => {
            setIsPreviewing(!isPreviewing);
          },
          disabled: value.trim().length === 0,
        }}
        markdownHintsIcon={{
          render: (iconProps, HintIconComponent) => {
            return (
              <Popover
                trigger={<HintIconComponent {...iconProps} />}
                content={<MarkdownHintsPopoverContent />}
                offset={0}
                placement={"bottom"}
              />
            );
          },
        }}
        mentionIcon={{
          onClick: () => {
            handleMentionClick();
          },
        }}
        shareProjectIcon={{
          onClick: () => {
            openShareDialog();
          },
        }}
      />
      {ReactDOM.createPortal(userMentionsPopover, document.body)}
    </>
  );
});

export default CommentPostForm;
