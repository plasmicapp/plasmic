// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import {
  codegenTypeToRoute,
  useDocsPortalCtx,
} from "@/wab/client/components/docs/DocsPortalCtx";
import { PublicLink } from "@/wab/client/components/PublicLink";
import { replaceLink } from "@/wab/client/components/view-common";
import {
  DefaultDocsPortalIntroProps,
  PlasmicDocsPortalIntro,
} from "@/wab/client/plasmic/plasmic_kit_docs_portal/PlasmicDocsPortalIntro";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { APP_ROUTES } from "@/wab/shared/route/app-routes";
import { fillRoute } from "@/wab/shared/route/route";
import * as React from "react";
import { DetailedHTMLProps } from "react";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface DocsPortalIntroProps extends Omit<DefaultDocsPortalIntroProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultDocsPortalIntroProps altogether and have
// total control over the props for your component.
type DocsPortalIntroProps = DefaultDocsPortalIntroProps;

function oppCodegenType(codegenType: "loader" | "codegen") {
  return codegenType === "loader" ? "codegen" : "cms";
}

function DocsPortalIntro(props: DocsPortalIntroProps) {
  // Use PlasmicDocsPortalIntro to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicDocsPortalIntro are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, we are just piping all DocsPortalIntroProps here, but feel free
  // to do whatever works for you.
  const studioCtx = useStudioCtx();
  const docsPortalCtx = useDocsPortalCtx();
  const projectId = studioCtx.siteInfo.id;

  function _replaceLink(
    // eslint-disable-next-line @typescript-eslint/no-shadow
    props: DetailedHTMLProps<
      React.HTMLAttributes<HTMLDivElement>,
      HTMLDivElement
    >
  ) {
    return replaceLink(props, (linkText) => (
      <PublicLink
        href={fillRoute(APP_ROUTES.projectDocsCodegenType, {
          projectId,
          codegenType: codegenTypeToRoute(
            oppCodegenType(docsPortalCtx.getCodegenType())
          ),
        })}
      >
        {linkText}
      </PublicLink>
    ));
  }

  return (
    <PlasmicDocsPortalIntro
      {...props}
      nextConfig={{
        children: `
// next.config.js
const plasmic = require("@plasmicapp/loader/next");


const withPlasmic = plasmic({
  projects: ["${projectId}"],
});


module.exports = withPlasmic({
  // Your NextJS config.
});`,
      }}
      gatsbyConfig={{
        children: `
        // gatsby-config.js
module.exports = {
  plugins: [
    {
      resolve: "@plasmicapp/loader/gatsby",
      options: {
        projects: ["${projectId}",
      },
    },
  ],
};
        `,
      }}
      introText={{
        // eslint-disable-next-line @typescript-eslint/no-shadow
        render: (props) => _replaceLink(props),
      }}
      introText2={{
        // eslint-disable-next-line @typescript-eslint/no-shadow
        render: (props) => _replaceLink(props),
      }}
      loaderv2Config={{
        children: `
// replace it by loader-nextjs or loader-gatsby depending on what you are using
import {
  PlasmicComponent,
  PlasmicRootProvider,
  initPlasmicLoader
} from '@plasmicapp/loader-react';


const loader = initPlasmicLoader({
  projects: [{
    id: "${projectId}",
    token:
      "${studioCtx.siteInfo.projectApiToken}",
  }],
});


function MyExistingPage() {
  // Use hooks to fetch data, read from React context, etc.
  const user = useUser();


  return (
    <PlasmicRootProvider loader={loader}>
      <PlasmicComponent
        component="Header"
        componentProps={{
          // Fill slots with the right values
          userName: user.email,
          email: user.name,


          // Toggle the variants you want
          isLogged: !user.isAnonymous,


          // Override the avatar img element with the right src
          avatar: {
            src: user.profileImgSrc
          }


          // Add onClick handler to the login button
          login: {
            onClick: () => navigateToLogin(),
          }
        }}
      />
    </PlasmicRootProvider>
  );
}
        `,
      }}
    />
  );
}

export default DocsPortalIntro;
