// This is a skeleton starter React component generated by Plasmic.
// Feel free to edit as you see fit.
import { ClickStopper } from "@/wab/client/components/widgets";
import { Icon } from "@/wab/client/components/widgets/Icon";
import { useAppCtx } from "@/wab/client/contexts/AppContexts";
import EyeIcon from "@/wab/client/plasmic/plasmic_kit/PlasmicIcon__Eye";
import {
  PlasmicStarterProject,
  PlasmicStarterProject__VariantsArgs,
} from "@/wab/client/plasmic/plasmic_kit/PlasmicStarterProject";
import { WorkspaceId } from "@/wab/shared/ApiSchema";
import { getExtraData, updateExtraDataJson } from "@/wab/shared/ApiSchemaUtil";
import { ensure, interleave, unexpected } from "@/wab/shared/common";
import { APP_ROUTES } from "@/wab/shared/route/app-routes";
import { fillRoute } from "@/wab/shared/route/route";
import { Tooltip } from "antd";
import L from "lodash";
import React, { ReactNode } from "react";
import { useHistory } from "react-router-dom";

interface StarterProjectProps {
  name: string;
  type?: PlasmicStarterProject__VariantsArgs["type"];
  // className prop is required for positioning instances of
  // this Component
  className?: string;

  /**
   * The project to clone from.
   */
  projectId?: string;
  /**
   * The project whose latest published version to clone from
   */
  baseProjectId?: string;
  tag: string;
  descrip: string;
  icon?: ReactNode;
  imageUrl?: string;
  href?: string;
  author?: string;
  authorLink?: string;
  showPreview?: boolean;
  // Workspace to create project in.
  workspaceId?: WorkspaceId;
  withDropShadow?: boolean;
  cloneWithoutName?: boolean;
}

function StarterProject(props: StarterProjectProps) {
  const appCtx = useAppCtx();
  const history = useHistory();
  const name = props.name;
  const decoratedName = name.includes("Plasmic Levels") ? (
    <div className={"flex-row"}>
      {interleave(
        name
          .split("Plasmic Levels")
          .map((text, i) => <span key={i}>{text}</span>),
        [
          <span key={"game"} className={"game-name"}>
            Plasmic Levels
          </span>,
        ]
      )}
    </div>
  ) : (
    name
  );
  const isChecked =
    props.type &&
    getExtraData(
      ensure(appCtx.selfInfo, "Must be logged in")
    ).starterProgress.includes(props.tag);

  function renderAuthor() {
    if (!props.author) {
      return null;
    }
    return (
      <span style={{ fontWeight: "normal" }}>
        {" "}
        by{" "}
        <ClickStopper passthrough>
          <a target={"_blank"} href={props.authorLink}>
            {props.author}
          </a>
        </ClickStopper>
      </span>
    );
  }

  const hasProject = !!props.projectId || !!props.baseProjectId;

  return (
    <PlasmicStarterProject
      variants={{
        type: props.type,
        icon: !!props.icon || isChecked ? "withIcon" : undefined,
        image: !!props.imageUrl || !hasProject ? "withImage" : undefined,
      }}
      args={{
        instruction: props.descrip,
        name: (
          <span>
            {decoratedName}
            {renderAuthor()}
          </span>
        ),
        children: isChecked
          ? undefined // default icon is a check mark
          : props.icon,
      }}
      withDescrip={!!props.type}
      withDropShadow={props.withDropShadow}
      showPreview={props.showPreview}
      previewIcon={
        <Tooltip title="Preview page in new window">
          <Icon
            icon={EyeIcon}
            onClick={(e) => {
              window.open(
                "https://plasmic.app/templates/" + props.tag,
                "_blank"
              );
              e.stopPropagation();
            }}
          />
        </Tooltip>
      }
      {...(props.imageUrl
        ? {
            preview: (
              <img
                style={{
                  position: "relative",
                  width: "100%",
                  height: "100%",
                  objectPosition: "center top",
                  objectFit: "cover",
                  minWidth: 0,
                  minHeight: 0,
                }}
                role={"img"}
                src={props.imageUrl}
              />
            ),
          }
        : {})}
      root={
        // className prop needs to be piped to the root element of this component
        {
          className: props.className,

          onClick: async () => {
            if (!hasProject && !props.href) {
              return appCtx.api
                .createSite(props.workspaceId)
                .then(({ project }) => {
                  history.push(
                    fillRoute(APP_ROUTES.project, {
                      projectId: project.id,
                    })
                  );
                });
            }

            if (props.tag) {
              await appCtx.api.updateSelfInfo(
                updateExtraDataJson(
                  ensure(appCtx.selfInfo, "Must be logged in"),
                  {
                    starterProgress: (orig) => L.union(orig, [props.tag]),
                  }
                )
              );
            }

            if (props.href) {
              window.open(props.href);
            } else if (props.projectId) {
              const { projectId: newProjectId } = await appCtx.app.withSpinner(
                appCtx.api.cloneProject(props.projectId, {
                  name: props.cloneWithoutName ? undefined : name,
                  workspaceId: props.workspaceId,
                })
              );

              // Perform a full page load so that we aren't using stale JS.
              location.href = fillRoute(APP_ROUTES.project, {
                projectId: newProjectId,
              });
            } else if (props.baseProjectId) {
              const { projectId: newProjectId } = await appCtx.app.withSpinner(
                appCtx.api.clonePublishedTemplate(
                  props.baseProjectId,
                  name,
                  props.workspaceId
                )
              );

              // Perform a full page load so that we aren't using stale JS.
              location.href = fillRoute(APP_ROUTES.project, {
                projectId: newProjectId,
              });
            } else {
              unexpected();
            }
          },
        }
      }
    />
  );
}

export default StarterProject;
