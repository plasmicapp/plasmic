// This is a skeleton starter React component generated by Plasmic.
// Feel free to edit as you see fit.
import { PublicLink } from "@/wab/client/components/PublicLink";
import {
  PlasmicIconButton,
  PlasmicIconButton__VariantsArgs,
} from "@/wab/client/plasmic/PlasmicIconButton";
import { Tooltip } from "antd";
import { TooltipPlacement } from "antd/lib/tooltip";
import React, { ReactNode } from "react";

type IconButtonProps = Omit<React.ComponentProps<"button">, "type"> & {
  children?: ReactNode;
  size?: PlasmicIconButton__VariantsArgs["size"];
  type?: PlasmicIconButton__VariantsArgs["type"];
  isActive?: PlasmicIconButton__VariantsArgs["isActive"];
  withBackgroundHover?: PlasmicIconButton__VariantsArgs["withBackgroundHover"];
  withRedBackgroundHover?: PlasmicIconButton__VariantsArgs["withRedBackgroundHover"];
  withGreenBackgroundHover?: PlasmicIconButton__VariantsArgs["withGreenBackgroundHover"];
  className?: string;
  tooltip?: React.ReactNode;
  tooltipPlacement?: TooltipPlacement;
  showAlert?: boolean;
  href?: string;
  target?: string;
  rel?: string;
  hoverText?: string;
  "data-test-id"?: string;
  htmlType?: React.ComponentProps<"button">["type"];
};

export const IconButton = React.forwardRef(function (
  props: IconButtonProps,
  ref: React.Ref<HTMLButtonElement>
) {
  const {
    children,
    disabled,
    size,
    type,
    isActive,
    htmlType,
    tooltip,
    onClick,
    showAlert,
    tooltipPlacement,
    href,
    target,
    withBackgroundHover,
    withRedBackgroundHover,
    withGreenBackgroundHover,
    rel,
    hoverText,
    ...restProps
  } = props;

  const button = (
    <PlasmicIconButton
      variants={{
        disabled,
        size,
        type,
        isActive,
        showAlert,
        withBackgroundHover,
        withRedBackgroundHover,
        withGreenBackgroundHover,
      }}
      children={children}
      args={{ hoverText }}
      root={{
        props: {
          type: htmlType ?? (href ? undefined : "button"),
          ref,
          onClick: onClick,
          ...(href ? { href, target, rel } : {}),
          disabled,

          // We pipe restProps to the root, because some components, like
          // Tooltip, will inject mouse event handlers as props to their children
          ...restProps,
        },
        ...(href ? { as: PublicLink } : { as: "button" }),
      }}
    />
  );

  if (tooltip) {
    return (
      <Tooltip title={tooltip} placement={tooltipPlacement}>
        {button}
      </Tooltip>
    );
  } else {
    return button;
  }
});

export default IconButton as React.FunctionComponent<IconButtonProps>;
