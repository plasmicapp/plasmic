/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kA1Hysr5ZeimtATHTDJz5B
// Component: cWsnP3_PIix

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicLink as PlasmicLink__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import ListSectionSeparator from "../../ListSectionSeparator"; // plasmic-import: uG5_fPM0sK/component
import ActionMenuButton from "../ActionMenuButton"; // plasmic-import: VNi6NC2QOI/component
import Button from "../Button"; // plasmic-import: SEF-sRmSoqV5c/component
import Checkbox from "../Checkbox"; // plasmic-import: W-rO7NZqPjZ/component
import Select from "../Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../Select__Option"; // plasmic-import: rr-LWdMni2G/component
import Textbox from "../Textbox"; // plasmic-import: pA22NEzDCsn_/component
import PermissionItem from "./PermissionItem"; // plasmic-import: GFrmKeyhlA/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../../../plasmic/plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../../../plasmic/PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "../../../plasmic/PP__plasmickit_share_dialog.module.css"; // plasmic-import: kA1Hysr5ZeimtATHTDJz5B/projectcss
import sty from "./PlasmicShareDialogContent.module.css"; // plasmic-import: cWsnP3_PIix/css

import LinkIcon from "../../../plasmic/plasmic_kit/PlasmicIcon__Link"; // plasmic-import: BQBWbw0fg66Lw/icon
import ResetIcon from "../../../plasmic/plasmic_kit/PlasmicIcon__Reset"; // plasmic-import: Dj3u-HuPv94sN/icon
import LockIcon from "../../../plasmic/plasmic_kit_design_system/PlasmicIcon__Lock"; // plasmic-import: xWjo2JPAc6/icon
import ArrowRightSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: 9Jv8jb253/icon
import ArrowUpRightSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ArrowUpRightSvg"; // plasmic-import: N_BtK6grX/icon
import ChevronDownSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import CloseSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__CloseSvg"; // plasmic-import: DhvEHyCHT/icon
import PlusSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import SearchSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__SearchSvg"; // plasmic-import: R5DLz11OA/icon

createPlasmicElementProxy;

export type PlasmicShareDialogContent__VariantMembers = {
  state: "submitting" | "invalidEmail" | "unlogged" | "noPermToShare";
  shareByLinkAllowed: "yes" | "no";
  resourceType: "project" | "workspace" | "team";
  permsCascade: "showWorkspace" | "showTeam";
  noShareByLink: "noShareByLink";
};
export type PlasmicShareDialogContent__VariantsArgs = {
  state?: SingleChoiceArg<
    "submitting" | "invalidEmail" | "unlogged" | "noPermToShare"
  >;
  shareByLinkAllowed?: SingleChoiceArg<"yes" | "no">;
  resourceType?: SingleChoiceArg<"project" | "workspace" | "team">;
  permsCascade?: MultiChoiceArg<"showWorkspace" | "showTeam">;
  noShareByLink?: SingleBooleanChoiceArg<"noShareByLink">;
};
type VariantPropType = keyof PlasmicShareDialogContent__VariantsArgs;
export const PlasmicShareDialogContent__VariantProps =
  new Array<VariantPropType>(
    "state",
    "shareByLinkAllowed",
    "resourceType",
    "permsCascade",
    "noShareByLink"
  );

export type PlasmicShareDialogContent__ArgsType = {
  existingPermItems?: React.ReactNode;
};
type ArgPropType = keyof PlasmicShareDialogContent__ArgsType;
export const PlasmicShareDialogContent__ArgProps = new Array<ArgPropType>(
  "existingPermItems"
);

export type PlasmicShareDialogContent__OverridesType = {
  root?: Flex__<"div">;
  projectActionMenu?: Flex__<typeof ActionMenuButton>;
  shareByLinkSwitch?: Flex__<typeof Checkbox>;
  copyLink?: Flex__<typeof Button>;
  shareByLinkPermDropdown?: Flex__<typeof Select>;
  byInviteTab?: Flex__<"div">;
  newUserEmail?: Flex__<typeof Textbox>;
  newUserRoleDropdown?: Flex__<typeof Select>;
  sendInviteButton?: Flex__<typeof Button>;
  loginLink?: Flex__<"a">;
  permsContainer?: Flex__<"div">;
  teamName?: Flex__<"span">;
  teamLink?: Flex__<typeof Button>;
  workspaceName?: Flex__<"span">;
  workspaceLink?: Flex__<typeof Button>;
  everyoneElseDropdown?: Flex__<typeof Select>;
};

export interface DefaultShareDialogContentProps {
  existingPermItems?: React.ReactNode;
  state?: SingleChoiceArg<
    "submitting" | "invalidEmail" | "unlogged" | "noPermToShare"
  >;
  shareByLinkAllowed?: SingleChoiceArg<"yes" | "no">;
  resourceType?: SingleChoiceArg<"project" | "workspace" | "team">;
  permsCascade?: MultiChoiceArg<"showWorkspace" | "showTeam">;
  noShareByLink?: SingleBooleanChoiceArg<"noShareByLink">;
  className?: string;
}

const $$ = {};

function PlasmicShareDialogContent__RenderFunc(props: {
  variants: PlasmicShareDialogContent__VariantsArgs;
  args: PlasmicShareDialogContent__ArgsType;
  overrides: PlasmicShareDialogContent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
      {
        path: "shareByLinkAllowed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.shareByLinkAllowed,
      },
      {
        path: "resourceType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.resourceType,
      },
      {
        path: "permsCascade",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.permsCascade,
      },
      {
        path: "shareByLinkSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "shareByLinkAllowed", "no")
            ? (() => {
                try {
                  return false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            : "isChecked",
      },
      {
        path: "shareByLinkPermDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "value1",
      },
      {
        path: "newUserRoleDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "value1",
      },
      {
        path: "noShareByLink",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noShareByLink,
      },
      {
        path: "everyoneElseDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "value1",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootresourceType_project]: hasVariant(
            $state,
            "resourceType",
            "project"
          ),
          [sty.rootresourceType_team]: hasVariant(
            $state,
            "resourceType",
            "team"
          ),
          [sty.rootshareByLinkAllowed_no]: hasVariant(
            $state,
            "shareByLinkAllowed",
            "no"
          ),
          [sty.rootshareByLinkAllowed_yes]: hasVariant(
            $state,
            "shareByLinkAllowed",
            "yes"
          ),
          [sty.rootstate_invalidEmail]: hasVariant(
            $state,
            "state",
            "invalidEmail"
          ),
          [sty.rootstate_noPermToShare]: hasVariant(
            $state,
            "state",
            "noPermToShare"
          ),
          [sty.rootstate_submitting]: hasVariant($state, "state", "submitting"),
          [sty.rootstate_unlogged]: hasVariant($state, "state", "unlogged"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nnT7R, {
          [sty.freeBoxpermsCascade_showWorkspace__nnT7RGxhbk]: hasVariant(
            $state,
            "permsCascade",
            "showWorkspace"
          ),
          [sty.freeBoxresourceType_project__nnT7Rwbkdw]: hasVariant(
            $state,
            "resourceType",
            "project"
          ),
          [sty.freeBoxresourceType_team__nnT7Rhn7Mj]: hasVariant(
            $state,
            "resourceType",
            "team"
          ),
          [sty.freeBoxresourceType_workspace__nnT7Rn5Uns]: hasVariant(
            $state,
            "resourceType",
            "workspace"
          ),
          [sty.freeBoxshareByLinkAllowed_no__nnT7RtjDou]: hasVariant(
            $state,
            "shareByLinkAllowed",
            "no"
          ),
          [sty.freeBoxstate_noPermToShare__nnT7RgPB]: hasVariant(
            $state,
            "state",
            "noPermToShare"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__tXrf3, {
            [sty.freeBoxresourceType_project__tXrf3Wbkdw]: hasVariant(
              $state,
              "resourceType",
              "project"
            ),
            [sty.freeBoxresourceType_workspace__tXrf3N5Uns]: hasVariant(
              $state,
              "resourceType",
              "workspace"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1R,
              {
                [sty.textnoShareByLink___1RdsUq5]: hasVariant(
                  $state,
                  "noShareByLink",
                  "noShareByLink"
                ),
                [sty.textresourceType_project___1Rwbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
                [sty.textresourceType_team___1Rhn7Mj]: hasVariant(
                  $state,
                  "resourceType",
                  "team"
                ),
                [sty.textresourceType_workspace___1Rn5Uns]: hasVariant(
                  $state,
                  "resourceType",
                  "workspace"
                ),
                [sty.textshareByLinkAllowed_yes___1Rn4Zx6]: hasVariant(
                  $state,
                  "shareByLinkAllowed",
                  "yes"
                ),
              }
            )}
          >
            {hasVariant($state, "resourceType", "team")
              ? "Organization members"
              : hasVariant($state, "resourceType", "workspace")
              ? "Workspace members"
              : hasVariant($state, "resourceType", "project")
              ? "Share this project"
              : "Who can open this Plasmic project?"}
          </div>
          <ActionMenuButton
            data-plasmic-name={"projectActionMenu"}
            data-plasmic-override={overrides.projectActionMenu}
            className={classNames("__wab_instance", sty.projectActionMenu, {
              [sty.projectActionMenuresourceType_project]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
            })}
            hasIcon={true}
            icon={
              <LinkIcon
                className={classNames(projectcss.all, sty.svg__bJcBd)}
                role={"img"}
              />
            }
            type={["primary"]}
          >
            {"Copy link"}
          </ActionMenuButton>
        </div>
        <ListSectionSeparator
          className={classNames(
            "__wab_instance",
            sty.listSectionSeparator__umB8E,
            {
              [sty.listSectionSeparatorresourceType_project__umB8Ewbkdw]:
                hasVariant($state, "resourceType", "project"),
              [sty.listSectionSeparatorresourceType_workspace__umB8EN5Uns]:
                hasVariant($state, "resourceType", "workspace"),
            }
          )}
        />

        {(
          hasVariant($state, "noShareByLink", "noShareByLink")
            ? false
            : hasVariant($state, "resourceType", "workspace")
            ? true
            : hasVariant($state, "resourceType", "project")
            ? true
            : hasVariant($state, "shareByLinkAllowed", "yes")
            ? true
            : true
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yn7Fa, {
              [sty.freeBoxnoShareByLink__yn7FadsUq5]: hasVariant(
                $state,
                "noShareByLink",
                "noShareByLink"
              ),
              [sty.freeBoxpermsCascade_showWorkspace__yn7FaGxhbk]: hasVariant(
                $state,
                "permsCascade",
                "showWorkspace"
              ),
              [sty.freeBoxresourceType_project__yn7Fawbkdw]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
              [sty.freeBoxresourceType_team__yn7FaHn7Mj]: hasVariant(
                $state,
                "resourceType",
                "team"
              ),
              [sty.freeBoxresourceType_workspace__yn7FaN5Uns]: hasVariant(
                $state,
                "resourceType",
                "workspace"
              ),
              [sty.freeBoxshareByLinkAllowed_no__yn7FaTjDou]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "no"
              ),
              [sty.freeBoxshareByLinkAllowed_yes__yn7Fan4Zx6]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "yes"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hbZwy, {
                [sty.freeBoxpermsCascade_showTeam__hbZwy57XP]: hasVariant(
                  $state,
                  "permsCascade",
                  "showTeam"
                ),
                [sty.freeBoxpermsCascade_showWorkspace__hbZwyGxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
                [sty.freeBoxresourceType_project__hbZwywbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
                [sty.freeBoxresourceType_team__hbZwyHn7Mj]: hasVariant(
                  $state,
                  "resourceType",
                  "team"
                ),
                [sty.freeBoxresourceType_workspace__hbZwyN5Uns]: hasVariant(
                  $state,
                  "resourceType",
                  "workspace"
                ),
                [sty.freeBoxshareByLinkAllowed_no__hbZwyTjDou]: hasVariant(
                  $state,
                  "shareByLinkAllowed",
                  "no"
                ),
                [sty.freeBoxshareByLinkAllowed_yes__hbZwyn4Zx6]: hasVariant(
                  $state,
                  "shareByLinkAllowed",
                  "yes"
                ),
              })}
            >
              <Checkbox
                data-plasmic-name={"shareByLinkSwitch"}
                data-plasmic-override={overrides.shareByLinkSwitch}
                className={classNames("__wab_instance", sty.shareByLinkSwitch, {
                  [sty.shareByLinkSwitchpermsCascade_showTeam]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                  [sty.shareByLinkSwitchpermsCascade_showWorkspace]: hasVariant(
                    $state,
                    "permsCascade",
                    "showWorkspace"
                  ),
                  [sty.shareByLinkSwitchresourceType_team]: hasVariant(
                    $state,
                    "resourceType",
                    "team"
                  ),
                  [sty.shareByLinkSwitchshareByLinkAllowed_no]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.shareByLinkSwitchshareByLinkAllowed_yes]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                  [sty.shareByLinkSwitchstate_noPermToShare]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                  [sty.shareByLinkSwitchstate_submitting]: hasVariant(
                    $state,
                    "state",
                    "submitting"
                  ),
                  [sty.shareByLinkSwitchstate_unlogged]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                })}
                isChecked={
                  generateStateValueProp($state, [
                    "shareByLinkSwitch",
                    "isChecked",
                  ]) ?? false
                }
                isDisabled={
                  hasVariant($state, "state", "noPermToShare")
                    ? true
                    : hasVariant($state, "state", "unlogged")
                    ? true
                    : hasVariant($state, "state", "submitting")
                    ? true
                    : undefined
                }
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "shareByLinkSwitch",
                      "isChecked",
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {hasVariant($state, "resourceType", "team")
                  ? "Invite by link is enabled"
                  : "Share by link is enabled"}
              </Checkbox>
              {(
                hasVariant($state, "shareByLinkAllowed", "no")
                  ? false
                  : hasVariant($state, "shareByLinkAllowed", "yes")
                  ? true
                  : true
              ) ? (
                <Button
                  data-plasmic-name={"copyLink"}
                  data-plasmic-override={overrides.copyLink}
                  className={classNames("__wab_instance", sty.copyLink, {
                    [sty.copyLinkpermsCascade_showWorkspace]: hasVariant(
                      $state,
                      "permsCascade",
                      "showWorkspace"
                    ),
                    [sty.copyLinkresourceType_project]: hasVariant(
                      $state,
                      "resourceType",
                      "project"
                    ),
                    [sty.copyLinkshareByLinkAllowed_no]: hasVariant(
                      $state,
                      "shareByLinkAllowed",
                      "no"
                    ),
                    [sty.copyLinkshareByLinkAllowed_yes]: hasVariant(
                      $state,
                      "shareByLinkAllowed",
                      "yes"
                    ),
                  })}
                  endIcon={
                    <ChevronDownSvgIcon
                      className={classNames(projectcss.all, sty.svg__unetT)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <LinkIcon
                      className={classNames(projectcss.all, sty.svg___1D2A)}
                      role={"img"}
                    />
                  }
                  type={["link"]}
                  withIcons={["startIcon"]}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jdZdj,
                      {
                        [sty.textpermsCascade_showTeam__jdZdj57XP]: hasVariant(
                          $state,
                          "permsCascade",
                          "showTeam"
                        ),
                        [sty.textpermsCascade_showWorkspace__jdZdjGxhbk]:
                          hasVariant($state, "permsCascade", "showWorkspace"),
                        [sty.textresourceType_team__jdZdjHn7Mj]: hasVariant(
                          $state,
                          "resourceType",
                          "team"
                        ),
                      }
                    )}
                  >
                    {"Copy Link"}
                  </div>
                </Button>
              ) : null}
            </Stack__>
            {(
              hasVariant($state, "resourceType", "workspace")
                ? false
                : hasVariant($state, "shareByLinkAllowed", "no")
                ? false
                : true
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fdzf5, {
                  [sty.freeBoxpermsCascade_showWorkspace__fdzf5Gxhbk]:
                    hasVariant($state, "permsCascade", "showWorkspace"),
                  [sty.freeBoxresourceType_project__fdzf5Wbkdw]: hasVariant(
                    $state,
                    "resourceType",
                    "project"
                  ),
                  [sty.freeBoxresourceType_team__fdzf5Hn7Mj]: hasVariant(
                    $state,
                    "resourceType",
                    "team"
                  ),
                  [sty.freeBoxresourceType_workspace__fdzf5N5Uns]: hasVariant(
                    $state,
                    "resourceType",
                    "workspace"
                  ),
                  [sty.freeBoxshareByLinkAllowed_no__fdzf5TjDou]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.freeBoxshareByLinkAllowed_yes__fdzf5N4Zx6]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mwPkd,
                    {
                      [sty.textpermsCascade_showWorkspace__mwPkdGxhbk]:
                        hasVariant($state, "permsCascade", "showWorkspace"),
                      [sty.textresourceType_project__mwPkdwbkdw]: hasVariant(
                        $state,
                        "resourceType",
                        "project"
                      ),
                      [sty.textresourceType_team__mwPkdHn7Mj]: hasVariant(
                        $state,
                        "resourceType",
                        "team"
                      ),
                      [sty.textshareByLinkAllowed_yes__mwPkdn4Zx6]: hasVariant(
                        $state,
                        "shareByLinkAllowed",
                        "yes"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "resourceType", "team")
                    ? "Anyone with the link join the organization as"
                    : "Any Plasmic user with the link is a"}
                </div>
                <Select
                  data-plasmic-name={"shareByLinkPermDropdown"}
                  data-plasmic-override={overrides.shareByLinkPermDropdown}
                  className={classNames(
                    "__wab_instance",
                    sty.shareByLinkPermDropdown,
                    {
                      [sty.shareByLinkPermDropdownresourceType_project]:
                        hasVariant($state, "resourceType", "project"),
                    }
                  )}
                  icon={
                    <PlusSvgIcon
                      className={classNames(projectcss.all, sty.svg__lJfWp)}
                      role={"img"}
                    />
                  }
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "shareByLinkPermDropdown",
                        "value",
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={"bordered"}
                  value={generateStateValueProp($state, [
                    "shareByLinkPermDropdown",
                    "value",
                  ])}
                >
                  <Select__Option
                    className={classNames("__wab_instance", sty.option__xuurC)}
                    value={"value1"}
                  >
                    {"viewer"}
                  </Select__Option>
                </Select>
              </Stack__>
            ) : null}
          </Stack__>
        ) : null}
        <Stack__
          as={"div"}
          data-plasmic-name={"byInviteTab"}
          data-plasmic-override={overrides.byInviteTab}
          hasGap={true}
          className={classNames(projectcss.all, sty.byInviteTab, {
            [sty.byInviteTabpermsCascade_showWorkspace]: hasVariant(
              $state,
              "permsCascade",
              "showWorkspace"
            ),
            [sty.byInviteTabresourceType_project]: hasVariant(
              $state,
              "resourceType",
              "project"
            ),
            [sty.byInviteTabresourceType_team]: hasVariant(
              $state,
              "resourceType",
              "team"
            ),
            [sty.byInviteTabresourceType_workspace]: hasVariant(
              $state,
              "resourceType",
              "workspace"
            ),
            [sty.byInviteTabshareByLinkAllowed_no]: hasVariant(
              $state,
              "shareByLinkAllowed",
              "no"
            ),
            [sty.byInviteTabshareByLinkAllowed_yes]: hasVariant(
              $state,
              "shareByLinkAllowed",
              "yes"
            ),
            [sty.byInviteTabstate_noPermToShare]: hasVariant(
              $state,
              "state",
              "noPermToShare"
            ),
            [sty.byInviteTabstate_submitting]: hasVariant(
              $state,
              "state",
              "submitting"
            ),
            [sty.byInviteTabstate_unlogged]: hasVariant(
              $state,
              "state",
              "unlogged"
            ),
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1IUsx, {
              [sty.freeBoxpermsCascade_showTeam___1IUsx57XP]: hasVariant(
                $state,
                "permsCascade",
                "showTeam"
              ),
              [sty.freeBoxresourceType_project___1IUsxwbkdw]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
              [sty.freeBoxresourceType_workspace___1IUsxN5Uns]: hasVariant(
                $state,
                "resourceType",
                "workspace"
              ),
              [sty.freeBoxstate_noPermToShare___1IUsxgPB]: hasVariant(
                $state,
                "state",
                "noPermToShare"
              ),
              [sty.freeBoxstate_unlogged___1IUsxvijMz]: hasVariant(
                $state,
                "state",
                "unlogged"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vTye, {
                [sty.freeBoxpermsCascade_showTeam__vTye57XP]: hasVariant(
                  $state,
                  "permsCascade",
                  "showTeam"
                ),
                [sty.freeBoxpermsCascade_showWorkspace__vTyeGxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
                [sty.freeBoxresourceType_project__vTyEwbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
                [sty.freeBoxresourceType_team__vTyehn7Mj]: hasVariant(
                  $state,
                  "resourceType",
                  "team"
                ),
                [sty.freeBoxresourceType_workspace__vTyen5Uns]: hasVariant(
                  $state,
                  "resourceType",
                  "workspace"
                ),
                [sty.freeBoxstate_noPermToShare__vTyEgPB]: hasVariant(
                  $state,
                  "state",
                  "noPermToShare"
                ),
              })}
            >
              <Textbox
                data-plasmic-name={"newUserEmail"}
                data-plasmic-override={overrides.newUserEmail}
                disabled={
                  hasVariant($state, "state", "noPermToShare")
                    ? true
                    : hasVariant($state, "state", "unlogged")
                    ? true
                    : hasVariant($state, "state", "submitting")
                    ? true
                    : undefined
                }
                error={
                  hasVariant($state, "state", "invalidEmail") ? true : undefined
                }
                placeholder={"Invite someone by email…"}
                prefixIcon={
                  <SearchSvgIcon
                    className={classNames(projectcss.all, sty.svg__yai2I)}
                    role={"img"}
                  />
                }
                styleType={["bordered"]}
                suffixIcon={
                  <CloseSvgIcon
                    className={classNames(projectcss.all, sty.svg___9G5Fh)}
                    role={"img"}
                  />
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kZecO,
                  {
                    [sty.textstate_noPermToShare__kZecOgPB]: hasVariant(
                      $state,
                      "state",
                      "noPermToShare"
                    ),
                    [sty.textstate_submitting__kZecOzeWbX]: hasVariant(
                      $state,
                      "state",
                      "submitting"
                    ),
                    [sty.textstate_unlogged__kZecOvijMz]: hasVariant(
                      $state,
                      "state",
                      "unlogged"
                    ),
                  }
                )}
              >
                {"as"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__elohb, {
                  [sty.freeBoxstate_noPermToShare__elohBgPB]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                  [sty.freeBoxstate_submitting__elohBzeWbX]: hasVariant(
                    $state,
                    "state",
                    "submitting"
                  ),
                  [sty.freeBoxstate_unlogged__elohBvijMz]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                })}
              >
                <Select
                  data-plasmic-name={"newUserRoleDropdown"}
                  data-plasmic-override={overrides.newUserRoleDropdown}
                  className={classNames(
                    "__wab_instance",
                    sty.newUserRoleDropdown,
                    {
                      [sty.newUserRoleDropdownresourceType_workspace]:
                        hasVariant($state, "resourceType", "workspace"),
                      [sty.newUserRoleDropdownstate_noPermToShare]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                      [sty.newUserRoleDropdownstate_submitting]: hasVariant(
                        $state,
                        "state",
                        "submitting"
                      ),
                    }
                  )}
                  icon={
                    <PlusSvgIcon
                      className={classNames(projectcss.all, sty.svg__frLSs)}
                      role={"img"}
                    />
                  }
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "newUserRoleDropdown",
                        "value",
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  type={"bordered"}
                  value={generateStateValueProp($state, [
                    "newUserRoleDropdown",
                    "value",
                  ])}
                >
                  <Select__Option
                    className={classNames("__wab_instance", sty.option___4Unkq)}
                    value={"value1"}
                  >
                    {"viewer"}
                  </Select__Option>
                </Select>
              </Stack__>
            </Stack__>
            <div
              className={classNames(projectcss.all, sty.freeBox___0VjOi, {
                [sty.freeBoxresourceType_project___0VjOIwbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
                [sty.freeBoxresourceType_team___0VjOihn7Mj]: hasVariant(
                  $state,
                  "resourceType",
                  "team"
                ),
              })}
            >
              <Button
                data-plasmic-name={"sendInviteButton"}
                data-plasmic-override={overrides.sendInviteButton}
                disabled={
                  hasVariant($state, "state", "noPermToShare")
                    ? true
                    : hasVariant($state, "state", "unlogged")
                    ? true
                    : hasVariant($state, "state", "invalidEmail")
                    ? true
                    : hasVariant($state, "state", "submitting")
                    ? true
                    : undefined
                }
                endIcon={
                  <ChevronDownSvgIcon
                    className={classNames(projectcss.all, sty.svg__kjUa7)}
                    role={"img"}
                  />
                }
                size={"wide"}
                startIcon={
                  <ArrowRightSvgIcon
                    className={classNames(projectcss.all, sty.svg__n9OjC)}
                    role={"img"}
                  />
                }
                type={["primary"]}
              >
                {hasVariant($state, "state", "noPermToShare")
                  ? "Invite"
                  : hasVariant($state, "state", "unlogged")
                  ? "Invite"
                  : hasVariant($state, "state", "submitting")
                  ? "Inviting..."
                  : "Invite"}
              </Button>
            </div>
          </Stack__>
          {(
            hasVariant($state, "state", "noPermToShare")
              ? true
              : hasVariant($state, "state", "unlogged")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__dYv8H, {
                [sty.freeBoxpermsCascade_showTeam__dYv8H57XP]: hasVariant(
                  $state,
                  "permsCascade",
                  "showTeam"
                ),
                [sty.freeBoxpermsCascade_showWorkspace__dYv8HGxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
                [sty.freeBoxresourceType_project__dYv8Hwbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
                [sty.freeBoxshareByLinkAllowed_no__dYv8HtjDou]: hasVariant(
                  $state,
                  "shareByLinkAllowed",
                  "no"
                ),
                [sty.freeBoxstate_noPermToShare__dYv8HgPB]: hasVariant(
                  $state,
                  "state",
                  "noPermToShare"
                ),
                [sty.freeBoxstate_submitting__dYv8HzeWbX]: hasVariant(
                  $state,
                  "state",
                  "submitting"
                ),
                [sty.freeBoxstate_unlogged__dYv8HvijMz]: hasVariant(
                  $state,
                  "state",
                  "unlogged"
                ),
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__ekPne, {
                  [sty.freeBoxresourceType_project__ekPnEwbkdw]: hasVariant(
                    $state,
                    "resourceType",
                    "project"
                  ),
                  [sty.freeBoxshareByLinkAllowed_no__ekPnetjDou]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "no"
                  ),
                  [sty.freeBoxshareByLinkAllowed_yes__ekPnEn4Zx6]: hasVariant(
                    $state,
                    "shareByLinkAllowed",
                    "yes"
                  ),
                  [sty.freeBoxstate_noPermToShare__ekPnEgPB]: hasVariant(
                    $state,
                    "state",
                    "noPermToShare"
                  ),
                  [sty.freeBoxstate_submitting__ekPnEzeWbX]: hasVariant(
                    $state,
                    "state",
                    "submitting"
                  ),
                  [sty.freeBoxstate_unlogged__ekPnEvijMz]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sNt5G,
                    {
                      [sty.textstate_noPermToShare__sNt5GgPB]: hasVariant(
                        $state,
                        "state",
                        "noPermToShare"
                      ),
                      [sty.textstate_unlogged__sNt5GvijMz]: hasVariant(
                        $state,
                        "state",
                        "unlogged"
                      ),
                    }
                  )}
                >
                  {hasVariant($state, "state", "noPermToShare")
                    ? "You don't have permission to share this resource."
                    : hasVariant($state, "state", "unlogged")
                    ? "Please "
                    : "Invitees can directly create an account, skipping the waitlist."}
                </div>
                {(hasVariant($state, "state", "unlogged") ? true : false) ? (
                  <PlasmicLink__
                    data-plasmic-name={"loginLink"}
                    data-plasmic-override={overrides.loginLink}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.loginLink,
                      {
                        [sty.loginLinkshareByLinkAllowed_no]: hasVariant(
                          $state,
                          "shareByLinkAllowed",
                          "no"
                        ),
                        [sty.loginLinkshareByLinkAllowed_yes]: hasVariant(
                          $state,
                          "shareByLinkAllowed",
                          "yes"
                        ),
                        [sty.loginLinkstate_noPermToShare]: hasVariant(
                          $state,
                          "state",
                          "noPermToShare"
                        ),
                        [sty.loginLinkstate_unlogged]: hasVariant(
                          $state,
                          "state",
                          "unlogged"
                        ),
                      }
                    )}
                    href={
                      hasVariant($state, "state", "unlogged")
                        ? "/login"
                        : undefined
                    }
                    platform={"react"}
                  >
                    {hasVariant($state, "state", "unlogged")
                      ? "login"
                      : "Invitees can directly create an account, skipping the waitlist."}
                  </PlasmicLink__>
                ) : null}
                {(hasVariant($state, "state", "unlogged") ? true : false) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q89Gp,
                      {
                        [sty.textstate_noPermToShare__q89GpgPB]: hasVariant(
                          $state,
                          "state",
                          "noPermToShare"
                        ),
                        [sty.textstate_unlogged__q89GpvijMz]: hasVariant(
                          $state,
                          "state",
                          "unlogged"
                        ),
                      }
                    )}
                  >
                    {hasVariant($state, "state", "unlogged")
                      ? " to send invitations."
                      : "Invitees can directly create an account, skipping the waitlist."}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          <ListSectionSeparator
            className={classNames(
              "__wab_instance",
              sty.listSectionSeparator__lj0Yv
            )}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"permsContainer"}
            data-plasmic-override={overrides.permsContainer}
            hasGap={true}
            className={classNames(projectcss.all, sty.permsContainer, {
              [sty.permsContainerresourceType_project]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__d1JVs, {
                [sty.freeBoxpermsCascade_showWorkspace__d1JVsGxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
                [sty.freeBoxresourceType_project__d1JVswbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0F4Up,
                  {
                    [sty.textpermsCascade_showTeam___0F4Up57XP]: hasVariant(
                      $state,
                      "permsCascade",
                      "showTeam"
                    ),
                    [sty.textresourceType_workspace___0F4Upn5Uns]: hasVariant(
                      $state,
                      "resourceType",
                      "workspace"
                    ),
                  }
                )}
              >
                {"Who has access"}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__tC9Z5, {
                [sty.freeBoxpermsCascade_showTeam__tC9Z557XP]: hasVariant(
                  $state,
                  "permsCascade",
                  "showTeam"
                ),
                [sty.freeBoxresourceType_project__tC9Z5Wbkdw]: hasVariant(
                  $state,
                  "resourceType",
                  "project"
                ),
                [sty.freeBoxresourceType_team__tC9Z5Hn7Mj]: hasVariant(
                  $state,
                  "resourceType",
                  "team"
                ),
                [sty.freeBoxresourceType_workspace__tC9Z5N5Uns]: hasVariant(
                  $state,
                  "resourceType",
                  "workspace"
                ),
                [sty.freeBoxstate_noPermToShare__tC9Z5GPB]: hasVariant(
                  $state,
                  "state",
                  "noPermToShare"
                ),
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5SoD
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <span
                      data-plasmic-name={"teamName"}
                      data-plasmic-override={overrides.teamName}
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.teamName
                      )}
                    >
                      {"Name"}
                    </span>
                  }
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span__stjKq
                      )}
                    >
                      {" organization"}
                    </span>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___13Zpo, {
                  [sty.freeBoxpermsCascade_showTeam___13Zpo57XP]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                })}
              >
                <Button
                  data-plasmic-name={"teamLink"}
                  data-plasmic-override={overrides.teamLink}
                  className={classNames("__wab_instance", sty.teamLink)}
                  endIcon={
                    <ArrowUpRightSvgIcon
                      className={classNames(projectcss.all, sty.svg__y814Q)}
                      role={"img"}
                    />
                  }
                  type={["link"]}
                  withIcons={["endIcon"]}
                >
                  {"Manage"}
                </Button>
              </div>
            </div>
            {(
              hasVariant($state, "permsCascade", "showWorkspace") ? true : false
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__gIdc, {
                  [sty.freeBoxpermsCascade_showTeam__gIdc57XP]: hasVariant(
                    $state,
                    "permsCascade",
                    "showTeam"
                  ),
                  [sty.freeBoxpermsCascade_showWorkspace__gIdcGxhbk]:
                    hasVariant($state, "permsCascade", "showWorkspace"),
                  [sty.freeBoxresourceType_project__gIdcWbkdw]: hasVariant(
                    $state,
                    "resourceType",
                    "project"
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cwmeK
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <span
                        data-plasmic-name={"workspaceName"}
                        data-plasmic-override={overrides.workspaceName}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.workspaceName
                        )}
                      >
                        {"Name"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__okntb
                        )}
                      >
                        {" workspace"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__frYBl)}>
                  <Button
                    data-plasmic-name={"workspaceLink"}
                    data-plasmic-override={overrides.workspaceLink}
                    className={classNames("__wab_instance", sty.workspaceLink)}
                    endIcon={
                      <ArrowUpRightSvgIcon
                        className={classNames(projectcss.all, sty.svg__ghHOe)}
                        role={"img"}
                      />
                    }
                    type={["link"]}
                    withIcons={["endIcon"]}
                  >
                    {"Manage"}
                  </Button>
                </div>
              </div>
            ) : null}
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__bIvgb
                    )}
                    email={"yang@plasmic.app"}
                    role={"owner"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__ar3M)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__zQRdb
                    )}
                    email={"chungwu@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__hB6Fb)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__vmwOo
                    )}
                    email={"ydmao@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__xozL8)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem___7ZJgk
                    )}
                    email={"leo@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__hBaQ)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__oR74D
                    )}
                    email={"ray@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg___3ETf)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem___9OdCb
                    )}
                    email={"ray@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__iZSo0)}
                        role={"img"}
                      />
                    }
                  />

                  <PermissionItem
                    className={classNames(
                      "__wab_instance",
                      sty.permissionItem__bnaMj
                    )}
                    email={"ray@plasmic.app"}
                    spinner={
                      <ResetIcon
                        className={classNames(projectcss.all, sty.svg__oieCy)}
                        role={"img"}
                      />
                    }
                  />
                </React.Fragment>
              ),
              value: args.existingPermItems,
            })}
          </Stack__>
        </Stack__>
        <div
          className={classNames(projectcss.all, sty.freeBox__auHu, {
            [sty.freeBoxresourceType_project__auHuwbkdw]: hasVariant(
              $state,
              "resourceType",
              "project"
            ),
          })}
        >
          {(hasVariant($state, "resourceType", "project") ? true : false) ? (
            <ListSectionSeparator
              className={classNames(
                "__wab_instance",
                sty.listSectionSeparator__d7H,
                {
                  [sty.listSectionSeparatorresourceType_project__d7Hwbkdw]:
                    hasVariant($state, "resourceType", "project"),
                }
              )}
            />
          ) : null}
        </div>
        {(
          hasVariant($state, "permsCascade", "showWorkspace")
            ? true
            : hasVariant($state, "resourceType", "workspace")
            ? false
            : hasVariant($state, "resourceType", "project")
            ? true
            : hasVariant($state, "shareByLinkAllowed", "no")
            ? false
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__s80E, {
              [sty.freeBoxpermsCascade_showWorkspace__s80EGxhbk]: hasVariant(
                $state,
                "permsCascade",
                "showWorkspace"
              ),
              [sty.freeBoxresourceType_project__s80Ewbkdw]: hasVariant(
                $state,
                "resourceType",
                "project"
              ),
              [sty.freeBoxresourceType_team__s80Ehn7Mj]: hasVariant(
                $state,
                "resourceType",
                "team"
              ),
              [sty.freeBoxresourceType_workspace__s80En5Uns]: hasVariant(
                $state,
                "resourceType",
                "workspace"
              ),
              [sty.freeBoxshareByLinkAllowed_no__s80EtjDou]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "no"
              ),
              [sty.freeBoxshareByLinkAllowed_yes__s80En4Zx6]: hasVariant(
                $state,
                "shareByLinkAllowed",
                "yes"
              ),
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vlUi4, {
                [sty.freeBoxpermsCascade_showWorkspace__vlUi4Gxhbk]: hasVariant(
                  $state,
                  "permsCascade",
                  "showWorkspace"
                ),
              })}
            >
              <LockIcon
                className={classNames(projectcss.all, sty.svg__tc58B, {
                  [sty.svgpermsCascade_showWorkspace__tc58BGxhbk]: hasVariant(
                    $state,
                    "permsCascade",
                    "showWorkspace"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u6F4K,
                  {
                    [sty.textpermsCascade_showWorkspace__u6F4KGxhbk]:
                      hasVariant($state, "permsCascade", "showWorkspace"),
                    [sty.textresourceType_project__u6F4Kwbkdw]: hasVariant(
                      $state,
                      "resourceType",
                      "project"
                    ),
                    [sty.textresourceType_team__u6F4KHn7Mj]: hasVariant(
                      $state,
                      "resourceType",
                      "team"
                    ),
                    [sty.textshareByLinkAllowed_yes__u6F4Kn4Zx6]: hasVariant(
                      $state,
                      "shareByLinkAllowed",
                      "yes"
                    ),
                  }
                )}
              >
                {hasVariant($state, "resourceType", "team")
                  ? "Anyone with the link join the team as"
                  : "Everyone else"}
              </div>
            </Stack__>
            <Select
              data-plasmic-name={"everyoneElseDropdown"}
              data-plasmic-override={overrides.everyoneElseDropdown}
              className={classNames(
                "__wab_instance",
                sty.everyoneElseDropdown,
                {
                  [sty.everyoneElseDropdownresourceType_project]: hasVariant(
                    $state,
                    "resourceType",
                    "project"
                  ),
                }
              )}
              icon={
                <PlusSvgIcon
                  className={classNames(projectcss.all, sty.svg__iwv5S)}
                  role={"img"}
                />
              }
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "everyoneElseDropdown",
                    "value",
                  ])(eventArgs[0]);
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              textAlign={"right"}
              type={"seamless"}
              value={generateStateValueProp($state, [
                "everyoneElseDropdown",
                "value",
              ])}
            >
              <Select__Option
                className={classNames("__wab_instance", sty.option__v6EPs)}
                value={"value1"}
              >
                {"viewer"}
              </Select__Option>
            </Select>
          </div>
        ) : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "projectActionMenu",
    "shareByLinkSwitch",
    "copyLink",
    "shareByLinkPermDropdown",
    "byInviteTab",
    "newUserEmail",
    "newUserRoleDropdown",
    "sendInviteButton",
    "loginLink",
    "permsContainer",
    "teamName",
    "teamLink",
    "workspaceName",
    "workspaceLink",
    "everyoneElseDropdown",
  ],
  projectActionMenu: ["projectActionMenu"],
  shareByLinkSwitch: ["shareByLinkSwitch"],
  copyLink: ["copyLink"],
  shareByLinkPermDropdown: ["shareByLinkPermDropdown"],
  byInviteTab: [
    "byInviteTab",
    "newUserEmail",
    "newUserRoleDropdown",
    "sendInviteButton",
    "loginLink",
    "permsContainer",
    "teamName",
    "teamLink",
    "workspaceName",
    "workspaceLink",
  ],
  newUserEmail: ["newUserEmail"],
  newUserRoleDropdown: ["newUserRoleDropdown"],
  sendInviteButton: ["sendInviteButton"],
  loginLink: ["loginLink"],
  permsContainer: [
    "permsContainer",
    "teamName",
    "teamLink",
    "workspaceName",
    "workspaceLink",
  ],
  teamName: ["teamName"],
  teamLink: ["teamLink"],
  workspaceName: ["workspaceName"],
  workspaceLink: ["workspaceLink"],
  everyoneElseDropdown: ["everyoneElseDropdown"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  projectActionMenu: typeof ActionMenuButton;
  shareByLinkSwitch: typeof Checkbox;
  copyLink: typeof Button;
  shareByLinkPermDropdown: typeof Select;
  byInviteTab: "div";
  newUserEmail: typeof Textbox;
  newUserRoleDropdown: typeof Select;
  sendInviteButton: typeof Button;
  loginLink: "a";
  permsContainer: "div";
  teamName: "span";
  teamLink: typeof Button;
  workspaceName: "span";
  workspaceLink: typeof Button;
  everyoneElseDropdown: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShareDialogContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShareDialogContent__VariantsArgs;
    args?: PlasmicShareDialogContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShareDialogContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShareDialogContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShareDialogContent__ArgProps,
          internalVariantPropNames: PlasmicShareDialogContent__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicShareDialogContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShareDialogContent";
  } else {
    func.displayName = `PlasmicShareDialogContent.${nodeName}`;
  }
  return func;
}

export const PlasmicShareDialogContent = Object.assign(
  // Top-level PlasmicShareDialogContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    projectActionMenu: makeNodeComponent("projectActionMenu"),
    shareByLinkSwitch: makeNodeComponent("shareByLinkSwitch"),
    copyLink: makeNodeComponent("copyLink"),
    shareByLinkPermDropdown: makeNodeComponent("shareByLinkPermDropdown"),
    byInviteTab: makeNodeComponent("byInviteTab"),
    newUserEmail: makeNodeComponent("newUserEmail"),
    newUserRoleDropdown: makeNodeComponent("newUserRoleDropdown"),
    sendInviteButton: makeNodeComponent("sendInviteButton"),
    loginLink: makeNodeComponent("loginLink"),
    permsContainer: makeNodeComponent("permsContainer"),
    teamName: makeNodeComponent("teamName"),
    teamLink: makeNodeComponent("teamLink"),
    workspaceName: makeNodeComponent("workspaceName"),
    workspaceLink: makeNodeComponent("workspaceLink"),
    everyoneElseDropdown: makeNodeComponent("everyoneElseDropdown"),

    // Metadata about props expected for PlasmicShareDialogContent
    internalVariantProps: PlasmicShareDialogContent__VariantProps,
    internalArgProps: PlasmicShareDialogContent__ArgProps,
  }
);

export default PlasmicShareDialogContent;
/* prettier-ignore-end */
