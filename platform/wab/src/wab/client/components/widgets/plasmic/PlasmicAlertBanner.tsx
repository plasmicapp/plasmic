/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 29njzcsBEPR4koRddw4knF
// Component: DCWq1LLaJ6e

import * as React from "react";

import {
  Flex as Flex__,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import Button from "../Button"; // plasmic-import: SEF-sRmSoqV5c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../../../plasmic/plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import projectcss from "../../../plasmic/PP__plasmickit_alert_banner.module.css"; // plasmic-import: 29njzcsBEPR4koRddw4knF/projectcss
import plasmic_plasmic_kit_design_system_css from "../../../plasmic/PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import sty from "./PlasmicAlertBanner.module.css"; // plasmic-import: DCWq1LLaJ6e/css

import CloseIcon from "../../../plasmic/plasmic_kit/PlasmicIcon__Close"; // plasmic-import: hy7vKrgdAZwW4/icon
import ChevronDownSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import WarningTriangleSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__WarningTriangleSvg"; // plasmic-import: S0L-xosWD/icon

createPlasmicElementProxy;

export type PlasmicAlertBanner__VariantMembers = {
  state:
    | "readOnly"
    | "concurrentEdit"
    | "saveFailed"
    | "viewOld"
    | "notChrome"
    | "authError"
    | "outOfDate"
    | "unlogged"
    | "permError"
    | "watch"
    | "invariantError"
    | "protectedMainBranch";
};
export type PlasmicAlertBanner__VariantsArgs = {
  state?: SingleChoiceArg<
    | "readOnly"
    | "concurrentEdit"
    | "saveFailed"
    | "viewOld"
    | "notChrome"
    | "authError"
    | "outOfDate"
    | "unlogged"
    | "permError"
    | "watch"
    | "invariantError"
    | "protectedMainBranch"
  >;
};
type VariantPropType = keyof PlasmicAlertBanner__VariantsArgs;
export const PlasmicAlertBanner__VariantProps = new Array<VariantPropType>(
  "state"
);

export type PlasmicAlertBanner__ArgsType = {};
type ArgPropType = keyof PlasmicAlertBanner__ArgsType;
export const PlasmicAlertBanner__ArgProps = new Array<ArgPropType>();

export type PlasmicAlertBanner__OverridesType = {
  root?: Flex__<"div">;
  watchBtn?: Flex__<typeof Button>;
  visit2?: Flex__<"div">;
  actionBtn?: Flex__<typeof Button>;
  visit?: Flex__<"div">;
  dismissBtn?: Flex__<"div">;
};

export interface DefaultAlertBannerProps {
  state?: SingleChoiceArg<
    | "readOnly"
    | "concurrentEdit"
    | "saveFailed"
    | "viewOld"
    | "notChrome"
    | "authError"
    | "outOfDate"
    | "unlogged"
    | "permError"
    | "watch"
    | "invariantError"
    | "protectedMainBranch"
  >;
  className?: string;
}

const $$ = {};

function PlasmicAlertBanner__RenderFunc(props: {
  variants: PlasmicAlertBanner__VariantsArgs;
  args: PlasmicAlertBanner__ArgsType;
  overrides: PlasmicAlertBanner__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstate_authError]: hasVariant($state, "state", "authError"),
          [sty.rootstate_concurrentEdit]: hasVariant(
            $state,
            "state",
            "concurrentEdit"
          ),
          [sty.rootstate_invariantError]: hasVariant(
            $state,
            "state",
            "invariantError"
          ),
          [sty.rootstate_notChrome]: hasVariant($state, "state", "notChrome"),
          [sty.rootstate_outOfDate]: hasVariant($state, "state", "outOfDate"),
          [sty.rootstate_permError]: hasVariant($state, "state", "permError"),
          [sty.rootstate_protectedMainBranch]: hasVariant(
            $state,
            "state",
            "protectedMainBranch"
          ),
          [sty.rootstate_readOnly]: hasVariant($state, "state", "readOnly"),
          [sty.rootstate_saveFailed]: hasVariant($state, "state", "saveFailed"),
          [sty.rootstate_unlogged]: hasVariant($state, "state", "unlogged"),
          [sty.rootstate_viewOld]: hasVariant($state, "state", "viewOld"),
          [sty.rootstate_watch]: hasVariant($state, "state", "watch"),
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ncsVm, {
          [sty.freeBoxstate_unlogged__ncsVmt672P]: hasVariant(
            $state,
            "state",
            "unlogged"
          ),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__lHeQv, {
            [sty.freeBoxstate_concurrentEdit__lHeQvsWvup]: hasVariant(
              $state,
              "state",
              "concurrentEdit"
            ),
            [sty.freeBoxstate_notChrome__lHeQvYjAIr]: hasVariant(
              $state,
              "state",
              "notChrome"
            ),
            [sty.freeBoxstate_readOnly__lHeQvkX362]: hasVariant(
              $state,
              "state",
              "readOnly"
            ),
            [sty.freeBoxstate_saveFailed__lHeQvr5KvU]: hasVariant(
              $state,
              "state",
              "saveFailed"
            ),
            [sty.freeBoxstate_unlogged__lHeQvt672P]: hasVariant(
              $state,
              "state",
              "unlogged"
            ),
            [sty.freeBoxstate_viewOld__lHeQvbUuHg]: hasVariant(
              $state,
              "state",
              "viewOld"
            ),
            [sty.freeBoxstate_watch__lHeQvCfKC]: hasVariant(
              $state,
              "state",
              "watch"
            ),
          })}
        >
          <WarningTriangleSvgIcon
            className={classNames(projectcss.all, sty.svg___0Dd3A, {
              [sty.svgstate_invariantError___0Dd3Aw3Sap]: hasVariant(
                $state,
                "state",
                "invariantError"
              ),
              [sty.svgstate_protectedMainBranch___0Dd3Atcl19]: hasVariant(
                $state,
                "state",
                "protectedMainBranch"
              ),
              [sty.svgstate_readOnly___0Dd3AkX362]: hasVariant(
                $state,
                "state",
                "readOnly"
              ),
            })}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bzau, {
            [sty.freeBoxstate_concurrentEdit__bzauSWvup]: hasVariant(
              $state,
              "state",
              "concurrentEdit"
            ),
            [sty.freeBoxstate_invariantError__bzauW3Sap]: hasVariant(
              $state,
              "state",
              "invariantError"
            ),
            [sty.freeBoxstate_notChrome__bzauYjAIr]: hasVariant(
              $state,
              "state",
              "notChrome"
            ),
            [sty.freeBoxstate_protectedMainBranch__bzauTcl19]: hasVariant(
              $state,
              "state",
              "protectedMainBranch"
            ),
            [sty.freeBoxstate_readOnly__bzauKX362]: hasVariant(
              $state,
              "state",
              "readOnly"
            ),
            [sty.freeBoxstate_unlogged__bzauT672P]: hasVariant(
              $state,
              "state",
              "unlogged"
            ),
            [sty.freeBoxstate_watch__bzauCfKC]: hasVariant(
              $state,
              "state",
              "watch"
            ),
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__su8VU,
              {
                [sty.textstate_authError__su8VUaPWsX]: hasVariant(
                  $state,
                  "state",
                  "authError"
                ),
                [sty.textstate_concurrentEdit__su8VUsWvup]: hasVariant(
                  $state,
                  "state",
                  "concurrentEdit"
                ),
                [sty.textstate_invariantError__su8VUw3Sap]: hasVariant(
                  $state,
                  "state",
                  "invariantError"
                ),
                [sty.textstate_notChrome__su8VUYjAIr]: hasVariant(
                  $state,
                  "state",
                  "notChrome"
                ),
                [sty.textstate_outOfDate__su8VUTk56P]: hasVariant(
                  $state,
                  "state",
                  "outOfDate"
                ),
                [sty.textstate_permError__su8VUwZSk1]: hasVariant(
                  $state,
                  "state",
                  "permError"
                ),
                [sty.textstate_protectedMainBranch__su8VUtcl19]: hasVariant(
                  $state,
                  "state",
                  "protectedMainBranch"
                ),
                [sty.textstate_readOnly__su8VUkX362]: hasVariant(
                  $state,
                  "state",
                  "readOnly"
                ),
                [sty.textstate_saveFailed__su8VUr5KvU]: hasVariant(
                  $state,
                  "state",
                  "saveFailed"
                ),
                [sty.textstate_unlogged__su8VUt672P]: hasVariant(
                  $state,
                  "state",
                  "unlogged"
                ),
                [sty.textstate_viewOld__su8VUbUuHg]: hasVariant(
                  $state,
                  "state",
                  "viewOld"
                ),
                [sty.textstate_watch__su8VUCfKC]: hasVariant(
                  $state,
                  "state",
                  "watch"
                ),
              }
            )}
          >
            {hasVariant($state, "state", "protectedMainBranch")
              ? "The main branch is currently protected."
              : hasVariant($state, "state", "invariantError")
              ? "Could not save your project."
              : hasVariant($state, "state", "watch")
              ? "You are in watch mode"
              : hasVariant($state, "state", "permError")
              ? "Sorry, we're not able to save."
              : hasVariant($state, "state", "unlogged")
              ? "You are not logged in."
              : hasVariant($state, "state", "outOfDate")
              ? "An update to Plasmic is available."
              : hasVariant($state, "state", "authError")
              ? "You are no longer logged in."
              : hasVariant($state, "state", "notChrome")
              ? "Sorry, you're using an unsupported browser."
              : hasVariant($state, "state", "viewOld")
              ? "You are viewing a read-only version."
              : hasVariant($state, "state", "saveFailed")
              ? "We're having trouble saving this project."
              : hasVariant($state, "state", "concurrentEdit")
              ? "Someone else has edited the project,"
              : hasVariant($state, "state", "readOnly")
              ? "You only have read permission to this project."
              : "This is bold text."}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__n3UE1,
              {
                [sty.textstate_authError__n3UE1APWsX]: hasVariant(
                  $state,
                  "state",
                  "authError"
                ),
                [sty.textstate_concurrentEdit__n3UE1SWvup]: hasVariant(
                  $state,
                  "state",
                  "concurrentEdit"
                ),
                [sty.textstate_invariantError__n3UE1W3Sap]: hasVariant(
                  $state,
                  "state",
                  "invariantError"
                ),
                [sty.textstate_notChrome__n3UE1YjAIr]: hasVariant(
                  $state,
                  "state",
                  "notChrome"
                ),
                [sty.textstate_outOfDate__n3UE1Tk56P]: hasVariant(
                  $state,
                  "state",
                  "outOfDate"
                ),
                [sty.textstate_permError__n3UE1WZSk1]: hasVariant(
                  $state,
                  "state",
                  "permError"
                ),
                [sty.textstate_protectedMainBranch__n3UE1Tcl19]: hasVariant(
                  $state,
                  "state",
                  "protectedMainBranch"
                ),
                [sty.textstate_readOnly__n3UE1KX362]: hasVariant(
                  $state,
                  "state",
                  "readOnly"
                ),
                [sty.textstate_saveFailed__n3UE1R5KvU]: hasVariant(
                  $state,
                  "state",
                  "saveFailed"
                ),
                [sty.textstate_unlogged__n3UE1T672P]: hasVariant(
                  $state,
                  "state",
                  "unlogged"
                ),
                [sty.textstate_viewOld__n3UE1BUuHg]: hasVariant(
                  $state,
                  "state",
                  "viewOld"
                ),
                [sty.textstate_watch__n3UE1CfKC]: hasVariant(
                  $state,
                  "state",
                  "watch"
                ),
              }
            )}
          >
            {hasVariant($state, "state", "protectedMainBranch")
              ? "Switch to a different branch to edit project content."
              : hasVariant($state, "state", "invariantError")
              ? "The last action you took resulted in an invalid state. We're looking into it!"
              : hasVariant($state, "state", "watch")
              ? "You can see the project while others make changes, but you cannot edit it."
              : hasVariant($state, "state", "permError")
              ? "Please reload the project."
              : hasVariant($state, "state", "unlogged")
              ? "You can explore and make changes, but they won't be saved."
              : hasVariant($state, "state", "outOfDate")
              ? "Please reload the project."
              : hasVariant($state, "state", "authError")
              ? "Please try logging in again."
              : hasVariant($state, "state", "notChrome")
              ? "Right now, Plasmic Studio only works well with Chrome. We're working on it!"
              : hasVariant($state, "state", "viewOld")
              ? "To return to edit mode, reload the project"
              : hasVariant($state, "state", "saveFailed")
              ? "We'll keep trying, but know that your changes may not be saved. "
              : hasVariant($state, "state", "concurrentEdit")
              ? "so this is a stale version. Would you like to watch for new changes?"
              : hasVariant($state, "state", "readOnly")
              ? "You can make a copy of this project for yourself. Any changes to this project won't be saved."
              : "This is normal text"}
          </div>
        </Stack__>
      </Stack__>
      {(
        hasVariant($state, "state", "notChrome")
          ? false
          : hasVariant($state, "state", "saveFailed")
          ? false
          : hasVariant($state, "state", "concurrentEdit")
          ? true
          : false
      ) ? (
        <Button
          data-plasmic-name={"watchBtn"}
          data-plasmic-override={overrides.watchBtn}
          className={classNames("__wab_instance", sty.watchBtn, {
            [sty.watchBtnstate_authError]: hasVariant(
              $state,
              "state",
              "authError"
            ),
            [sty.watchBtnstate_concurrentEdit]: hasVariant(
              $state,
              "state",
              "concurrentEdit"
            ),
            [sty.watchBtnstate_notChrome]: hasVariant(
              $state,
              "state",
              "notChrome"
            ),
            [sty.watchBtnstate_outOfDate]: hasVariant(
              $state,
              "state",
              "outOfDate"
            ),
            [sty.watchBtnstate_permError]: hasVariant(
              $state,
              "state",
              "permError"
            ),
            [sty.watchBtnstate_readOnly]: hasVariant(
              $state,
              "state",
              "readOnly"
            ),
            [sty.watchBtnstate_saveFailed]: hasVariant(
              $state,
              "state",
              "saveFailed"
            ),
            [sty.watchBtnstate_unlogged]: hasVariant(
              $state,
              "state",
              "unlogged"
            ),
            [sty.watchBtnstate_viewOld]: hasVariant($state, "state", "viewOld"),
            [sty.watchBtnstate_watch]: hasVariant($state, "state", "watch"),
          })}
          endIcon={
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg__jmeQg)}
              role={"img"}
            />
          }
          startIcon={
            false ? (
              <svg
                className={classNames(projectcss.all, sty.svg__z6ODh)}
                role={"img"}
              />
            ) : null
          }
          type={["backlitError"]}
        >
          <div
            data-plasmic-name={"visit2"}
            data-plasmic-override={overrides.visit2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.visit2,
              {
                [sty.visit2state_authError]: hasVariant(
                  $state,
                  "state",
                  "authError"
                ),
                [sty.visit2state_concurrentEdit]: hasVariant(
                  $state,
                  "state",
                  "concurrentEdit"
                ),
                [sty.visit2state_outOfDate]: hasVariant(
                  $state,
                  "state",
                  "outOfDate"
                ),
                [sty.visit2state_permError]: hasVariant(
                  $state,
                  "state",
                  "permError"
                ),
                [sty.visit2state_readOnly]: hasVariant(
                  $state,
                  "state",
                  "readOnly"
                ),
                [sty.visit2state_saveFailed]: hasVariant(
                  $state,
                  "state",
                  "saveFailed"
                ),
                [sty.visit2state_unlogged]: hasVariant(
                  $state,
                  "state",
                  "unlogged"
                ),
                [sty.visit2state_viewOld]: hasVariant(
                  $state,
                  "state",
                  "viewOld"
                ),
                [sty.visit2state_watch]: hasVariant($state, "state", "watch"),
              }
            )}
          >
            {hasVariant($state, "state", "concurrentEdit") ? "Watch" : "Button"}
          </div>
        </Button>
      ) : null}
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___8R5S, {
          [sty.freeBoxstate_authError___8R5SaPWsX]: hasVariant(
            $state,
            "state",
            "authError"
          ),
          [sty.freeBoxstate_concurrentEdit___8R5SsWvup]: hasVariant(
            $state,
            "state",
            "concurrentEdit"
          ),
          [sty.freeBoxstate_outOfDate___8R5STk56P]: hasVariant(
            $state,
            "state",
            "outOfDate"
          ),
          [sty.freeBoxstate_permError___8R5SwZSk1]: hasVariant(
            $state,
            "state",
            "permError"
          ),
          [sty.freeBoxstate_viewOld___8R5SbUuHg]: hasVariant(
            $state,
            "state",
            "viewOld"
          ),
          [sty.freeBoxstate_watch___8R5SCfKC]: hasVariant(
            $state,
            "state",
            "watch"
          ),
        })}
      >
        {(
          hasVariant($state, "state", "protectedMainBranch")
            ? true
            : hasVariant($state, "state", "watch")
            ? true
            : hasVariant($state, "state", "unlogged")
            ? true
            : hasVariant($state, "state", "notChrome")
            ? false
            : hasVariant($state, "state", "saveFailed")
            ? false
            : hasVariant($state, "state", "readOnly")
            ? true
            : true
        ) ? (
          <Button
            data-plasmic-name={"actionBtn"}
            data-plasmic-override={overrides.actionBtn}
            className={classNames("__wab_instance", {
              [sty.actionBtnstate_protectedMainBranch]: hasVariant(
                $state,
                "state",
                "protectedMainBranch"
              ),
            })}
            endIcon={
              <ChevronDownSvgIcon
                className={classNames(projectcss.all, sty.svg__jR75H)}
                role={"img"}
              />
            }
            size={"wide"}
            startIcon={
              false ? (
                <svg
                  className={classNames(projectcss.all, sty.svg__i6KIv)}
                  role={"img"}
                />
              ) : null
            }
            type={
              hasVariant($state, "state", "watch")
                ? ["backlitInfo"]
                : hasVariant($state, "state", "unlogged")
                ? ["backlitInfo"]
                : hasVariant($state, "state", "readOnly")
                ? ["backlitInfo"]
                : ["backlitError"]
            }
          >
            <div
              data-plasmic-name={"visit"}
              data-plasmic-override={overrides.visit}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.visit,
                {
                  [sty.visitstate_authError]: hasVariant(
                    $state,
                    "state",
                    "authError"
                  ),
                  [sty.visitstate_concurrentEdit]: hasVariant(
                    $state,
                    "state",
                    "concurrentEdit"
                  ),
                  [sty.visitstate_invariantError]: hasVariant(
                    $state,
                    "state",
                    "invariantError"
                  ),
                  [sty.visitstate_outOfDate]: hasVariant(
                    $state,
                    "state",
                    "outOfDate"
                  ),
                  [sty.visitstate_permError]: hasVariant(
                    $state,
                    "state",
                    "permError"
                  ),
                  [sty.visitstate_readOnly]: hasVariant(
                    $state,
                    "state",
                    "readOnly"
                  ),
                  [sty.visitstate_saveFailed]: hasVariant(
                    $state,
                    "state",
                    "saveFailed"
                  ),
                  [sty.visitstate_unlogged]: hasVariant(
                    $state,
                    "state",
                    "unlogged"
                  ),
                  [sty.visitstate_viewOld]: hasVariant(
                    $state,
                    "state",
                    "viewOld"
                  ),
                  [sty.visitstate_watch]: hasVariant($state, "state", "watch"),
                }
              )}
            >
              {hasVariant($state, "state", "invariantError")
                ? "Reload Project"
                : hasVariant($state, "state", "watch")
                ? "Leave watch mode"
                : hasVariant($state, "state", "permError")
                ? "Reload Project"
                : hasVariant($state, "state", "unlogged")
                ? "Sign up / Log in"
                : hasVariant($state, "state", "outOfDate")
                ? "Reload Project"
                : hasVariant($state, "state", "authError")
                ? "Reload Project"
                : hasVariant($state, "state", "viewOld")
                ? "Back to current version"
                : hasVariant($state, "state", "concurrentEdit")
                ? "Reload Project"
                : hasVariant($state, "state", "readOnly")
                ? "Copy Project"
                : "Button"}
            </div>
          </Button>
        ) : null}
        <div
          data-plasmic-name={"dismissBtn"}
          data-plasmic-override={overrides.dismissBtn}
          className={classNames(projectcss.all, sty.dismissBtn, {
            [sty.dismissBtnstate_authError]: hasVariant(
              $state,
              "state",
              "authError"
            ),
            [sty.dismissBtnstate_invariantError]: hasVariant(
              $state,
              "state",
              "invariantError"
            ),
            [sty.dismissBtnstate_outOfDate]: hasVariant(
              $state,
              "state",
              "outOfDate"
            ),
            [sty.dismissBtnstate_permError]: hasVariant(
              $state,
              "state",
              "permError"
            ),
            [sty.dismissBtnstate_readOnly]: hasVariant(
              $state,
              "state",
              "readOnly"
            ),
            [sty.dismissBtnstate_saveFailed]: hasVariant(
              $state,
              "state",
              "saveFailed"
            ),
            [sty.dismissBtnstate_unlogged]: hasVariant(
              $state,
              "state",
              "unlogged"
            ),
            [sty.dismissBtnstate_viewOld]: hasVariant(
              $state,
              "state",
              "viewOld"
            ),
            [sty.dismissBtnstate_watch]: hasVariant($state, "state", "watch"),
          })}
        >
          <CloseIcon
            className={classNames(projectcss.all, sty.svg__sdZvA, {
              [sty.svgstate_authError__sdZvAaPWsX]: hasVariant(
                $state,
                "state",
                "authError"
              ),
              [sty.svgstate_concurrentEdit__sdZvAsWvup]: hasVariant(
                $state,
                "state",
                "concurrentEdit"
              ),
              [sty.svgstate_invariantError__sdZvAw3Sap]: hasVariant(
                $state,
                "state",
                "invariantError"
              ),
              [sty.svgstate_readOnly__sdZvAkX362]: hasVariant(
                $state,
                "state",
                "readOnly"
              ),
              [sty.svgstate_saveFailed__sdZvAr5KvU]: hasVariant(
                $state,
                "state",
                "saveFailed"
              ),
              [sty.svgstate_unlogged__sdZvAt672P]: hasVariant(
                $state,
                "state",
                "unlogged"
              ),
              [sty.svgstate_watch__sdZvACfKC]: hasVariant(
                $state,
                "state",
                "watch"
              ),
            })}
            role={"img"}
          />
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "watchBtn", "visit2", "actionBtn", "visit", "dismissBtn"],
  watchBtn: ["watchBtn", "visit2"],
  visit2: ["visit2"],
  actionBtn: ["actionBtn", "visit"],
  visit: ["visit"],
  dismissBtn: ["dismissBtn"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  watchBtn: typeof Button;
  visit2: "div";
  actionBtn: typeof Button;
  visit: "div";
  dismissBtn: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAlertBanner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAlertBanner__VariantsArgs;
    args?: PlasmicAlertBanner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAlertBanner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAlertBanner__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAlertBanner__ArgProps,
          internalVariantPropNames: PlasmicAlertBanner__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicAlertBanner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAlertBanner";
  } else {
    func.displayName = `PlasmicAlertBanner.${nodeName}`;
  }
  return func;
}

export const PlasmicAlertBanner = Object.assign(
  // Top-level PlasmicAlertBanner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    watchBtn: makeNodeComponent("watchBtn"),
    visit2: makeNodeComponent("visit2"),
    actionBtn: makeNodeComponent("actionBtn"),
    visit: makeNodeComponent("visit"),
    dismissBtn: makeNodeComponent("dismissBtn"),

    // Metadata about props expected for PlasmicAlertBanner
    internalVariantProps: PlasmicAlertBanner__VariantProps,
    internalArgProps: PlasmicAlertBanner__ArgProps,
  }
);

export default PlasmicAlertBanner;
/* prettier-ignore-end */
