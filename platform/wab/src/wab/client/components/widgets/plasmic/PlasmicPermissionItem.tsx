/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kA1Hysr5ZeimtATHTDJz5B
// Component: GFrmKeyhlA

import * as React from "react";

import {
  Flex as Flex__,
  PlasmicIcon as PlasmicIcon__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState,
  useTrigger,
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";

import IconButton from "../IconButton"; // plasmic-import: LPry-TF4j22a/component
import Select from "../Select"; // plasmic-import: j_4IQyOWK2b/component
import Select__Option from "../Select__Option"; // plasmic-import: rr-LWdMni2G/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_plasmic_kit_color_tokens_css from "../../../plasmic/plasmic_kit_q_4_color_tokens/plasmic_plasmic_kit_q_4_color_tokens.module.css"; // plasmic-import: 95xp9cYcv7HrNWpFWWhbcv/projectcss
import plasmic_plasmic_kit_design_system_css from "../../../plasmic/PP__plasmickit_design_system.module.css"; // plasmic-import: tXkSR39sgCDWSitZxC5xFV/projectcss
import projectcss from "../../../plasmic/PP__plasmickit_share_dialog.module.css"; // plasmic-import: kA1Hysr5ZeimtATHTDJz5B/projectcss
import sty from "./PlasmicPermissionItem.module.css"; // plasmic-import: GFrmKeyhlA/css

import ResetIcon from "../../../plasmic/plasmic_kit/PlasmicIcon__Reset"; // plasmic-import: Dj3u-HuPv94sN/icon
import ChevronDownSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__ChevronDownSvg"; // plasmic-import: xZrB9_0ir/icon
import PlusSvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__PlusSvg"; // plasmic-import: sQKgd2GNr/icon
import Trash2SvgIcon from "../../../plasmic/plasmic_kit_icons/icons/PlasmicIcon__Trash2Svg"; // plasmic-import: nS4_I75qv/icon

createPlasmicElementProxy;

export type PlasmicPermissionItem__VariantMembers = {
  role: "owner";
  loading: "loading";
};
export type PlasmicPermissionItem__VariantsArgs = {
  role?: SingleChoiceArg<"owner">;
  loading?: SingleBooleanChoiceArg<"loading">;
};
type VariantPropType = keyof PlasmicPermissionItem__VariantsArgs;
export const PlasmicPermissionItem__VariantProps = new Array<VariantPropType>(
  "role",
  "loading"
);

export type PlasmicPermissionItem__ArgsType = {
  email?: React.ReactNode;
  spinner?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPermissionItem__ArgsType;
export const PlasmicPermissionItem__ArgProps = new Array<ArgPropType>(
  "email",
  "spinner"
);

export type PlasmicPermissionItem__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  owner?: Flex__<"div">;
  deleteBtn?: Flex__<typeof IconButton>;
  roleDropdown?: Flex__<typeof Select>;
};

export interface DefaultPermissionItemProps {
  email?: React.ReactNode;
  spinner?: React.ReactNode;
  role?: SingleChoiceArg<"owner">;
  loading?: SingleBooleanChoiceArg<"loading">;
  className?: string;
}

const $$ = {};

function PlasmicPermissionItem__RenderFunc(props: {
  variants: PlasmicPermissionItem__VariantsArgs;
  args: PlasmicPermissionItem__ArgsType;
  overrides: PlasmicPermissionItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "role",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.role,
      },
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading,
      },
      {
        path: "roleDropdown.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "viewer",
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_plasmic_kit_design_system_css.plasmic_tokens,
        plasmic_plasmic_kit_color_tokens_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootloading]: hasVariant($state, "loading", "loading"),
          [sty.rootrole_owner]: hasVariant($state, "role", "owner"),
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {renderPlasmicSlot({
        defaultContents: "yang@plasmic.app",
        value: args.email,
      })}
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxloading]: hasVariant($state, "loading", "loading"),
          [sty.freeBoxrole_owner]: hasVariant($state, "role", "owner"),
        })}
      >
        {(hasVariant($state, "role", "owner") ? true : false) ? (
          <div
            data-plasmic-name={"owner"}
            data-plasmic-override={overrides.owner}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.owner,
              { [sty.ownerrole_owner]: hasVariant($state, "role", "owner") }
            )}
          >
            {hasVariant($state, "role", "owner") ? "Owner" : "Enter some text"}
          </div>
        ) : null}
        {(hasVariant($state, "loading", "loading") ? true : false)
          ? renderPlasmicSlot({
              defaultContents: (
                <ResetIcon
                  className={classNames(projectcss.all, sty.svg__vmeQb)}
                  role={"img"}
                />
              ),

              value: args.spinner,
            })
          : null}
        <IconButton
          data-plasmic-name={"deleteBtn"}
          data-plasmic-override={overrides.deleteBtn}
          children2={
            <ChevronDownSvgIcon
              className={classNames(projectcss.all, sty.svg___2OKoH)}
              role={"img"}
            />
          }
          className={classNames("__wab_instance", sty.deleteBtn, {
            [sty.deleteBtnrole_owner]: hasVariant($state, "role", "owner"),
          })}
          withRedBackgroundHover={true}
        >
          <PlasmicIcon__
            PlasmicIconType={triggers.hover_root ? Trash2SvgIcon : PlusSvgIcon}
            className={classNames(projectcss.all, sty.svg__oRYw)}
            role={"img"}
          />
        </IconButton>
        {(hasVariant($state, "role", "owner") ? false : true) ? (
          <Select
            data-plasmic-name={"roleDropdown"}
            data-plasmic-override={overrides.roleDropdown}
            className={classNames("__wab_instance", sty.roleDropdown, {
              [sty.roleDropdownloading]: hasVariant(
                $state,
                "loading",
                "loading"
              ),
              [sty.roleDropdownrole_owner]: hasVariant($state, "role", "owner"),
            })}
            icon={
              <PlusSvgIcon
                className={classNames(projectcss.all, sty.svg__ijqCo)}
                role={"img"}
              />
            }
            isDisabled={
              hasVariant($state, "loading", "loading") ? true : undefined
            }
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["roleDropdown", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            textAlign={"right"}
            type={"seamless"}
            value={generateStateValueProp($state, ["roleDropdown", "value"])}
          >
            <Select__Option
              className={classNames("__wab_instance", sty.option__clhZ3)}
              value={"viewer"}
            >
              {"viewer"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__wZq0D)}
              value={"content"}
            >
              {"designer"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__xCsAc)}
              value={"designer"}
            >
              {"content creator"}
            </Select__Option>
            <Select__Option
              className={classNames("__wab_instance", sty.option__ncavV)}
              value={"editor"}
            >
              {"editor"}
            </Select__Option>
          </Select>
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "owner", "deleteBtn", "roleDropdown"],
  freeBox: ["freeBox", "owner", "deleteBtn", "roleDropdown"],
  owner: ["owner"],
  deleteBtn: ["deleteBtn"],
  roleDropdown: ["roleDropdown"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  owner: "div";
  deleteBtn: typeof IconButton;
  roleDropdown: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPermissionItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPermissionItem__VariantsArgs;
    args?: PlasmicPermissionItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPermissionItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPermissionItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPermissionItem__ArgProps,
          internalVariantPropNames: PlasmicPermissionItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPermissionItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPermissionItem";
  } else {
    func.displayName = `PlasmicPermissionItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPermissionItem = Object.assign(
  // Top-level PlasmicPermissionItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    owner: makeNodeComponent("owner"),
    deleteBtn: makeNodeComponent("deleteBtn"),
    roleDropdown: makeNodeComponent("roleDropdown"),

    // Metadata about props expected for PlasmicPermissionItem
    internalVariantProps: PlasmicPermissionItem__VariantProps,
    internalArgProps: PlasmicPermissionItem__ArgProps,
  }
);

export default PlasmicPermissionItem;
/* prettier-ignore-end */
