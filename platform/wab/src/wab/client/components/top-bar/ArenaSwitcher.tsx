// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { NavigationDropdown } from "@/wab/client/components/sidebar-tabs/ProjectPanel/NavigationDropdown";
import { useResizableHandle } from "@/wab/client/hooks/useResizableHandle";
import {
  DefaultArenaSwitcherProps,
  PlasmicArenaSwitcher,
} from "@/wab/client/plasmic/plasmic_kit_top_bar/PlasmicArenaSwitcher";
import { useStudioCtx } from "@/wab/client/studio-ctx/StudioCtx";
import { useInteractOutsideWithCommonExceptions } from "@/wab/commons/components/OnClickAway";
import { useSignalListener } from "@/wab/commons/components/use-signal-listener";
import { XDraggable } from "@/wab/commons/components/XDraggable";
import {
  getArenaName,
  isComponentArena,
  isPageArena,
} from "@/wab/shared/Arenas";
import { Popover } from "antd";
import { observer } from "mobx-react";
import * as React from "react";
import { buildArenaRowMenu } from "@/wab/client/components/sidebar-tabs/ProjectPanel/NavigationRows";
import { AnyArena } from "@/wab/shared/Arenas";
import { EditableLabel } from "@/wab/client/components/widgets/EditableLabel/EditableLabel";
import cn from "classnames";

export type ArenaSwitcherProps = DefaultArenaSwitcherProps;

const ArenaSwitcher = observer(function ArenaSwitcher(
  props: ArenaSwitcherProps
) {
  const studioCtx = useStudioCtx();
  const [visible, setVisible] = React.useState(false);
  const popoverRef = React.useRef<HTMLDivElement>(null);
  const [contextMenu, setContextMenu] = React.useState<{
    x: number;
    y: number;
  } | null>(null);

  // I haven't completed the the renaming section yet
  // I think I need to make the the text in the dropdown button editable for this to work
  const [renaming, setRenaming] = React.useState(false);

  useSignalListener(
    studioCtx.showProjectPanelRequested,
    () => {
      setVisible(true);
      setTimeout(() => {
        studioCtx.focusOnProjectSearchInput();
      }, 100);
    },
    [studioCtx]
  );

  useInteractOutsideWithCommonExceptions({
    ref: popoverRef,
    isDisabled: !visible,
    exceptSelectors: ["#proj-nav-button", ".left-pane-resizer"],
    onInteractOutside: (e) => {
      if (!resizingState.current) {
        setVisible(false);
      }
    },
  });

  const handleClose = () => {
    setContextMenu(null);
  };

  React.useEffect(() => {
    const handleClick = () => {
      if (contextMenu) {
        setContextMenu(null);
      }
    };

    document.addEventListener("click", handleClick);
    return () => {
      document.removeEventListener("click", handleClick);
    };
  }, [contextMenu]);

  const currentArena = studioCtx.currentArena as AnyArena;
  const currentArenaName = currentArena ? getArenaName(currentArena) : "";

  const [popoverWidth, setPopoverWidth] = React.useState(300);
  const { onDrag, onDragStart, onDragStop, resizingState } = useResizableHandle(
    {
      panelRef: popoverRef,
      onChange: (width) => {
        setPopoverWidth(width);
      },
    }
  );

  // importing the buildArenaRowMenu function from the NavigationRows file
  // this is one place where I think I might be doing this incorrectly
  // I'm wondering if I should just separate this function out into its own component then import
  const ContextMenu = buildArenaRowMenu({
    arena: currentArena,
    studioCtx,
    onClose: handleClose,
  });

  return (
    <>
      <Popover
        placement="bottomLeft"
        content={
          <>
            <NavigationDropdown
              ref={popoverRef}
              onClose={() => {
                setVisible(false);
              }}
            />
            <XDraggable
              onStart={onDragStart}
              onDrag={onDrag}
              onStop={onDragStop}
            >
              <div className="left-pane-resizer auto-pointer-events" />
            </XDraggable>
          </>
        }
        overlayInnerStyle={{ width: popoverWidth, borderRadius: 12 }}
        open={visible}
        id="proj-nav-popover"
        overlayClassName={"ant-popover--dropdown-like"}
      >
        <PlasmicArenaSwitcher
          onClick={() => {
            studioCtx.showProjectPanel();
          }}
          onContextMenu={(e) => {
            e.preventDefault();
            setContextMenu({ x: e.clientX, y: e.clientY });
          }}
          arenaType={
            isComponentArena(currentArena)
              ? "component"
              : isPageArena(currentArena)
              ? "page"
              : "mixed"
          }
          root={{
            children: (
              <span
                className="fill-width text-ellipsis inline-block"
                style={{ maxWidth: 300 }}
              >
                {currentArenaName}
              </span>
            ),
          }}
          id="proj-nav-button"
          {...props}
        />
      </Popover>
      {contextMenu && (
        <div
          // testing out styles here
          style={{
            position: "fixed",
            top: contextMenu.y,
            left: contextMenu.x,
            backgroundColor: "white",
            zIndex: 9999,
            boxShadow:
              "0 0 0 1px rgba(0, 0, 0, 0.03), 2px 2px 10px rgba(0, 0, 0, 0.1)",
          }}
        >
          <ContextMenu />
        </div>
      )}
    </>
  );
});

export default ArenaSwitcher;
